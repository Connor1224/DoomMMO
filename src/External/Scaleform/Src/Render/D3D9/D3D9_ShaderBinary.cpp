/**************************************************************************

    PublicHeader:   Render
    Filename    :   D3D9_ShaderBinary.cpp
    Content     :   D3D9 Shader descriptors
    Created     :   6/27/2012
    Authors     :   Automatically generated.

    Copyright   :   Copyright 2012 Autodesk, Inc. All Rights reserved.

    Use of this software is subject to the terms of the Autodesk license
    agreement provided at the time of installation or download, or which
    otherwise accompanies this software in either electronic or hard copy form.

**************************************************************************/


#include <windows.h> // BYTE


namespace Scaleform { namespace Render { namespace D3D9 {


#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 mvp[2];
//   float4 texgen[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       2
//   texgen       c2       2
//

    vs_3_0
    def c4, 0, 1, 0, 0
    dcl_position v0
    dcl_texcoord o0.xy
    dcl_position o1
    dp4 o1.x, v0, c0
    dp4 o1.y, v0, c1
    dp4 o0.x, v0, c2
    dp4 o0.y, v0, c3
    mov o1.zw, c4.xyxy

// approximately 5 instruction slots used
#endif

extern const BYTE pBinary_VTexTG[] =
{
      0,   3, 254, 255, 254, 255, 
     43,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 119,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    112,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
      2,   0,   2,   0,  72,   0, 
      0,   0,   0,   0,   0,   0, 
     88,   0,   0,   0,   2,   0, 
      2,   0,   2,   0,  10,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 109, 118, 112,   0, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 103, 101, 110,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5,   4,   0, 
     15, 160,   0,   0,   0,   0, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 224, 
      9,   0,   0,   3,   1,   0, 
      1, 224,   0,   0, 228, 144, 
      0,   0, 228, 160,   9,   0, 
      0,   3,   1,   0,   2, 224, 
      0,   0, 228, 144,   1,   0, 
    228, 160,   9,   0,   0,   3, 
      0,   0,   1, 224,   0,   0, 
    228, 144,   2,   0, 228, 160, 
      9,   0,   0,   3,   0,   0, 
      2, 224,   0,   0, 228, 144, 
      3,   0, 228, 160,   1,   0, 
      0,   2,   1,   0,  12, 224, 
      4,   0,  68, 160, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       1
//

    ps_3_0
    dcl_texcoord v0.xy
    dcl_2d s0
    texld oC0, v0, s0

// approximately 1 instruction slot used (1 texture, 0 arithmetic)
#endif

extern const BYTE pBinary_FTexTG[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  66,   0, 
      0,   3,   0,   8,  15, 128, 
      0,   0, 228, 144,   0,   8, 
    228, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       1
//

    ps_3_0
    def c0, -1, 1, 0, 0
    dcl_texcoord v0.xy
    dcl_2d s0
    texld r0, v0, s0
    add r1, r0, c0.x
    mad oC0, r0.w, r1, c0.y

// approximately 3 instruction slots used (1 texture, 2 arithmetic)
#endif

extern const BYTE pBinary_FTexTGMul[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  81,   0, 
      0,   5,   0,   0,  15, 160, 
      0,   0, 128, 191,   0,   0, 
    128,  63,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0, 228, 144,   0,   8, 
    228, 160,   2,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    228, 128,   0,   0,   0, 160, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 255, 128, 
      1,   0, 228, 128,   0,   0, 
     85, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 mvp[2];
//   float4 texgen[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       2
//   texgen       c2       2
//

    vs_3_0
    def c4, 0, 1, 0, 0
    dcl_color v0
    dcl_position v1
    dcl_color o0
    dcl_texcoord o1.xy
    dcl_position o2
    dp4 o2.x, v1, c0
    dp4 o2.y, v1, c1
    dp4 o1.x, v1, c2
    dp4 o1.y, v1, c3
    mov o0, v0
    mov o2.zw, c4.xyxy

// approximately 6 instruction slots used
#endif

extern const BYTE pBinary_VTexTGEAlpha[] =
{
      0,   3, 254, 255, 254, 255, 
     43,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 119,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    112,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
      2,   0,   2,   0,  72,   0, 
      0,   0,   0,   0,   0,   0, 
     88,   0,   0,   0,   2,   0, 
      2,   0,   2,   0,  10,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 109, 118, 112,   0, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 103, 101, 110,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5,   4,   0, 
     15, 160,   0,   0,   0,   0, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 224, 
      9,   0,   0,   3,   2,   0, 
      1, 224,   1,   0, 228, 144, 
      0,   0, 228, 160,   9,   0, 
      0,   3,   2,   0,   2, 224, 
      1,   0, 228, 144,   1,   0, 
    228, 160,   9,   0,   0,   3, 
      1,   0,   1, 224,   1,   0, 
    228, 144,   2,   0, 228, 160, 
      9,   0,   0,   3,   1,   0, 
      2, 224,   1,   0, 228, 144, 
      3,   0, 228, 160,   1,   0, 
      0,   2,   0,   0,  15, 224, 
      0,   0, 228, 144,   1,   0, 
      0,   2,   2,   0,  12, 224, 
      4,   0,  68, 160, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       1
//

    ps_3_0
    dcl_color v0.w
    dcl_texcoord v1.xy
    dcl_2d s0
    texld r0, v1, s0
    mul oC0.w, r0.w, v0.w
    mov oC0.xyz, r0

// approximately 3 instruction slots used (1 texture, 2 arithmetic)
#endif

extern const BYTE pBinary_FTexTGEAlpha[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,   8, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      1,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      1,   0, 228, 144,   0,   8, 
    228, 160,   5,   0,   0,   3, 
      0,   8,   8, 128,   0,   0, 
    255, 128,   0,   0, 255, 144, 
      1,   0,   0,   2,   0,   8, 
      7, 128,   0,   0, 228, 128, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       1
//

    ps_3_0
    def c0, -1, 1, 0, 0
    dcl_color v0.w
    dcl_texcoord v1.xy
    dcl_2d s0
    texld r0, v1, s0
    mul r0.w, r0.w, v0.w
    add r1, r0, c0.x
    mad oC0, r0.w, r1, c0.y

// approximately 4 instruction slots used (1 texture, 3 arithmetic)
#endif

extern const BYTE pBinary_FTexTGEAlphaMul[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  81,   0, 
      0,   5,   0,   0,  15, 160, 
      0,   0, 128, 191,   0,   0, 
    128,  63,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,   8, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      1,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      1,   0, 228, 144,   0,   8, 
    228, 160,   5,   0,   0,   3, 
      0,   0,   8, 128,   0,   0, 
    255, 128,   0,   0, 255, 144, 
      2,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 228, 128, 
      0,   0,   0, 160,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      0,   0, 255, 128,   1,   0, 
    228, 128,   0,   0,  85, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   float4 mvp[2];
//   float4 texgen[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   mvp          c2       2
//   texgen       c4       2
//

    vs_3_0
    def c6, 0, 1, 0, 0
    dcl_position v0
    dcl_texcoord o0
    dcl_texcoord1 o1
    dcl_texcoord2 o2.xy
    dcl_position o3
    dp4 o3.x, v0, c2
    dp4 o3.y, v0, c3
    dp4 o2.x, v0, c4
    dp4 o2.y, v0, c5
    mov o0, c0
    mov o1, c1
    mov o3.zw, c6.xyxy

// approximately 7 instruction slots used
#endif

extern const BYTE pBinary_VTexTGCxform[] =
{
      0,   3, 254, 255, 254, 255, 
     61,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 191,   0, 
      0,   0,   0,   3, 254, 255, 
      4,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    184,   0,   0,   0, 108,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 116,   0, 
      0,   0,   0,   0,   0,   0, 
    132,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    116,   0,   0,   0,   0,   0, 
      0,   0, 138,   0,   0,   0, 
      2,   0,   2,   0,   2,   0, 
     10,   0, 144,   0,   0,   0, 
      0,   0,   0,   0, 160,   0, 
      0,   0,   2,   0,   4,   0, 
      2,   0,  18,   0, 168,   0, 
      0,   0,   0,   0,   0,   0, 
     99, 120,  97, 100, 100,   0, 
    171, 171,   1,   0,   3,   0, 
      1,   0,   4,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
     99, 120, 109, 117, 108,   0, 
    109, 118, 112,   0, 171, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 103, 101, 110,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5,   6,   0, 
     15, 160,   0,   0,   0,   0, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      2, 128,   2,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   3,   0,  15, 224, 
      9,   0,   0,   3,   3,   0, 
      1, 224,   0,   0, 228, 144, 
      2,   0, 228, 160,   9,   0, 
      0,   3,   3,   0,   2, 224, 
      0,   0, 228, 144,   3,   0, 
    228, 160,   9,   0,   0,   3, 
      2,   0,   1, 224,   0,   0, 
    228, 144,   4,   0, 228, 160, 
      9,   0,   0,   3,   2,   0, 
      2, 224,   0,   0, 228, 144, 
      5,   0, 228, 160,   1,   0, 
      0,   2,   0,   0,  15, 224, 
      0,   0, 228, 160,   1,   0, 
      0,   2,   1,   0,  15, 224, 
      1,   0, 228, 160,   1,   0, 
      0,   2,   3,   0,  12, 224, 
      6,   0,  68, 160, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       1
//

    ps_3_0
    dcl_texcoord v0
    dcl_texcoord1 v1
    dcl_texcoord2 v2.xy
    dcl_2d s0
    texld r0, v2, s0
    mov r1, v1
    mad oC0, r0, r1, v0

// approximately 3 instruction slots used (1 texture, 2 arithmetic)
#endif

extern const BYTE pBinary_FTexTGCxform[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   2, 128, 
      2,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      2,   0, 228, 144,   0,   8, 
    228, 160,   1,   0,   0,   2, 
      1,   0,  15, 128,   1,   0, 
    228, 144,   4,   0,   0,   4, 
      0,   8,  15, 128,   0,   0, 
    228, 128,   1,   0, 228, 128, 
      0,   0, 228, 144, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       1
//

    ps_3_0
    def c0, -1, 1, 0, 0
    dcl_texcoord v0
    dcl_texcoord1 v1
    dcl_texcoord2 v2.xy
    dcl_2d s0
    texld r0, v2, s0
    mov r1, v1
    mad r0, r0, r1, v0
    add r1, r0, c0.x
    mad oC0, r0.w, r1, c0.y

// approximately 5 instruction slots used (1 texture, 4 arithmetic)
#endif

extern const BYTE pBinary_FTexTGCxformMul[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  81,   0, 
      0,   5,   0,   0,  15, 160, 
      0,   0, 128, 191,   0,   0, 
    128,  63,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   2, 128, 
      2,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      2,   0, 228, 144,   0,   8, 
    228, 160,   1,   0,   0,   2, 
      1,   0,  15, 128,   1,   0, 
    228, 144,   4,   0,   0,   4, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   1,   0, 228, 128, 
      0,   0, 228, 144,   2,   0, 
      0,   3,   1,   0,  15, 128, 
      0,   0, 228, 128,   0,   0, 
      0, 160,   4,   0,   0,   4, 
      0,   8,  15, 128,   0,   0, 
    255, 128,   1,   0, 228, 128, 
      0,   0,  85, 160, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   float4 mvp[2];
//   float4 texgen[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   mvp          c2       2
//   texgen       c4       2
//

    vs_3_0
    def c6, 0, 1, 0, 0
    dcl_color v0
    dcl_position v1
    dcl_color o0
    dcl_texcoord o1
    dcl_texcoord1 o2
    dcl_texcoord2 o3.xy
    dcl_position o4
    dp4 o4.x, v1, c2
    dp4 o4.y, v1, c3
    dp4 o3.x, v1, c4
    dp4 o3.y, v1, c5
    mov o0, v0
    mov o1, c0
    mov o2, c1
    mov o4.zw, c6.xyxy

// approximately 8 instruction slots used
#endif

extern const BYTE pBinary_VTexTGCxformEAlpha[] =
{
      0,   3, 254, 255, 254, 255, 
     61,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 191,   0, 
      0,   0,   0,   3, 254, 255, 
      4,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    184,   0,   0,   0, 108,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 116,   0, 
      0,   0,   0,   0,   0,   0, 
    132,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    116,   0,   0,   0,   0,   0, 
      0,   0, 138,   0,   0,   0, 
      2,   0,   2,   0,   2,   0, 
     10,   0, 144,   0,   0,   0, 
      0,   0,   0,   0, 160,   0, 
      0,   0,   2,   0,   4,   0, 
      2,   0,  18,   0, 168,   0, 
      0,   0,   0,   0,   0,   0, 
     99, 120,  97, 100, 100,   0, 
    171, 171,   1,   0,   3,   0, 
      1,   0,   4,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
     99, 120, 109, 117, 108,   0, 
    109, 118, 112,   0, 171, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 103, 101, 110,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5,   6,   0, 
     15, 160,   0,   0,   0,   0, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   2,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      2, 128,   3,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   4,   0,  15, 224, 
      9,   0,   0,   3,   4,   0, 
      1, 224,   1,   0, 228, 144, 
      2,   0, 228, 160,   9,   0, 
      0,   3,   4,   0,   2, 224, 
      1,   0, 228, 144,   3,   0, 
    228, 160,   9,   0,   0,   3, 
      3,   0,   1, 224,   1,   0, 
    228, 144,   4,   0, 228, 160, 
      9,   0,   0,   3,   3,   0, 
      2, 224,   1,   0, 228, 144, 
      5,   0, 228, 160,   1,   0, 
      0,   2,   0,   0,  15, 224, 
      0,   0, 228, 144,   1,   0, 
      0,   2,   1,   0,  15, 224, 
      0,   0, 228, 160,   1,   0, 
      0,   2,   2,   0,  15, 224, 
      1,   0, 228, 160,   1,   0, 
      0,   2,   4,   0,  12, 224, 
      6,   0,  68, 160, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       1
//

    ps_3_0
    dcl_color v0.w
    dcl_texcoord v1
    dcl_texcoord1 v2
    dcl_texcoord2 v3.xy
    dcl_2d s0
    texld r0, v3, s0
    mov r1, v2
    mad r0, r0, r1, v1
    mul oC0.w, r0.w, v0.w
    mov oC0.xyz, r0

// approximately 5 instruction slots used (1 texture, 4 arithmetic)
#endif

extern const BYTE pBinary_FTexTGCxformEAlpha[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,   8, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      2,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   2, 128, 
      3,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      3,   0, 228, 144,   0,   8, 
    228, 160,   1,   0,   0,   2, 
      1,   0,  15, 128,   2,   0, 
    228, 144,   4,   0,   0,   4, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   1,   0, 228, 128, 
      1,   0, 228, 144,   5,   0, 
      0,   3,   0,   8,   8, 128, 
      0,   0, 255, 128,   0,   0, 
    255, 144,   1,   0,   0,   2, 
      0,   8,   7, 128,   0,   0, 
    228, 128, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       1
//

    ps_3_0
    def c0, -1, 1, 0, 0
    dcl_color v0.w
    dcl_texcoord v1
    dcl_texcoord1 v2
    dcl_texcoord2 v3.xy
    dcl_2d s0
    texld r0, v3, s0
    mov r1, v2
    mad r0, r0, r1, v1
    mul r0.w, r0.w, v0.w
    add r1, r0, c0.x
    mad oC0, r0.w, r1, c0.y

// approximately 6 instruction slots used (1 texture, 5 arithmetic)
#endif

extern const BYTE pBinary_FTexTGCxformEAlphaMul[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  81,   0, 
      0,   5,   0,   0,  15, 160, 
      0,   0, 128, 191,   0,   0, 
    128,  63,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,   8, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      2,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   2, 128, 
      3,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      3,   0, 228, 144,   0,   8, 
    228, 160,   1,   0,   0,   2, 
      1,   0,  15, 128,   2,   0, 
    228, 144,   4,   0,   0,   4, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   1,   0, 228, 128, 
      1,   0, 228, 144,   5,   0, 
      0,   3,   0,   0,   8, 128, 
      0,   0, 255, 128,   0,   0, 
    255, 144,   2,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    228, 128,   0,   0,   0, 160, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 255, 128, 
      1,   0, 228, 128,   0,   0, 
     85, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 mvp[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       2
//

    vs_3_0
    def c2, 0, 1, 0, 0
    dcl_color v0
    dcl_position v1
    dcl_color o0
    dcl_position o1
    dp4 o1.x, v1, c0
    dp4 o1.y, v1, c1
    mov o0, v0
    mov o1.zw, c2.xyxy

// approximately 4 instruction slots used
#endif

extern const BYTE pBinary_VVertex[] =
{
      0,   3, 254, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
      2,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    109, 118, 112,   0,   1,   0, 
      3,   0,   1,   0,   4,   0, 
      2,   0,   0,   0,   0,   0, 
      0,   0, 118, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  81,   0, 
      0,   5,   2,   0,  15, 160, 
      0,   0,   0,   0,   0,   0, 
    128,  63,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,  15, 224,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      1,   0,  15, 224,   9,   0, 
      0,   3,   1,   0,   1, 224, 
      1,   0, 228, 144,   0,   0, 
    228, 160,   9,   0,   0,   3, 
      1,   0,   2, 224,   1,   0, 
    228, 144,   1,   0, 228, 160, 
      1,   0,   0,   2,   0,   0, 
     15, 224,   0,   0, 228, 144, 
      1,   0,   0,   2,   1,   0, 
     12, 224,   2,   0,  68, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
/    ps_3_0
    dcl_color v0
    mov oC0, v0

// approximately 1 instruction slot used
#endif

extern const BYTE pBinary_FVertex[] =
{
      0,   3, 255, 255, 254, 255, 
     22,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  35,   0, 
      0,   0,   0,   3, 255, 255, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0, 129,   0,   0, 
     28,   0,   0,   0, 112, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
      1,   0,   0,   2,   0,   8, 
     15, 128,   0,   0, 228, 144, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
/    ps_3_0
    def c0, -1, 1, 0, 0
    dcl_color v0
    add r0, c0.x, v0
    mad oC0, v0.w, r0, c0.y

// approximately 2 instruction slots used
#endif

extern const BYTE pBinary_FVertexMul[] =
{
      0,   3, 255, 255, 254, 255, 
     22,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  35,   0, 
      0,   0,   0,   3, 255, 255, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0, 129,   0,   0, 
     28,   0,   0,   0, 112, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5,   0,   0, 
     15, 160,   0,   0, 128, 191, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
      2,   0,   0,   3,   0,   0, 
     15, 128,   0,   0,   0, 160, 
      0,   0, 228, 144,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      0,   0, 255, 144,   0,   0, 
    228, 128,   0,   0,  85, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 mvp[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       2
//

    vs_3_0
    def c2, 0, 1, 0, 0
    dcl_color v0
    dcl_color1 v1
    dcl_position v2
    dcl_color o0
    dcl_color1 o1
    dcl_position o2
    dp4 o2.x, v2, c0
    dp4 o2.y, v2, c1
    mov o0, v0
    mov o1, v1
    mov o2.zw, c2.xyxy

// approximately 5 instruction slots used
#endif

extern const BYTE pBinary_VVertexEAlpha[] =
{
      0,   3, 254, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
      2,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    109, 118, 112,   0,   1,   0, 
      3,   0,   1,   0,   4,   0, 
      2,   0,   0,   0,   0,   0, 
      0,   0, 118, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  81,   0, 
      0,   5,   2,   0,  15, 160, 
      0,   0,   0,   0,   0,   0, 
    128,  63,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,  10,   0,   1, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      2,   0,  15, 144,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,  15, 224,  31,   0, 
      0,   2,  10,   0,   1, 128, 
      1,   0,  15, 224,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      2,   0,  15, 224,   9,   0, 
      0,   3,   2,   0,   1, 224, 
      2,   0, 228, 144,   0,   0, 
    228, 160,   9,   0,   0,   3, 
      2,   0,   2, 224,   2,   0, 
    228, 144,   1,   0, 228, 160, 
      1,   0,   0,   2,   0,   0, 
     15, 224,   0,   0, 228, 144, 
      1,   0,   0,   2,   1,   0, 
     15, 224,   1,   0, 228, 144, 
      1,   0,   0,   2,   2,   0, 
     12, 224,   2,   0,  68, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
/    ps_3_0
    dcl_color v0
    dcl_color1 v1.w
    mov r0.w, v0.w
    mul oC0.w, r0.w, v1.w
    mov oC0.xyz, v0

// approximately 3 instruction slots used
#endif

extern const BYTE pBinary_FVertexEAlpha[] =
{
      0,   3, 255, 255, 254, 255, 
     22,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  35,   0, 
      0,   0,   0,   3, 255, 255, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0, 129,   0,   0, 
     28,   0,   0,   0, 112, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,   8, 144, 
      1,   0,   0,   2,   0,   0, 
      8, 128,   0,   0, 255, 144, 
      5,   0,   0,   3,   0,   8, 
      8, 128,   0,   0, 255, 128, 
      1,   0, 255, 144,   1,   0, 
      0,   2,   0,   8,   7, 128, 
      0,   0, 228, 144, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
/    ps_3_0
    def c0, -1, 1, 0, 0
    dcl_color v0
    dcl_color1 v1.w
    mov r0.xyz, v0
    mov r1.w, v0.w
    mul r0.w, r1.w, v1.w
    add r1, r0, c0.x
    mad oC0, r0.w, r1, c0.y

// approximately 5 instruction slots used
#endif

extern const BYTE pBinary_FVertexEAlphaMul[] =
{
      0,   3, 255, 255, 254, 255, 
     22,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  35,   0, 
      0,   0,   0,   3, 255, 255, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0, 129,   0,   0, 
     28,   0,   0,   0, 112, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5,   0,   0, 
     15, 160,   0,   0, 128, 191, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,   8, 144, 
      1,   0,   0,   2,   0,   0, 
      7, 128,   0,   0, 228, 144, 
      1,   0,   0,   2,   1,   0, 
      8, 128,   0,   0, 255, 144, 
      5,   0,   0,   3,   0,   0, 
      8, 128,   1,   0, 255, 128, 
      1,   0, 255, 144,   2,   0, 
      0,   3,   1,   0,  15, 128, 
      0,   0, 228, 128,   0,   0, 
      0, 160,   4,   0,   0,   4, 
      0,   8,  15, 128,   0,   0, 
    255, 128,   1,   0, 228, 128, 
      0,   0,  85, 160, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   float4 mvp[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   mvp          c2       2
//

    vs_3_0
    def c4, 0, 1, 0, 0
    dcl_color v0
    dcl_position v1
    dcl_color o0
    dcl_texcoord o1
    dcl_texcoord1 o2
    dcl_position o3
    dp4 o3.x, v1, c2
    dp4 o3.y, v1, c3
    mov o0, v0
    mov o1, c0
    mov o2, c1
    mov o3.zw, c4.xyxy

// approximately 6 instruction slots used
#endif

extern const BYTE pBinary_VVertexCxform[] =
{
      0,   3, 254, 255, 254, 255, 
     50,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 147,   0, 
      0,   0,   0,   3, 254, 255, 
      3,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    140,   0,   0,   0,  88,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0,  96,   0, 
      0,   0,   0,   0,   0,   0, 
    112,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 118,   0,   0,   0, 
      2,   0,   2,   0,   2,   0, 
     10,   0, 124,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
     97, 100, 100,   0, 171, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
    109, 117, 108,   0, 109, 118, 
    112,   0, 171, 171,   1,   0, 
      3,   0,   1,   0,   4,   0, 
      2,   0,   0,   0,   0,   0, 
      0,   0, 118, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  81,   0, 
      0,   5,   4,   0,  15, 160, 
      0,   0,   0,   0,   0,   0, 
    128,  63,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,  15, 224,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      1,   0,  15, 224,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      2,   0,  15, 224,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      3,   0,  15, 224,   9,   0, 
      0,   3,   3,   0,   1, 224, 
      1,   0, 228, 144,   2,   0, 
    228, 160,   9,   0,   0,   3, 
      3,   0,   2, 224,   1,   0, 
    228, 144,   3,   0, 228, 160, 
      1,   0,   0,   2,   0,   0, 
     15, 224,   0,   0, 228, 144, 
      1,   0,   0,   2,   1,   0, 
     15, 224,   0,   0, 228, 160, 
      1,   0,   0,   2,   2,   0, 
     15, 224,   1,   0, 228, 160, 
      1,   0,   0,   2,   3,   0, 
     12, 224,   4,   0,  68, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
/    ps_3_0
    dcl_color v0
    dcl_texcoord v1
    dcl_texcoord1 v2
    mov r0, v0
    mov r1, v2
    mad oC0, r0, r1, v1

// approximately 3 instruction slots used
#endif

extern const BYTE pBinary_FVertexCxform[] =
{
      0,   3, 255, 255, 254, 255, 
     22,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  35,   0, 
      0,   0,   0,   3, 255, 255, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0, 129,   0,   0, 
     28,   0,   0,   0, 112, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   2,   0,  15, 144, 
      1,   0,   0,   2,   0,   0, 
     15, 128,   0,   0, 228, 144, 
      1,   0,   0,   2,   1,   0, 
     15, 128,   2,   0, 228, 144, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 228, 128, 
      1,   0, 228, 128,   1,   0, 
    228, 144, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
/    ps_3_0
    def c0, -1, 1, 0, 0
    dcl_color v0
    dcl_texcoord v1
    dcl_texcoord1 v2
    mov r0, v0
    mov r1, v2
    mad r0, r0, r1, v1
    add r1, r0, c0.x
    mad oC0, r0.w, r1, c0.y

// approximately 5 instruction slots used
#endif

extern const BYTE pBinary_FVertexCxformMul[] =
{
      0,   3, 255, 255, 254, 255, 
     22,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  35,   0, 
      0,   0,   0,   3, 255, 255, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0, 129,   0,   0, 
     28,   0,   0,   0, 112, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5,   0,   0, 
     15, 160,   0,   0, 128, 191, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   2,   0,  15, 144, 
      1,   0,   0,   2,   0,   0, 
     15, 128,   0,   0, 228, 144, 
      1,   0,   0,   2,   1,   0, 
     15, 128,   2,   0, 228, 144, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   0,   0, 228, 128, 
      1,   0, 228, 128,   1,   0, 
    228, 144,   2,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    228, 128,   0,   0,   0, 160, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 255, 128, 
      1,   0, 228, 128,   0,   0, 
     85, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   float4 mvp[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   mvp          c2       2
//

    vs_3_0
    def c4, 0, 1, 0, 0
    dcl_color v0
    dcl_color1 v1
    dcl_position v2
    dcl_color o0
    dcl_color1 o1
    dcl_texcoord o2
    dcl_texcoord1 o3
    dcl_position o4
    dp4 o4.x, v2, c2
    dp4 o4.y, v2, c3
    mov o0, v0
    mov o1, v1
    mov o2, c0
    mov o3, c1
    mov o4.zw, c4.xyxy

// approximately 7 instruction slots used
#endif

extern const BYTE pBinary_VVertexCxformEAlpha[] =
{
      0,   3, 254, 255, 254, 255, 
     50,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 147,   0, 
      0,   0,   0,   3, 254, 255, 
      3,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    140,   0,   0,   0,  88,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0,  96,   0, 
      0,   0,   0,   0,   0,   0, 
    112,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 118,   0,   0,   0, 
      2,   0,   2,   0,   2,   0, 
     10,   0, 124,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
     97, 100, 100,   0, 171, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
    109, 117, 108,   0, 109, 118, 
    112,   0, 171, 171,   1,   0, 
      3,   0,   1,   0,   4,   0, 
      2,   0,   0,   0,   0,   0, 
      0,   0, 118, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  81,   0, 
      0,   5,   4,   0,  15, 160, 
      0,   0,   0,   0,   0,   0, 
    128,  63,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,  10,   0,   1, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      2,   0,  15, 144,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,  15, 224,  31,   0, 
      0,   2,  10,   0,   1, 128, 
      1,   0,  15, 224,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      2,   0,  15, 224,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      3,   0,  15, 224,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      4,   0,  15, 224,   9,   0, 
      0,   3,   4,   0,   1, 224, 
      2,   0, 228, 144,   2,   0, 
    228, 160,   9,   0,   0,   3, 
      4,   0,   2, 224,   2,   0, 
    228, 144,   3,   0, 228, 160, 
      1,   0,   0,   2,   0,   0, 
     15, 224,   0,   0, 228, 144, 
      1,   0,   0,   2,   1,   0, 
     15, 224,   1,   0, 228, 144, 
      1,   0,   0,   2,   2,   0, 
     15, 224,   0,   0, 228, 160, 
      1,   0,   0,   2,   3,   0, 
     15, 224,   1,   0, 228, 160, 
      1,   0,   0,   2,   4,   0, 
     12, 224,   4,   0,  68, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
/    ps_3_0
    dcl_color v0
    dcl_color1 v1.w
    dcl_texcoord v2
    dcl_texcoord1 v3
    mov r0, v0
    mov r1, v3
    mad r0, r0, r1, v2
    mul oC0.w, r0.w, v1.w
    mov oC0.xyz, r0

// approximately 5 instruction slots used
#endif

extern const BYTE pBinary_FVertexCxformEAlpha[] =
{
      0,   3, 255, 255, 254, 255, 
     22,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  35,   0, 
      0,   0,   0,   3, 255, 255, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0, 129,   0,   0, 
     28,   0,   0,   0, 112, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,   8, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   3,   0,  15, 144, 
      1,   0,   0,   2,   0,   0, 
     15, 128,   0,   0, 228, 144, 
      1,   0,   0,   2,   1,   0, 
     15, 128,   3,   0, 228, 144, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   0,   0, 228, 128, 
      1,   0, 228, 128,   2,   0, 
    228, 144,   5,   0,   0,   3, 
      0,   8,   8, 128,   0,   0, 
    255, 128,   1,   0, 255, 144, 
      1,   0,   0,   2,   0,   8, 
      7, 128,   0,   0, 228, 128, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
/    ps_3_0
    def c0, -1, 1, 0, 0
    dcl_color v0
    dcl_color1 v1.w
    dcl_texcoord v2
    dcl_texcoord1 v3
    mov r0, v0
    mov r1, v3
    mad r0, r0, r1, v2
    mul r0.w, r0.w, v1.w
    add r1, r0, c0.x
    mad oC0, r0.w, r1, c0.y

// approximately 6 instruction slots used
#endif

extern const BYTE pBinary_FVertexCxformEAlphaMul[] =
{
      0,   3, 255, 255, 254, 255, 
     22,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  35,   0, 
      0,   0,   0,   3, 255, 255, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0, 129,   0,   0, 
     28,   0,   0,   0, 112, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5,   0,   0, 
     15, 160,   0,   0, 128, 191, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,   8, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   3,   0,  15, 144, 
      1,   0,   0,   2,   0,   0, 
     15, 128,   0,   0, 228, 144, 
      1,   0,   0,   2,   1,   0, 
     15, 128,   3,   0, 228, 144, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   0,   0, 228, 128, 
      1,   0, 228, 128,   2,   0, 
    228, 144,   5,   0,   0,   3, 
      0,   0,   8, 128,   0,   0, 
    255, 128,   1,   0, 255, 144, 
      2,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 228, 128, 
      0,   0,   0, 160,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      0,   0, 255, 128,   1,   0, 
    228, 128,   0,   0,  85, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 mvp[2];
//   float4 texgen[4];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       2
//   texgen       c2       4
//

    vs_3_0
    def c6, 0, 1, 0, 0
    dcl_color v0
    dcl_position v1
    dcl_color o0
    dcl_texcoord o1.xy
    dcl_texcoord1 o2.xy
    dcl_position o3
    dp4 o3.x, v1, c0
    dp4 o3.y, v1, c1
    dp4 o1.x, v1, c2
    dp4 o1.y, v1, c3
    dp4 o2.x, v1, c4
    dp4 o2.y, v1, c5
    mov o0, v0
    mov o3.zw, c6.xyxy

// approximately 8 instruction slots used
#endif

extern const BYTE pBinary_VTexTGTexTG[] =
{
      0,   3, 254, 255, 254, 255, 
     43,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 119,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    112,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
      2,   0,   2,   0,  72,   0, 
      0,   0,   0,   0,   0,   0, 
     88,   0,   0,   0,   2,   0, 
      2,   0,   4,   0,  10,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 109, 118, 112,   0, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 103, 101, 110,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   4,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5,   6,   0, 
     15, 160,   0,   0,   0,   0, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,   3, 224, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   2,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   3,   0,  15, 224, 
      9,   0,   0,   3,   3,   0, 
      1, 224,   1,   0, 228, 144, 
      0,   0, 228, 160,   9,   0, 
      0,   3,   3,   0,   2, 224, 
      1,   0, 228, 144,   1,   0, 
    228, 160,   9,   0,   0,   3, 
      1,   0,   1, 224,   1,   0, 
    228, 144,   2,   0, 228, 160, 
      9,   0,   0,   3,   1,   0, 
      2, 224,   1,   0, 228, 144, 
      3,   0, 228, 160,   9,   0, 
      0,   3,   2,   0,   1, 224, 
      1,   0, 228, 144,   4,   0, 
    228, 160,   9,   0,   0,   3, 
      2,   0,   2, 224,   1,   0, 
    228, 144,   5,   0, 228, 160, 
      1,   0,   0,   2,   0,   0, 
     15, 224,   0,   0, 228, 144, 
      1,   0,   0,   2,   3,   0, 
     12, 224,   6,   0,  68, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       2
//

    ps_3_0
    dcl_color v0.x
    dcl_texcoord v1.xy
    dcl_texcoord1 v2.xy
    dcl_2d s0
    dcl_2d s1
    texld r0, v1, s0
    texld r1, v2, s1
    add r0, r0, -r1
    mad oC0, v0.x, r0, r1

// approximately 4 instruction slots used (2 texture, 2 arithmetic)
#endif

extern const BYTE pBinary_FTexTGTexTG[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      2,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      2,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,   1, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      1,   0,   3, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      2,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      1,   0, 228, 144,   0,   8, 
    228, 160,  66,   0,   0,   3, 
      1,   0,  15, 128,   2,   0, 
    228, 144,   1,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
     15, 128,   0,   0, 228, 128, 
      1,   0, 228, 129,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      0,   0,   0, 144,   0,   0, 
    228, 128,   1,   0, 228, 128, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       2
//

    ps_3_0
    def c0, -1, 1, 0, 0
    dcl_color v0.x
    dcl_texcoord v1.xy
    dcl_texcoord1 v2.xy
    dcl_2d s0
    dcl_2d s1
    texld r0, v1, s0
    texld r1, v2, s1
    lrp r2, v0.x, r0, r1
    add r0, r2, c0.x
    mad oC0, r2.w, r0, c0.y

// approximately 5 instruction slots used (2 texture, 3 arithmetic)
#endif

extern const BYTE pBinary_FTexTGTexTGMul[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      2,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      2,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  81,   0, 
      0,   5,   0,   0,  15, 160, 
      0,   0, 128, 191,   0,   0, 
    128,  63,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,   1, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      1,   0,   3, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      2,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      1,   0, 228, 144,   0,   8, 
    228, 160,  66,   0,   0,   3, 
      1,   0,  15, 128,   2,   0, 
    228, 144,   1,   8, 228, 160, 
     18,   0,   0,   4,   2,   0, 
     15, 128,   0,   0,   0, 144, 
      0,   0, 228, 128,   1,   0, 
    228, 128,   2,   0,   0,   3, 
      0,   0,  15, 128,   2,   0, 
    228, 128,   0,   0,   0, 160, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   2,   0, 255, 128, 
      0,   0, 228, 128,   0,   0, 
     85, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       2
//

    ps_3_0
    dcl_color v0.xw
    dcl_texcoord v1.xy
    dcl_texcoord1 v2.xy
    dcl_2d s0
    dcl_2d s1
    texld r0, v1, s0
    texld r1, v2, s1
    lrp r2, v0.x, r0, r1
    mul oC0.w, r2.w, v0.w
    mov oC0.xyz, r2

// approximately 5 instruction slots used (2 texture, 3 arithmetic)
#endif

extern const BYTE pBinary_FTexTGTexTGEAlpha[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      2,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      2,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,   9, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      1,   0,   3, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      2,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      1,   0, 228, 144,   0,   8, 
    228, 160,  66,   0,   0,   3, 
      1,   0,  15, 128,   2,   0, 
    228, 144,   1,   8, 228, 160, 
     18,   0,   0,   4,   2,   0, 
     15, 128,   0,   0,   0, 144, 
      0,   0, 228, 128,   1,   0, 
    228, 128,   5,   0,   0,   3, 
      0,   8,   8, 128,   2,   0, 
    255, 128,   0,   0, 255, 144, 
      1,   0,   0,   2,   0,   8, 
      7, 128,   2,   0, 228, 128, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       2
//

    ps_3_0
    def c0, -1, 1, 0, 0
    dcl_color v0.xw
    dcl_texcoord v1.xy
    dcl_texcoord1 v2.xy
    dcl_2d s0
    dcl_2d s1
    texld r0, v1, s0
    texld r1, v2, s1
    lrp r2, v0.x, r0, r1
    mul r2.w, r2.w, v0.w
    add r0, r2, c0.x
    mad oC0, r2.w, r0, c0.y

// approximately 6 instruction slots used (2 texture, 4 arithmetic)
#endif

extern const BYTE pBinary_FTexTGTexTGEAlphaMul[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      2,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      2,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  81,   0, 
      0,   5,   0,   0,  15, 160, 
      0,   0, 128, 191,   0,   0, 
    128,  63,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,   9, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      1,   0,   3, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      2,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      1,   0, 228, 144,   0,   8, 
    228, 160,  66,   0,   0,   3, 
      1,   0,  15, 128,   2,   0, 
    228, 144,   1,   8, 228, 160, 
     18,   0,   0,   4,   2,   0, 
     15, 128,   0,   0,   0, 144, 
      0,   0, 228, 128,   1,   0, 
    228, 128,   5,   0,   0,   3, 
      2,   0,   8, 128,   2,   0, 
    255, 128,   0,   0, 255, 144, 
      2,   0,   0,   3,   0,   0, 
     15, 128,   2,   0, 228, 128, 
      0,   0,   0, 160,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      2,   0, 255, 128,   0,   0, 
    228, 128,   0,   0,  85, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   float4 mvp[2];
//   float4 texgen[4];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   mvp          c2       2
//   texgen       c4       4
//

    vs_3_0
    def c8, 0, 1, 0, 0
    dcl_color v0
    dcl_position v1
    dcl_color o0
    dcl_texcoord o1
    dcl_texcoord1 o2
    dcl_texcoord2 o3.xy
    dcl_texcoord3 o4.xy
    dcl_position o5
    dp4 o5.x, v1, c2
    dp4 o5.y, v1, c3
    dp4 o3.x, v1, c4
    dp4 o3.y, v1, c5
    dp4 o4.x, v1, c6
    dp4 o4.y, v1, c7
    mov o0, v0
    mov o1, c0
    mov o2, c1
    mov o5.zw, c8.xyxy

// approximately 10 instruction slots used
#endif

extern const BYTE pBinary_VTexTGTexTGCxform[] =
{
      0,   3, 254, 255, 254, 255, 
     61,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 191,   0, 
      0,   0,   0,   3, 254, 255, 
      4,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    184,   0,   0,   0, 108,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 116,   0, 
      0,   0,   0,   0,   0,   0, 
    132,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    116,   0,   0,   0,   0,   0, 
      0,   0, 138,   0,   0,   0, 
      2,   0,   2,   0,   2,   0, 
     10,   0, 144,   0,   0,   0, 
      0,   0,   0,   0, 160,   0, 
      0,   0,   2,   0,   4,   0, 
      4,   0,  18,   0, 168,   0, 
      0,   0,   0,   0,   0,   0, 
     99, 120,  97, 100, 100,   0, 
    171, 171,   1,   0,   3,   0, 
      1,   0,   4,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
     99, 120, 109, 117, 108,   0, 
    109, 118, 112,   0, 171, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 103, 101, 110,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   4,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5,   8,   0, 
     15, 160,   0,   0,   0,   0, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   2,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      2, 128,   3,   0,   3, 224, 
     31,   0,   0,   2,   5,   0, 
      3, 128,   4,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   5,   0,  15, 224, 
      9,   0,   0,   3,   5,   0, 
      1, 224,   1,   0, 228, 144, 
      2,   0, 228, 160,   9,   0, 
      0,   3,   5,   0,   2, 224, 
      1,   0, 228, 144,   3,   0, 
    228, 160,   9,   0,   0,   3, 
      3,   0,   1, 224,   1,   0, 
    228, 144,   4,   0, 228, 160, 
      9,   0,   0,   3,   3,   0, 
      2, 224,   1,   0, 228, 144, 
      5,   0, 228, 160,   9,   0, 
      0,   3,   4,   0,   1, 224, 
      1,   0, 228, 144,   6,   0, 
    228, 160,   9,   0,   0,   3, 
      4,   0,   2, 224,   1,   0, 
    228, 144,   7,   0, 228, 160, 
      1,   0,   0,   2,   0,   0, 
     15, 224,   0,   0, 228, 144, 
      1,   0,   0,   2,   1,   0, 
     15, 224,   0,   0, 228, 160, 
      1,   0,   0,   2,   2,   0, 
     15, 224,   1,   0, 228, 160, 
      1,   0,   0,   2,   5,   0, 
     12, 224,   8,   0,  68, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       2
//

    ps_3_0
    dcl_color v0.x
    dcl_texcoord v1
    dcl_texcoord1 v2
    dcl_texcoord2 v3.xy
    dcl_texcoord3 v4.xy
    dcl_2d s0
    dcl_2d s1
    texld r0, v3, s0
    texld r1, v4, s1
    lrp r2, v0.x, r0, r1
    mov r0, v2
    mad oC0, r2, r0, v1

// approximately 5 instruction slots used (2 texture, 3 arithmetic)
#endif

extern const BYTE pBinary_FTexTGTexTGCxform[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      2,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      2,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,   1, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      2,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   2, 128, 
      3,   0,   3, 144,  31,   0, 
      0,   2,   5,   0,   3, 128, 
      4,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      3,   0, 228, 144,   0,   8, 
    228, 160,  66,   0,   0,   3, 
      1,   0,  15, 128,   4,   0, 
    228, 144,   1,   8, 228, 160, 
     18,   0,   0,   4,   2,   0, 
     15, 128,   0,   0,   0, 144, 
      0,   0, 228, 128,   1,   0, 
    228, 128,   1,   0,   0,   2, 
      0,   0,  15, 128,   2,   0, 
    228, 144,   4,   0,   0,   4, 
      0,   8,  15, 128,   2,   0, 
    228, 128,   0,   0, 228, 128, 
      1,   0, 228, 144, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       2
//

    ps_3_0
    def c0, -1, 1, 0, 0
    dcl_color v0.x
    dcl_texcoord v1
    dcl_texcoord1 v2
    dcl_texcoord2 v3.xy
    dcl_texcoord3 v4.xy
    dcl_2d s0
    dcl_2d s1
    texld r0, v3, s0
    texld r1, v4, s1
    lrp r2, v0.x, r0, r1
    mov r0, v2
    mad r0, r2, r0, v1
    add r1, r0, c0.x
    mad oC0, r0.w, r1, c0.y

// approximately 7 instruction slots used (2 texture, 5 arithmetic)
#endif

extern const BYTE pBinary_FTexTGTexTGCxformMul[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      2,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      2,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  81,   0, 
      0,   5,   0,   0,  15, 160, 
      0,   0, 128, 191,   0,   0, 
    128,  63,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,   1, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      2,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   2, 128, 
      3,   0,   3, 144,  31,   0, 
      0,   2,   5,   0,   3, 128, 
      4,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      3,   0, 228, 144,   0,   8, 
    228, 160,  66,   0,   0,   3, 
      1,   0,  15, 128,   4,   0, 
    228, 144,   1,   8, 228, 160, 
     18,   0,   0,   4,   2,   0, 
     15, 128,   0,   0,   0, 144, 
      0,   0, 228, 128,   1,   0, 
    228, 128,   1,   0,   0,   2, 
      0,   0,  15, 128,   2,   0, 
    228, 144,   4,   0,   0,   4, 
      0,   0,  15, 128,   2,   0, 
    228, 128,   0,   0, 228, 128, 
      1,   0, 228, 144,   2,   0, 
      0,   3,   1,   0,  15, 128, 
      0,   0, 228, 128,   0,   0, 
      0, 160,   4,   0,   0,   4, 
      0,   8,  15, 128,   0,   0, 
    255, 128,   1,   0, 228, 128, 
      0,   0,  85, 160, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       2
//

    ps_3_0
    dcl_color v0.xw
    dcl_texcoord v1
    dcl_texcoord1 v2
    dcl_texcoord2 v3.xy
    dcl_texcoord3 v4.xy
    dcl_2d s0
    dcl_2d s1
    texld r0, v3, s0
    texld r1, v4, s1
    lrp r2, v0.x, r0, r1
    mov r0, v2
    mad r0, r2, r0, v1
    mul oC0.w, r0.w, v0.w
    mov oC0.xyz, r0

// approximately 7 instruction slots used (2 texture, 5 arithmetic)
#endif

extern const BYTE pBinary_FTexTGTexTGCxformEAlpha[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      2,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      2,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,   9, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      2,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   2, 128, 
      3,   0,   3, 144,  31,   0, 
      0,   2,   5,   0,   3, 128, 
      4,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      3,   0, 228, 144,   0,   8, 
    228, 160,  66,   0,   0,   3, 
      1,   0,  15, 128,   4,   0, 
    228, 144,   1,   8, 228, 160, 
     18,   0,   0,   4,   2,   0, 
     15, 128,   0,   0,   0, 144, 
      0,   0, 228, 128,   1,   0, 
    228, 128,   1,   0,   0,   2, 
      0,   0,  15, 128,   2,   0, 
    228, 144,   4,   0,   0,   4, 
      0,   0,  15, 128,   2,   0, 
    228, 128,   0,   0, 228, 128, 
      1,   0, 228, 144,   5,   0, 
      0,   3,   0,   8,   8, 128, 
      0,   0, 255, 128,   0,   0, 
    255, 144,   1,   0,   0,   2, 
      0,   8,   7, 128,   0,   0, 
    228, 128, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       2
//

    ps_3_0
    def c0, -1, 1, 0, 0
    dcl_color v0.xw
    dcl_texcoord v1
    dcl_texcoord1 v2
    dcl_texcoord2 v3.xy
    dcl_texcoord3 v4.xy
    dcl_2d s0
    dcl_2d s1
    texld r0, v3, s0
    texld r1, v4, s1
    lrp r2, v0.x, r0, r1
    mov r0, v2
    mad r0, r2, r0, v1
    mul r0.w, r0.w, v0.w
    add r1, r0, c0.x
    mad oC0, r0.w, r1, c0.y

// approximately 8 instruction slots used (2 texture, 6 arithmetic)
#endif

extern const BYTE pBinary_FTexTGTexTGCxformEAlphaMul[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      2,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      2,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  81,   0, 
      0,   5,   0,   0,  15, 160, 
      0,   0, 128, 191,   0,   0, 
    128,  63,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,   9, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      2,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   2, 128, 
      3,   0,   3, 144,  31,   0, 
      0,   2,   5,   0,   3, 128, 
      4,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      3,   0, 228, 144,   0,   8, 
    228, 160,  66,   0,   0,   3, 
      1,   0,  15, 128,   4,   0, 
    228, 144,   1,   8, 228, 160, 
     18,   0,   0,   4,   2,   0, 
     15, 128,   0,   0,   0, 144, 
      0,   0, 228, 128,   1,   0, 
    228, 128,   1,   0,   0,   2, 
      0,   0,  15, 128,   2,   0, 
    228, 144,   4,   0,   0,   4, 
      0,   0,  15, 128,   2,   0, 
    228, 128,   0,   0, 228, 128, 
      1,   0, 228, 144,   5,   0, 
      0,   3,   0,   0,   8, 128, 
      0,   0, 255, 128,   0,   0, 
    255, 144,   2,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    228, 128,   0,   0,   0, 160, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 255, 128, 
      1,   0, 228, 128,   0,   0, 
     85, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 mvp[2];
//   float4 texgen[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       2
//   texgen       c2       2
//

    vs_3_0
    def c4, 0, 1, 0, 0
    dcl_color v0
    dcl_color1 v1
    dcl_position v2
    dcl_color o0
    dcl_color1 o1
    dcl_texcoord o2.xy
    dcl_position o3
    dp4 o3.x, v2, c0
    dp4 o3.y, v2, c1
    dp4 o2.x, v2, c2
    dp4 o2.y, v2, c3
    mov o0, v0
    mov o1, v1
    mov o3.zw, c4.xyxy

// approximately 7 instruction slots used
#endif

extern const BYTE pBinary_VTexTGVertex[] =
{
      0,   3, 254, 255, 254, 255, 
     43,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 119,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    112,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
      2,   0,   2,   0,  72,   0, 
      0,   0,   0,   0,   0,   0, 
     88,   0,   0,   0,   2,   0, 
      2,   0,   2,   0,  10,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 109, 118, 112,   0, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 103, 101, 110,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5,   4,   0, 
     15, 160,   0,   0,   0,   0, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   2,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   3,   0,  15, 224, 
      9,   0,   0,   3,   3,   0, 
      1, 224,   2,   0, 228, 144, 
      0,   0, 228, 160,   9,   0, 
      0,   3,   3,   0,   2, 224, 
      2,   0, 228, 144,   1,   0, 
    228, 160,   9,   0,   0,   3, 
      2,   0,   1, 224,   2,   0, 
    228, 144,   2,   0, 228, 160, 
      9,   0,   0,   3,   2,   0, 
      2, 224,   2,   0, 228, 144, 
      3,   0, 228, 160,   1,   0, 
      0,   2,   0,   0,  15, 224, 
      0,   0, 228, 144,   1,   0, 
      0,   2,   1,   0,  15, 224, 
      1,   0, 228, 144,   1,   0, 
      0,   2,   3,   0,  12, 224, 
      4,   0,  68, 160, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       1
//

    ps_3_0
    dcl_color v0
    dcl_color1 v1.x
    dcl_texcoord v2.xy
    dcl_2d s0
    texld r0, v2, s0
    add r0, r0, -v0
    mov r1, v0
    mad oC0, v1.x, r0, r1

// approximately 4 instruction slots used (1 texture, 3 arithmetic)
#endif

extern const BYTE pBinary_FTexTGVertex[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,  10,   0,   1, 128, 
      1,   0,   1, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      2,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      2,   0, 228, 144,   0,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   0,   0, 228, 145, 
      1,   0,   0,   2,   1,   0, 
     15, 128,   0,   0, 228, 144, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   1,   0,   0, 144, 
      0,   0, 228, 128,   1,   0, 
    228, 128, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       1
//

    ps_3_0
    def c0, -1, 1, 0, 0
    dcl_color v0
    dcl_color1 v1.x
    dcl_texcoord v2.xy
    dcl_2d s0
    texld r0, v2, s0
    add r0, r0, -v0
    mov r1, v0
    mad r0, v1.x, r0, r1
    add r1, r0, c0.x
    mad oC0, r0.w, r1, c0.y

// approximately 6 instruction slots used (1 texture, 5 arithmetic)
#endif

extern const BYTE pBinary_FTexTGVertexMul[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  81,   0, 
      0,   5,   0,   0,  15, 160, 
      0,   0, 128, 191,   0,   0, 
    128,  63,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,  10,   0,   1, 128, 
      1,   0,   1, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      2,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      2,   0, 228, 144,   0,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   0,   0, 228, 145, 
      1,   0,   0,   2,   1,   0, 
     15, 128,   0,   0, 228, 144, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   1,   0,   0, 144, 
      0,   0, 228, 128,   1,   0, 
    228, 128,   2,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    228, 128,   0,   0,   0, 160, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 255, 128, 
      1,   0, 228, 128,   0,   0, 
     85, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       1
//

    ps_3_0
    dcl_color v0
    dcl_color1 v1.xw
    dcl_texcoord v2.xy
    dcl_2d s0
    texld r0, v2, s0
    add r0, r0, -v0
    mov r1, v0
    mad r0, v1.x, r0, r1
    mul oC0.w, r0.w, v1.w
    mov oC0.xyz, r0

// approximately 6 instruction slots used (1 texture, 5 arithmetic)
#endif

extern const BYTE pBinary_FTexTGVertexEAlpha[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,  10,   0,   1, 128, 
      1,   0,   9, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      2,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      2,   0, 228, 144,   0,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   0,   0, 228, 145, 
      1,   0,   0,   2,   1,   0, 
     15, 128,   0,   0, 228, 144, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   1,   0,   0, 144, 
      0,   0, 228, 128,   1,   0, 
    228, 128,   5,   0,   0,   3, 
      0,   8,   8, 128,   0,   0, 
    255, 128,   1,   0, 255, 144, 
      1,   0,   0,   2,   0,   8, 
      7, 128,   0,   0, 228, 128, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       1
//

    ps_3_0
    def c0, -1, 1, 0, 0
    dcl_color v0
    dcl_color1 v1.xw
    dcl_texcoord v2.xy
    dcl_2d s0
    texld r0, v2, s0
    add r0, r0, -v0
    mov r1, v0
    mad r0, v1.x, r0, r1
    mul r0.w, r0.w, v1.w
    add r1, r0, c0.x
    mad oC0, r0.w, r1, c0.y

// approximately 7 instruction slots used (1 texture, 6 arithmetic)
#endif

extern const BYTE pBinary_FTexTGVertexEAlphaMul[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  81,   0, 
      0,   5,   0,   0,  15, 160, 
      0,   0, 128, 191,   0,   0, 
    128,  63,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,  10,   0,   1, 128, 
      1,   0,   9, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      2,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      2,   0, 228, 144,   0,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   0,   0, 228, 145, 
      1,   0,   0,   2,   1,   0, 
     15, 128,   0,   0, 228, 144, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   1,   0,   0, 144, 
      0,   0, 228, 128,   1,   0, 
    228, 128,   5,   0,   0,   3, 
      0,   0,   8, 128,   0,   0, 
    255, 128,   1,   0, 255, 144, 
      2,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 228, 128, 
      0,   0,   0, 160,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      0,   0, 255, 128,   1,   0, 
    228, 128,   0,   0,  85, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   float4 mvp[2];
//   float4 texgen[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   mvp          c2       2
//   texgen       c4       2
//

    vs_3_0
    def c6, 0, 1, 0, 0
    dcl_color v0
    dcl_color1 v1
    dcl_position v2
    dcl_color o0
    dcl_color1 o1
    dcl_texcoord o2
    dcl_texcoord1 o3
    dcl_texcoord2 o4.xy
    dcl_position o5
    dp4 o5.x, v2, c2
    dp4 o5.y, v2, c3
    dp4 o4.x, v2, c4
    dp4 o4.y, v2, c5
    mov o0, v0
    mov o1, v1
    mov o2, c0
    mov o3, c1
    mov o5.zw, c6.xyxy

// approximately 9 instruction slots used
#endif

extern const BYTE pBinary_VTexTGVertexCxform[] =
{
      0,   3, 254, 255, 254, 255, 
     61,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 191,   0, 
      0,   0,   0,   3, 254, 255, 
      4,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    184,   0,   0,   0, 108,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 116,   0, 
      0,   0,   0,   0,   0,   0, 
    132,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    116,   0,   0,   0,   0,   0, 
      0,   0, 138,   0,   0,   0, 
      2,   0,   2,   0,   2,   0, 
     10,   0, 144,   0,   0,   0, 
      0,   0,   0,   0, 160,   0, 
      0,   0,   2,   0,   4,   0, 
      2,   0,  18,   0, 168,   0, 
      0,   0,   0,   0,   0,   0, 
     99, 120,  97, 100, 100,   0, 
    171, 171,   1,   0,   3,   0, 
      1,   0,   4,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
     99, 120, 109, 117, 108,   0, 
    109, 118, 112,   0, 171, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 103, 101, 110,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5,   6,   0, 
     15, 160,   0,   0,   0,   0, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   2,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   3,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      2, 128,   4,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   5,   0,  15, 224, 
      9,   0,   0,   3,   5,   0, 
      1, 224,   2,   0, 228, 144, 
      2,   0, 228, 160,   9,   0, 
      0,   3,   5,   0,   2, 224, 
      2,   0, 228, 144,   3,   0, 
    228, 160,   9,   0,   0,   3, 
      4,   0,   1, 224,   2,   0, 
    228, 144,   4,   0, 228, 160, 
      9,   0,   0,   3,   4,   0, 
      2, 224,   2,   0, 228, 144, 
      5,   0, 228, 160,   1,   0, 
      0,   2,   0,   0,  15, 224, 
      0,   0, 228, 144,   1,   0, 
      0,   2,   1,   0,  15, 224, 
      1,   0, 228, 144,   1,   0, 
      0,   2,   2,   0,  15, 224, 
      0,   0, 228, 160,   1,   0, 
      0,   2,   3,   0,  15, 224, 
      1,   0, 228, 160,   1,   0, 
      0,   2,   5,   0,  12, 224, 
      6,   0,  68, 160, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       1
//

    ps_3_0
    dcl_color v0
    dcl_color1 v1.x
    dcl_texcoord v2
    dcl_texcoord1 v3
    dcl_texcoord2 v4.xy
    dcl_2d s0
    texld r0, v4, s0
    add r0, r0, -v0
    mov r1, v0
    mad r0, v1.x, r0, r1
    mov r1, v3
    mad oC0, r0, r1, v2

// approximately 6 instruction slots used (1 texture, 5 arithmetic)
#endif

extern const BYTE pBinary_FTexTGVertexCxform[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,  10,   0,   1, 128, 
      1,   0,   1, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      2,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      3,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   2, 128, 
      4,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      4,   0, 228, 144,   0,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   0,   0, 228, 145, 
      1,   0,   0,   2,   1,   0, 
     15, 128,   0,   0, 228, 144, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   1,   0,   0, 144, 
      0,   0, 228, 128,   1,   0, 
    228, 128,   1,   0,   0,   2, 
      1,   0,  15, 128,   3,   0, 
    228, 144,   4,   0,   0,   4, 
      0,   8,  15, 128,   0,   0, 
    228, 128,   1,   0, 228, 128, 
      2,   0, 228, 144, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       1
//

    ps_3_0
    def c0, -1, 1, 0, 0
    dcl_color v0
    dcl_color1 v1.x
    dcl_texcoord v2
    dcl_texcoord1 v3
    dcl_texcoord2 v4.xy
    dcl_2d s0
    texld r0, v4, s0
    add r0, r0, -v0
    mov r1, v0
    mad r0, v1.x, r0, r1
    mov r1, v3
    mad r0, r0, r1, v2
    add r1, r0, c0.x
    mad oC0, r0.w, r1, c0.y

// approximately 8 instruction slots used (1 texture, 7 arithmetic)
#endif

extern const BYTE pBinary_FTexTGVertexCxformMul[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  81,   0, 
      0,   5,   0,   0,  15, 160, 
      0,   0, 128, 191,   0,   0, 
    128,  63,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,  10,   0,   1, 128, 
      1,   0,   1, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      2,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      3,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   2, 128, 
      4,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      4,   0, 228, 144,   0,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   0,   0, 228, 145, 
      1,   0,   0,   2,   1,   0, 
     15, 128,   0,   0, 228, 144, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   1,   0,   0, 144, 
      0,   0, 228, 128,   1,   0, 
    228, 128,   1,   0,   0,   2, 
      1,   0,  15, 128,   3,   0, 
    228, 144,   4,   0,   0,   4, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   1,   0, 228, 128, 
      2,   0, 228, 144,   2,   0, 
      0,   3,   1,   0,  15, 128, 
      0,   0, 228, 128,   0,   0, 
      0, 160,   4,   0,   0,   4, 
      0,   8,  15, 128,   0,   0, 
    255, 128,   1,   0, 228, 128, 
      0,   0,  85, 160, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       1
//

    ps_3_0
    dcl_color v0
    dcl_color1 v1.xw
    dcl_texcoord v2
    dcl_texcoord1 v3
    dcl_texcoord2 v4.xy
    dcl_2d s0
    texld r0, v4, s0
    add r0, r0, -v0
    mov r1, v0
    mad r0, v1.x, r0, r1
    mov r1, v3
    mad r0, r0, r1, v2
    mul oC0.w, r0.w, v1.w
    mov oC0.xyz, r0

// approximately 8 instruction slots used (1 texture, 7 arithmetic)
#endif

extern const BYTE pBinary_FTexTGVertexCxformEAlpha[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,  10,   0,   1, 128, 
      1,   0,   9, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      2,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      3,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   2, 128, 
      4,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      4,   0, 228, 144,   0,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   0,   0, 228, 145, 
      1,   0,   0,   2,   1,   0, 
     15, 128,   0,   0, 228, 144, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   1,   0,   0, 144, 
      0,   0, 228, 128,   1,   0, 
    228, 128,   1,   0,   0,   2, 
      1,   0,  15, 128,   3,   0, 
    228, 144,   4,   0,   0,   4, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   1,   0, 228, 128, 
      2,   0, 228, 144,   5,   0, 
      0,   3,   0,   8,   8, 128, 
      0,   0, 255, 128,   1,   0, 
    255, 144,   1,   0,   0,   2, 
      0,   8,   7, 128,   0,   0, 
    228, 128, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       1
//

    ps_3_0
    def c0, -1, 1, 0, 0
    dcl_color v0
    dcl_color1 v1.xw
    dcl_texcoord v2
    dcl_texcoord1 v3
    dcl_texcoord2 v4.xy
    dcl_2d s0
    texld r0, v4, s0
    add r0, r0, -v0
    mov r1, v0
    mad r0, v1.x, r0, r1
    mov r1, v3
    mad r0, r0, r1, v2
    mul r0.w, r0.w, v1.w
    add r1, r0, c0.x
    mad oC0, r0.w, r1, c0.y

// approximately 9 instruction slots used (1 texture, 8 arithmetic)
#endif

extern const BYTE pBinary_FTexTGVertexCxformEAlphaMul[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  81,   0, 
      0,   5,   0,   0,  15, 160, 
      0,   0, 128, 191,   0,   0, 
    128,  63,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,  10,   0,   1, 128, 
      1,   0,   9, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      2,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      3,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   2, 128, 
      4,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      4,   0, 228, 144,   0,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   0,   0, 228, 145, 
      1,   0,   0,   2,   1,   0, 
     15, 128,   0,   0, 228, 144, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   1,   0,   0, 144, 
      0,   0, 228, 128,   1,   0, 
    228, 128,   1,   0,   0,   2, 
      1,   0,  15, 128,   3,   0, 
    228, 144,   4,   0,   0,   4, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   1,   0, 228, 128, 
      2,   0, 228, 144,   5,   0, 
      0,   3,   0,   0,   8, 128, 
      0,   0, 255, 128,   1,   0, 
    255, 144,   2,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    228, 128,   0,   0,   0, 160, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 255, 128, 
      1,   0, 228, 128,   0,   0, 
     85, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4x4 mvp;
//   float4 texgen[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       4
//   texgen       c4       2
//

    vs_3_0
    dcl_position v0
    dcl_texcoord o0.xy
    dcl_position o1
    dp4 o1.x, v0, c0
    dp4 o1.y, v0, c1
    dp4 o1.z, v0, c2
    dp4 o1.w, v0, c3
    dp4 o0.x, v0, c4
    dp4 o0.y, v0, c5

// approximately 6 instruction slots used
#endif

extern const BYTE pBinary_VPosition3dTexTG[] =
{
      0,   3, 254, 255, 254, 255, 
     43,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 119,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    112,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
      4,   0,   2,   0,  72,   0, 
      0,   0,   0,   0,   0,   0, 
     88,   0,   0,   0,   2,   0, 
      4,   0,   2,   0,  18,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 109, 118, 112,   0, 
      3,   0,   3,   0,   4,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 103, 101, 110,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 224, 
      9,   0,   0,   3,   1,   0, 
      1, 224,   0,   0, 228, 144, 
      0,   0, 228, 160,   9,   0, 
      0,   3,   1,   0,   2, 224, 
      0,   0, 228, 144,   1,   0, 
    228, 160,   9,   0,   0,   3, 
      1,   0,   4, 224,   0,   0, 
    228, 144,   2,   0, 228, 160, 
      9,   0,   0,   3,   1,   0, 
      8, 224,   0,   0, 228, 144, 
      3,   0, 228, 160,   9,   0, 
      0,   3,   0,   0,   1, 224, 
      0,   0, 228, 144,   4,   0, 
    228, 160,   9,   0,   0,   3, 
      0,   0,   2, 224,   0,   0, 
    228, 144,   5,   0, 228, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4x4 mvp;
//   float4 texgen[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       4
//   texgen       c4       2
//

    vs_3_0
    dcl_color v0
    dcl_position v1
    dcl_color o0
    dcl_texcoord o1.xy
    dcl_position o2
    dp4 o2.x, v1, c0
    dp4 o2.y, v1, c1
    dp4 o2.z, v1, c2
    dp4 o2.w, v1, c3
    dp4 o1.x, v1, c4
    dp4 o1.y, v1, c5
    mov o0, v0

// approximately 7 instruction slots used
#endif

extern const BYTE pBinary_VPosition3dTexTGEAlpha[] =
{
      0,   3, 254, 255, 254, 255, 
     43,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 119,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    112,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
      4,   0,   2,   0,  72,   0, 
      0,   0,   0,   0,   0,   0, 
     88,   0,   0,   0,   2,   0, 
      4,   0,   2,   0,  18,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 109, 118, 112,   0, 
      3,   0,   3,   0,   4,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 103, 101, 110,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 224, 
      9,   0,   0,   3,   2,   0, 
      1, 224,   1,   0, 228, 144, 
      0,   0, 228, 160,   9,   0, 
      0,   3,   2,   0,   2, 224, 
      1,   0, 228, 144,   1,   0, 
    228, 160,   9,   0,   0,   3, 
      2,   0,   4, 224,   1,   0, 
    228, 144,   2,   0, 228, 160, 
      9,   0,   0,   3,   2,   0, 
      8, 224,   1,   0, 228, 144, 
      3,   0, 228, 160,   9,   0, 
      0,   3,   1,   0,   1, 224, 
      1,   0, 228, 144,   4,   0, 
    228, 160,   9,   0,   0,   3, 
      1,   0,   2, 224,   1,   0, 
    228, 144,   5,   0, 228, 160, 
      1,   0,   0,   2,   0,   0, 
     15, 224,   0,   0, 228, 144, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   float4x4 mvp;
//   float4 texgen[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   mvp          c2       4
//   texgen       c6       2
//

    vs_3_0
    dcl_position v0
    dcl_texcoord o0
    dcl_texcoord1 o1
    dcl_texcoord2 o2.xy
    dcl_position o3
    dp4 o3.x, v0, c2
    dp4 o3.y, v0, c3
    dp4 o3.z, v0, c4
    dp4 o3.w, v0, c5
    dp4 o2.x, v0, c6
    dp4 o2.y, v0, c7
    mov o0, c0
    mov o1, c1

// approximately 8 instruction slots used
#endif

extern const BYTE pBinary_VPosition3dTexTGCxform[] =
{
      0,   3, 254, 255, 254, 255, 
     61,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 191,   0, 
      0,   0,   0,   3, 254, 255, 
      4,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    184,   0,   0,   0, 108,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 116,   0, 
      0,   0,   0,   0,   0,   0, 
    132,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    116,   0,   0,   0,   0,   0, 
      0,   0, 138,   0,   0,   0, 
      2,   0,   2,   0,   4,   0, 
     10,   0, 144,   0,   0,   0, 
      0,   0,   0,   0, 160,   0, 
      0,   0,   2,   0,   6,   0, 
      2,   0,  26,   0, 168,   0, 
      0,   0,   0,   0,   0,   0, 
     99, 120,  97, 100, 100,   0, 
    171, 171,   1,   0,   3,   0, 
      1,   0,   4,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
     99, 120, 109, 117, 108,   0, 
    109, 118, 112,   0, 171, 171, 
      3,   0,   3,   0,   4,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 103, 101, 110,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      2, 128,   2,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   3,   0,  15, 224, 
      9,   0,   0,   3,   3,   0, 
      1, 224,   0,   0, 228, 144, 
      2,   0, 228, 160,   9,   0, 
      0,   3,   3,   0,   2, 224, 
      0,   0, 228, 144,   3,   0, 
    228, 160,   9,   0,   0,   3, 
      3,   0,   4, 224,   0,   0, 
    228, 144,   4,   0, 228, 160, 
      9,   0,   0,   3,   3,   0, 
      8, 224,   0,   0, 228, 144, 
      5,   0, 228, 160,   9,   0, 
      0,   3,   2,   0,   1, 224, 
      0,   0, 228, 144,   6,   0, 
    228, 160,   9,   0,   0,   3, 
      2,   0,   2, 224,   0,   0, 
    228, 144,   7,   0, 228, 160, 
      1,   0,   0,   2,   0,   0, 
     15, 224,   0,   0, 228, 160, 
      1,   0,   0,   2,   1,   0, 
     15, 224,   1,   0, 228, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   float4x4 mvp;
//   float4 texgen[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   mvp          c2       4
//   texgen       c6       2
//

    vs_3_0
    dcl_color v0
    dcl_position v1
    dcl_color o0
    dcl_texcoord o1
    dcl_texcoord1 o2
    dcl_texcoord2 o3.xy
    dcl_position o4
    dp4 o4.x, v1, c2
    dp4 o4.y, v1, c3
    dp4 o4.z, v1, c4
    dp4 o4.w, v1, c5
    dp4 o3.x, v1, c6
    dp4 o3.y, v1, c7
    mov o0, v0
    mov o1, c0
    mov o2, c1

// approximately 9 instruction slots used
#endif

extern const BYTE pBinary_VPosition3dTexTGCxformEAlpha[] =
{
      0,   3, 254, 255, 254, 255, 
     61,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 191,   0, 
      0,   0,   0,   3, 254, 255, 
      4,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    184,   0,   0,   0, 108,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 116,   0, 
      0,   0,   0,   0,   0,   0, 
    132,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    116,   0,   0,   0,   0,   0, 
      0,   0, 138,   0,   0,   0, 
      2,   0,   2,   0,   4,   0, 
     10,   0, 144,   0,   0,   0, 
      0,   0,   0,   0, 160,   0, 
      0,   0,   2,   0,   6,   0, 
      2,   0,  26,   0, 168,   0, 
      0,   0,   0,   0,   0,   0, 
     99, 120,  97, 100, 100,   0, 
    171, 171,   1,   0,   3,   0, 
      1,   0,   4,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
     99, 120, 109, 117, 108,   0, 
    109, 118, 112,   0, 171, 171, 
      3,   0,   3,   0,   4,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 103, 101, 110,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   2,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      2, 128,   3,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   4,   0,  15, 224, 
      9,   0,   0,   3,   4,   0, 
      1, 224,   1,   0, 228, 144, 
      2,   0, 228, 160,   9,   0, 
      0,   3,   4,   0,   2, 224, 
      1,   0, 228, 144,   3,   0, 
    228, 160,   9,   0,   0,   3, 
      4,   0,   4, 224,   1,   0, 
    228, 144,   4,   0, 228, 160, 
      9,   0,   0,   3,   4,   0, 
      8, 224,   1,   0, 228, 144, 
      5,   0, 228, 160,   9,   0, 
      0,   3,   3,   0,   1, 224, 
      1,   0, 228, 144,   6,   0, 
    228, 160,   9,   0,   0,   3, 
      3,   0,   2, 224,   1,   0, 
    228, 144,   7,   0, 228, 160, 
      1,   0,   0,   2,   0,   0, 
     15, 224,   0,   0, 228, 144, 
      1,   0,   0,   2,   1,   0, 
     15, 224,   0,   0, 228, 160, 
      1,   0,   0,   2,   2,   0, 
     15, 224,   1,   0, 228, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4x4 mvp;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       4
//

    vs_3_0
    dcl_color v0
    dcl_position v1
    dcl_color o0
    dcl_position o1
    dp4 o1.x, v1, c0
    dp4 o1.y, v1, c1
    dp4 o1.z, v1, c2
    dp4 o1.w, v1, c3
    mov o0, v0

// approximately 5 instruction slots used
#endif

extern const BYTE pBinary_VPosition3dVertex[] =
{
      0,   3, 254, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
      4,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    109, 118, 112,   0,   3,   0, 
      3,   0,   4,   0,   4,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 118, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,  15, 224,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      1,   0,  15, 224,   9,   0, 
      0,   3,   1,   0,   1, 224, 
      1,   0, 228, 144,   0,   0, 
    228, 160,   9,   0,   0,   3, 
      1,   0,   2, 224,   1,   0, 
    228, 144,   1,   0, 228, 160, 
      9,   0,   0,   3,   1,   0, 
      4, 224,   1,   0, 228, 144, 
      2,   0, 228, 160,   9,   0, 
      0,   3,   1,   0,   8, 224, 
      1,   0, 228, 144,   3,   0, 
    228, 160,   1,   0,   0,   2, 
      0,   0,  15, 224,   0,   0, 
    228, 144, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4x4 mvp;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       4
//

    vs_3_0
    dcl_color v0
    dcl_color1 v1
    dcl_position v2
    dcl_color o0
    dcl_color1 o1
    dcl_position o2
    dp4 o2.x, v2, c0
    dp4 o2.y, v2, c1
    dp4 o2.z, v2, c2
    dp4 o2.w, v2, c3
    mov o0, v0
    mov o1, v1

// approximately 6 instruction slots used
#endif

extern const BYTE pBinary_VPosition3dVertexEAlpha[] =
{
      0,   3, 254, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
      4,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    109, 118, 112,   0,   3,   0, 
      3,   0,   4,   0,   4,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 118, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,  10,   0,   1, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      2,   0,  15, 144,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,  15, 224,  31,   0, 
      0,   2,  10,   0,   1, 128, 
      1,   0,  15, 224,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      2,   0,  15, 224,   9,   0, 
      0,   3,   2,   0,   1, 224, 
      2,   0, 228, 144,   0,   0, 
    228, 160,   9,   0,   0,   3, 
      2,   0,   2, 224,   2,   0, 
    228, 144,   1,   0, 228, 160, 
      9,   0,   0,   3,   2,   0, 
      4, 224,   2,   0, 228, 144, 
      2,   0, 228, 160,   9,   0, 
      0,   3,   2,   0,   8, 224, 
      2,   0, 228, 144,   3,   0, 
    228, 160,   1,   0,   0,   2, 
      0,   0,  15, 224,   0,   0, 
    228, 144,   1,   0,   0,   2, 
      1,   0,  15, 224,   1,   0, 
    228, 144, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   float4x4 mvp;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   mvp          c2       4
//

    vs_3_0
    dcl_color v0
    dcl_position v1
    dcl_color o0
    dcl_texcoord o1
    dcl_texcoord1 o2
    dcl_position o3
    dp4 o3.x, v1, c2
    dp4 o3.y, v1, c3
    dp4 o3.z, v1, c4
    dp4 o3.w, v1, c5
    mov o0, v0
    mov o1, c0
    mov o2, c1

// approximately 7 instruction slots used
#endif

extern const BYTE pBinary_VPosition3dVertexCxform[] =
{
      0,   3, 254, 255, 254, 255, 
     50,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 147,   0, 
      0,   0,   0,   3, 254, 255, 
      3,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    140,   0,   0,   0,  88,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0,  96,   0, 
      0,   0,   0,   0,   0,   0, 
    112,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 118,   0,   0,   0, 
      2,   0,   2,   0,   4,   0, 
     10,   0, 124,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
     97, 100, 100,   0, 171, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
    109, 117, 108,   0, 109, 118, 
    112,   0, 171, 171,   3,   0, 
      3,   0,   4,   0,   4,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 118, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,  15, 224,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      1,   0,  15, 224,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      2,   0,  15, 224,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      3,   0,  15, 224,   9,   0, 
      0,   3,   3,   0,   1, 224, 
      1,   0, 228, 144,   2,   0, 
    228, 160,   9,   0,   0,   3, 
      3,   0,   2, 224,   1,   0, 
    228, 144,   3,   0, 228, 160, 
      9,   0,   0,   3,   3,   0, 
      4, 224,   1,   0, 228, 144, 
      4,   0, 228, 160,   9,   0, 
      0,   3,   3,   0,   8, 224, 
      1,   0, 228, 144,   5,   0, 
    228, 160,   1,   0,   0,   2, 
      0,   0,  15, 224,   0,   0, 
    228, 144,   1,   0,   0,   2, 
      1,   0,  15, 224,   0,   0, 
    228, 160,   1,   0,   0,   2, 
      2,   0,  15, 224,   1,   0, 
    228, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   float4x4 mvp;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   mvp          c2       4
//

    vs_3_0
    dcl_color v0
    dcl_color1 v1
    dcl_position v2
    dcl_color o0
    dcl_color1 o1
    dcl_texcoord o2
    dcl_texcoord1 o3
    dcl_position o4
    dp4 o4.x, v2, c2
    dp4 o4.y, v2, c3
    dp4 o4.z, v2, c4
    dp4 o4.w, v2, c5
    mov o0, v0
    mov o1, v1
    mov o2, c0
    mov o3, c1

// approximately 8 instruction slots used
#endif

extern const BYTE pBinary_VPosition3dVertexCxformEAlpha[] =
{
      0,   3, 254, 255, 254, 255, 
     50,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 147,   0, 
      0,   0,   0,   3, 254, 255, 
      3,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    140,   0,   0,   0,  88,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0,  96,   0, 
      0,   0,   0,   0,   0,   0, 
    112,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 118,   0,   0,   0, 
      2,   0,   2,   0,   4,   0, 
     10,   0, 124,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
     97, 100, 100,   0, 171, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
    109, 117, 108,   0, 109, 118, 
    112,   0, 171, 171,   3,   0, 
      3,   0,   4,   0,   4,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 118, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,  10,   0,   1, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      2,   0,  15, 144,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,  15, 224,  31,   0, 
      0,   2,  10,   0,   1, 128, 
      1,   0,  15, 224,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      2,   0,  15, 224,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      3,   0,  15, 224,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      4,   0,  15, 224,   9,   0, 
      0,   3,   4,   0,   1, 224, 
      2,   0, 228, 144,   2,   0, 
    228, 160,   9,   0,   0,   3, 
      4,   0,   2, 224,   2,   0, 
    228, 144,   3,   0, 228, 160, 
      9,   0,   0,   3,   4,   0, 
      4, 224,   2,   0, 228, 144, 
      4,   0, 228, 160,   9,   0, 
      0,   3,   4,   0,   8, 224, 
      2,   0, 228, 144,   5,   0, 
    228, 160,   1,   0,   0,   2, 
      0,   0,  15, 224,   0,   0, 
    228, 144,   1,   0,   0,   2, 
      1,   0,  15, 224,   1,   0, 
    228, 144,   1,   0,   0,   2, 
      2,   0,  15, 224,   0,   0, 
    228, 160,   1,   0,   0,   2, 
      3,   0,  15, 224,   1,   0, 
    228, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4x4 mvp;
//   float4 texgen[4];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       4
//   texgen       c4       4
//

    vs_3_0
    dcl_color v0
    dcl_position v1
    dcl_color o0
    dcl_texcoord o1.xy
    dcl_texcoord1 o2.xy
    dcl_position o3
    dp4 o3.x, v1, c0
    dp4 o3.y, v1, c1
    dp4 o3.z, v1, c2
    dp4 o3.w, v1, c3
    dp4 o1.x, v1, c4
    dp4 o1.y, v1, c5
    dp4 o2.x, v1, c6
    dp4 o2.y, v1, c7
    mov o0, v0

// approximately 9 instruction slots used
#endif

extern const BYTE pBinary_VPosition3dTexTGTexTG[] =
{
      0,   3, 254, 255, 254, 255, 
     43,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 119,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    112,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
      4,   0,   2,   0,  72,   0, 
      0,   0,   0,   0,   0,   0, 
     88,   0,   0,   0,   2,   0, 
      4,   0,   4,   0,  18,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 109, 118, 112,   0, 
      3,   0,   3,   0,   4,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 103, 101, 110,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   4,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,   3, 224, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   2,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   3,   0,  15, 224, 
      9,   0,   0,   3,   3,   0, 
      1, 224,   1,   0, 228, 144, 
      0,   0, 228, 160,   9,   0, 
      0,   3,   3,   0,   2, 224, 
      1,   0, 228, 144,   1,   0, 
    228, 160,   9,   0,   0,   3, 
      3,   0,   4, 224,   1,   0, 
    228, 144,   2,   0, 228, 160, 
      9,   0,   0,   3,   3,   0, 
      8, 224,   1,   0, 228, 144, 
      3,   0, 228, 160,   9,   0, 
      0,   3,   1,   0,   1, 224, 
      1,   0, 228, 144,   4,   0, 
    228, 160,   9,   0,   0,   3, 
      1,   0,   2, 224,   1,   0, 
    228, 144,   5,   0, 228, 160, 
      9,   0,   0,   3,   2,   0, 
      1, 224,   1,   0, 228, 144, 
      6,   0, 228, 160,   9,   0, 
      0,   3,   2,   0,   2, 224, 
      1,   0, 228, 144,   7,   0, 
    228, 160,   1,   0,   0,   2, 
      0,   0,  15, 224,   0,   0, 
    228, 144, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   float4x4 mvp;
//   float4 texgen[4];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   mvp          c2       4
//   texgen       c6       4
//

    vs_3_0
    dcl_color v0
    dcl_position v1
    dcl_color o0
    dcl_texcoord o1
    dcl_texcoord1 o2
    dcl_texcoord2 o3.xy
    dcl_texcoord3 o4.xy
    dcl_position o5
    dp4 o5.x, v1, c2
    dp4 o5.y, v1, c3
    dp4 o5.z, v1, c4
    dp4 o5.w, v1, c5
    dp4 o3.x, v1, c6
    dp4 o3.y, v1, c7
    dp4 o4.x, v1, c8
    dp4 o4.y, v1, c9
    mov o0, v0
    mov o1, c0
    mov o2, c1

// approximately 11 instruction slots used
#endif

extern const BYTE pBinary_VPosition3dTexTGTexTGCxform[] =
{
      0,   3, 254, 255, 254, 255, 
     61,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 191,   0, 
      0,   0,   0,   3, 254, 255, 
      4,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    184,   0,   0,   0, 108,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 116,   0, 
      0,   0,   0,   0,   0,   0, 
    132,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    116,   0,   0,   0,   0,   0, 
      0,   0, 138,   0,   0,   0, 
      2,   0,   2,   0,   4,   0, 
     10,   0, 144,   0,   0,   0, 
      0,   0,   0,   0, 160,   0, 
      0,   0,   2,   0,   6,   0, 
      4,   0,  26,   0, 168,   0, 
      0,   0,   0,   0,   0,   0, 
     99, 120,  97, 100, 100,   0, 
    171, 171,   1,   0,   3,   0, 
      1,   0,   4,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
     99, 120, 109, 117, 108,   0, 
    109, 118, 112,   0, 171, 171, 
      3,   0,   3,   0,   4,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 103, 101, 110,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   4,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   2,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      2, 128,   3,   0,   3, 224, 
     31,   0,   0,   2,   5,   0, 
      3, 128,   4,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   5,   0,  15, 224, 
      9,   0,   0,   3,   5,   0, 
      1, 224,   1,   0, 228, 144, 
      2,   0, 228, 160,   9,   0, 
      0,   3,   5,   0,   2, 224, 
      1,   0, 228, 144,   3,   0, 
    228, 160,   9,   0,   0,   3, 
      5,   0,   4, 224,   1,   0, 
    228, 144,   4,   0, 228, 160, 
      9,   0,   0,   3,   5,   0, 
      8, 224,   1,   0, 228, 144, 
      5,   0, 228, 160,   9,   0, 
      0,   3,   3,   0,   1, 224, 
      1,   0, 228, 144,   6,   0, 
    228, 160,   9,   0,   0,   3, 
      3,   0,   2, 224,   1,   0, 
    228, 144,   7,   0, 228, 160, 
      9,   0,   0,   3,   4,   0, 
      1, 224,   1,   0, 228, 144, 
      8,   0, 228, 160,   9,   0, 
      0,   3,   4,   0,   2, 224, 
      1,   0, 228, 144,   9,   0, 
    228, 160,   1,   0,   0,   2, 
      0,   0,  15, 224,   0,   0, 
    228, 144,   1,   0,   0,   2, 
      1,   0,  15, 224,   0,   0, 
    228, 160,   1,   0,   0,   2, 
      2,   0,  15, 224,   1,   0, 
    228, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4x4 mvp;
//   float4 texgen[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       4
//   texgen       c4       2
//

    vs_3_0
    dcl_color v0
    dcl_color1 v1
    dcl_position v2
    dcl_color o0
    dcl_color1 o1
    dcl_texcoord o2.xy
    dcl_position o3
    dp4 o3.x, v2, c0
    dp4 o3.y, v2, c1
    dp4 o3.z, v2, c2
    dp4 o3.w, v2, c3
    dp4 o2.x, v2, c4
    dp4 o2.y, v2, c5
    mov o0, v0
    mov o1, v1

// approximately 8 instruction slots used
#endif

extern const BYTE pBinary_VPosition3dTexTGVertex[] =
{
      0,   3, 254, 255, 254, 255, 
     43,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 119,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    112,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
      4,   0,   2,   0,  72,   0, 
      0,   0,   0,   0,   0,   0, 
     88,   0,   0,   0,   2,   0, 
      4,   0,   2,   0,  18,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 109, 118, 112,   0, 
      3,   0,   3,   0,   4,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 103, 101, 110,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   2,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   3,   0,  15, 224, 
      9,   0,   0,   3,   3,   0, 
      1, 224,   2,   0, 228, 144, 
      0,   0, 228, 160,   9,   0, 
      0,   3,   3,   0,   2, 224, 
      2,   0, 228, 144,   1,   0, 
    228, 160,   9,   0,   0,   3, 
      3,   0,   4, 224,   2,   0, 
    228, 144,   2,   0, 228, 160, 
      9,   0,   0,   3,   3,   0, 
      8, 224,   2,   0, 228, 144, 
      3,   0, 228, 160,   9,   0, 
      0,   3,   2,   0,   1, 224, 
      2,   0, 228, 144,   4,   0, 
    228, 160,   9,   0,   0,   3, 
      2,   0,   2, 224,   2,   0, 
    228, 144,   5,   0, 228, 160, 
      1,   0,   0,   2,   0,   0, 
     15, 224,   0,   0, 228, 144, 
      1,   0,   0,   2,   1,   0, 
     15, 224,   1,   0, 228, 144, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   float4x4 mvp;
//   float4 texgen[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   mvp          c2       4
//   texgen       c6       2
//

    vs_3_0
    dcl_color v0
    dcl_color1 v1
    dcl_position v2
    dcl_color o0
    dcl_color1 o1
    dcl_texcoord o2
    dcl_texcoord1 o3
    dcl_texcoord2 o4.xy
    dcl_position o5
    dp4 o5.x, v2, c2
    dp4 o5.y, v2, c3
    dp4 o5.z, v2, c4
    dp4 o5.w, v2, c5
    dp4 o4.x, v2, c6
    dp4 o4.y, v2, c7
    mov o0, v0
    mov o1, v1
    mov o2, c0
    mov o3, c1

// approximately 10 instruction slots used
#endif

extern const BYTE pBinary_VPosition3dTexTGVertexCxform[] =
{
      0,   3, 254, 255, 254, 255, 
     61,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 191,   0, 
      0,   0,   0,   3, 254, 255, 
      4,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    184,   0,   0,   0, 108,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 116,   0, 
      0,   0,   0,   0,   0,   0, 
    132,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    116,   0,   0,   0,   0,   0, 
      0,   0, 138,   0,   0,   0, 
      2,   0,   2,   0,   4,   0, 
     10,   0, 144,   0,   0,   0, 
      0,   0,   0,   0, 160,   0, 
      0,   0,   2,   0,   6,   0, 
      2,   0,  26,   0, 168,   0, 
      0,   0,   0,   0,   0,   0, 
     99, 120,  97, 100, 100,   0, 
    171, 171,   1,   0,   3,   0, 
      1,   0,   4,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
     99, 120, 109, 117, 108,   0, 
    109, 118, 112,   0, 171, 171, 
      3,   0,   3,   0,   4,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 103, 101, 110,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   2,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   3,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      2, 128,   4,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   5,   0,  15, 224, 
      9,   0,   0,   3,   5,   0, 
      1, 224,   2,   0, 228, 144, 
      2,   0, 228, 160,   9,   0, 
      0,   3,   5,   0,   2, 224, 
      2,   0, 228, 144,   3,   0, 
    228, 160,   9,   0,   0,   3, 
      5,   0,   4, 224,   2,   0, 
    228, 144,   4,   0, 228, 160, 
      9,   0,   0,   3,   5,   0, 
      8, 224,   2,   0, 228, 144, 
      5,   0, 228, 160,   9,   0, 
      0,   3,   4,   0,   1, 224, 
      2,   0, 228, 144,   6,   0, 
    228, 160,   9,   0,   0,   3, 
      4,   0,   2, 224,   2,   0, 
    228, 144,   7,   0, 228, 160, 
      1,   0,   0,   2,   0,   0, 
     15, 224,   0,   0, 228, 144, 
      1,   0,   0,   2,   1,   0, 
     15, 224,   1,   0, 228, 144, 
      1,   0,   0,   2,   2,   0, 
     15, 224,   0,   0, 228, 160, 
      1,   0,   0,   2,   3,   0, 
     15, 224,   1,   0, 228, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 vfuniforms[96];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0      96
//

    vs_3_0
    def c96, 1.10000002, 3.0999999, 0, 1
    def c97, 4, 0.100000001, 2.0999999, 0
    dcl_position v0
    dcl_color1 v1
    dcl_texcoord o0.xy
    dcl_position o1
    mad r0.xy, v1.x, c97.x, c97.yzzw
    frc r0.zw, r0.xyxy
    add r0.xy, r0, -r0.zwzw
    mad r0.zw, v1.x, c97.x, -r0
    add r0.zw, r0, c96.xyxy
    mova a0.xy, r0
    dp4 o0.x, v0, c0[a0.y]
    dp4 o1.x, v0, c0[a0.x]
    mova a0.xy, r0.zwzw
    dp4 o0.y, v0, c0[a0.y]
    dp4 o1.y, v0, c0[a0.x]
    mov o1.zw, c96

// approximately 12 instruction slots used
#endif

extern const BYTE pBinary_VBatchTexTG[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
     96,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  96,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5,  96,   0, 
     15, 160, 205, 204, 140,  63, 
    102, 102,  70,  64,   0,   0, 
      0,   0,   0,   0, 128,  63, 
     81,   0,   0,   5,  97,   0, 
     15, 160,   0,   0, 128,  64, 
    205, 204, 204,  61, 102, 102, 
      6,  64,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 224, 
      4,   0,   0,   4,   0,   0, 
      3, 128,   1,   0,   0, 144, 
     97,   0,   0, 160,  97,   0, 
    233, 160,  19,   0,   0,   2, 
      0,   0,  12, 128,   0,   0, 
     68, 128,   2,   0,   0,   3, 
      0,   0,   3, 128,   0,   0, 
    228, 128,   0,   0, 238, 129, 
      4,   0,   0,   4,   0,   0, 
     12, 128,   1,   0,   0, 144, 
     97,   0,   0, 160,   0,   0, 
    228, 129,   2,   0,   0,   3, 
      0,   0,  12, 128,   0,   0, 
    228, 128,  96,   0,  68, 160, 
     46,   0,   0,   2,   0,   0, 
      3, 176,   0,   0, 228, 128, 
      9,   0,   0,   4,   0,   0, 
      1, 224,   0,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
     85, 176,   9,   0,   0,   4, 
      1,   0,   1, 224,   0,   0, 
    228, 144,   0,  32, 228, 160, 
      0,   0,   0, 176,  46,   0, 
      0,   2,   0,   0,   3, 176, 
      0,   0, 238, 128,   9,   0, 
      0,   4,   0,   0,   2, 224, 
      0,   0, 228, 144,   0,  32, 
    228, 160,   0,   0,  85, 176, 
      9,   0,   0,   4,   1,   0, 
      2, 224,   0,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   1,   0,   0,   2, 
      1,   0,  12, 224,  96,   0, 
    228, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 vfuniforms[96];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0      96
//

    vs_3_0
    def c96, 1020.03998, 0.100000001, 2.0999999, 0
    def c97, 1.10000002, 3.0999999, 0, 1
    dcl_color v0
    dcl_position v1
    dcl_color o0
    dcl_texcoord o1.xy
    dcl_position o2
    mad r0.xy, v0.z, c96.x, c96.yzzw
    frc r0.zw, r0.xyxy
    add r0.xy, r0, -r0.zwzw
    mad r0.zw, v0.z, c96.x, -r0
    add r0.zw, r0, c97.xyxy
    mova a0.xy, r0
    dp4 o1.x, v1, c0[a0.y]
    dp4 o2.x, v1, c0[a0.x]
    mova a0.xy, r0.zwzw
    dp4 o1.y, v1, c0[a0.y]
    dp4 o2.y, v1, c0[a0.x]
    mov o0, v0
    mov o2.zw, c97

// approximately 13 instruction slots used
#endif

extern const BYTE pBinary_VBatchTexTGEAlpha[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
     96,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  96,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5,  96,   0, 
     15, 160, 143,   2, 127,  68, 
    205, 204, 204,  61, 102, 102, 
      6,  64,   0,   0,   0,   0, 
     81,   0,   0,   5,  97,   0, 
     15, 160, 205, 204, 140,  63, 
    102, 102,  70,  64,   0,   0, 
      0,   0,   0,   0, 128,  63, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 224, 
      4,   0,   0,   4,   0,   0, 
      3, 128,   0,   0, 170, 144, 
     96,   0,   0, 160,  96,   0, 
    233, 160,  19,   0,   0,   2, 
      0,   0,  12, 128,   0,   0, 
     68, 128,   2,   0,   0,   3, 
      0,   0,   3, 128,   0,   0, 
    228, 128,   0,   0, 238, 129, 
      4,   0,   0,   4,   0,   0, 
     12, 128,   0,   0, 170, 144, 
     96,   0,   0, 160,   0,   0, 
    228, 129,   2,   0,   0,   3, 
      0,   0,  12, 128,   0,   0, 
    228, 128,  97,   0,  68, 160, 
     46,   0,   0,   2,   0,   0, 
      3, 176,   0,   0, 228, 128, 
      9,   0,   0,   4,   1,   0, 
      1, 224,   1,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
     85, 176,   9,   0,   0,   4, 
      2,   0,   1, 224,   1,   0, 
    228, 144,   0,  32, 228, 160, 
      0,   0,   0, 176,  46,   0, 
      0,   2,   0,   0,   3, 176, 
      0,   0, 238, 128,   9,   0, 
      0,   4,   1,   0,   2, 224, 
      1,   0, 228, 144,   0,  32, 
    228, 160,   0,   0,  85, 176, 
      9,   0,   0,   4,   2,   0, 
      2, 224,   1,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   1,   0,   0,   2, 
      0,   0,  15, 224,   0,   0, 
    228, 144,   1,   0,   0,   2, 
      2,   0,  12, 224,  97,   0, 
    228, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 vfuniforms[144];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0     144
//

    vs_3_0
    def c144, 2.0999999, 4.0999999, 0.100000001, 1.10000002
    def c145, 6, 3.0999999, 5.0999999, 0
    def c146, 0, 1, 0, 0
    dcl_position v0
    dcl_color1 v1
    dcl_texcoord o0
    dcl_texcoord1 o1
    dcl_texcoord2 o2.xy
    dcl_position o3
    mov r0.x, c145.x
    mad r0, v1.x, r0.x, c144
    frc r1, r0
    add r0, r0, -r1
    mad r1.xy, v1.x, c145.x, -r1
    add r1.xy, r1, c145.yzzw
    mova a0.x, r0.x
    dp4 o3.x, v0, c0[a0.x]
    mova a0.xy, r1
    dp4 o2.y, v0, c0[a0.y]
    dp4 o3.y, v0, c0[a0.x]
    mova a0.x, r0.y
    dp4 o2.x, v0, c0[a0.x]
    mova a0.xy, r0.zwzw
    mov o1, c0[a0.y]
    mov o0, c0[a0.x]
    mov o3.zw, c146.xyxy

// approximately 17 instruction slots used
#endif

extern const BYTE pBinary_VBatchTexTGCxform[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
    144,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0, 144,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5, 144,   0, 
     15, 160, 102, 102,   6,  64, 
     51,  51, 131,  64, 205, 204, 
    204,  61, 205, 204, 140,  63, 
     81,   0,   0,   5, 145,   0, 
     15, 160,   0,   0, 192,  64, 
    102, 102,  70,  64,  51,  51, 
    163,  64,   0,   0,   0,   0, 
     81,   0,   0,   5, 146,   0, 
     15, 160,   0,   0,   0,   0, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      2, 128,   2,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   3,   0,  15, 224, 
      1,   0,   0,   2,   0,   0, 
      1, 128, 145,   0,   0, 160, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   1,   0,   0, 144, 
      0,   0,   0, 128, 144,   0, 
    228, 160,  19,   0,   0,   2, 
      1,   0,  15, 128,   0,   0, 
    228, 128,   2,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   1,   0, 228, 129, 
      4,   0,   0,   4,   1,   0, 
      3, 128,   1,   0,   0, 144, 
    145,   0,   0, 160,   1,   0, 
    228, 129,   2,   0,   0,   3, 
      1,   0,   3, 128,   1,   0, 
    228, 128, 145,   0, 233, 160, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   3,   0, 
      1, 224,   0,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,  46,   0,   0,   2, 
      0,   0,   3, 176,   1,   0, 
    228, 128,   9,   0,   0,   4, 
      2,   0,   2, 224,   0,   0, 
    228, 144,   0,  32, 228, 160, 
      0,   0,  85, 176,   9,   0, 
      0,   4,   3,   0,   2, 224, 
      0,   0, 228, 144,   0,  32, 
    228, 160,   0,   0,   0, 176, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,  85, 128, 
      9,   0,   0,   4,   2,   0, 
      1, 224,   0,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,  46,   0,   0,   2, 
      0,   0,   3, 176,   0,   0, 
    238, 128,   1,   0,   0,   3, 
      1,   0,  15, 224,   0,  32, 
    228, 160,   0,   0,  85, 176, 
      1,   0,   0,   3,   0,   0, 
     15, 224,   0,  32, 228, 160, 
      0,   0,   0, 176,   1,   0, 
      0,   2,   3,   0,  12, 224, 
    146,   0,  68, 160, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 vfuniforms[144];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0     144
//

    vs_3_0
    def c144, 2.0999999, 4.0999999, 0.100000001, 1.10000002
    def c145, 0, 1, 0, 0
    def c146, 1530.05994, 3.0999999, 5.0999999, 0
    dcl_color v0
    dcl_position v1
    dcl_color o0
    dcl_texcoord o1
    dcl_texcoord1 o2
    dcl_texcoord2 o3.xy
    dcl_position o4
    mov r0.x, c146.x
    mad r0, v0.z, r0.x, c144
    frc r1, r0
    add r0, r0, -r1
    mad r1.xy, v0.z, c146.x, -r1
    add r1.xy, r1, c146.yzzw
    mova a0.x, r0.x
    dp4 o4.x, v1, c0[a0.x]
    mova a0.xy, r1
    dp4 o3.y, v1, c0[a0.y]
    dp4 o4.y, v1, c0[a0.x]
    mova a0.x, r0.y
    dp4 o3.x, v1, c0[a0.x]
    mov o0, v0
    mova a0.xy, r0.zwzw
    mov o2, c0[a0.y]
    mov o1, c0[a0.x]
    mov o4.zw, c145.xyxy

// approximately 18 instruction slots used
#endif

extern const BYTE pBinary_VBatchTexTGCxformEAlpha[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
    144,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0, 144,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5, 144,   0, 
     15, 160, 102, 102,   6,  64, 
     51,  51, 131,  64, 205, 204, 
    204,  61, 205, 204, 140,  63, 
     81,   0,   0,   5, 145,   0, 
     15, 160,   0,   0,   0,   0, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     81,   0,   0,   5, 146,   0, 
     15, 160, 235,  65, 191,  68, 
    102, 102,  70,  64,  51,  51, 
    163,  64,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   2,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      2, 128,   3,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   4,   0,  15, 224, 
      1,   0,   0,   2,   0,   0, 
      1, 128, 146,   0,   0, 160, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   0,   0, 170, 144, 
      0,   0,   0, 128, 144,   0, 
    228, 160,  19,   0,   0,   2, 
      1,   0,  15, 128,   0,   0, 
    228, 128,   2,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   1,   0, 228, 129, 
      4,   0,   0,   4,   1,   0, 
      3, 128,   0,   0, 170, 144, 
    146,   0,   0, 160,   1,   0, 
    228, 129,   2,   0,   0,   3, 
      1,   0,   3, 128,   1,   0, 
    228, 128, 146,   0, 233, 160, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   4,   0, 
      1, 224,   1,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,  46,   0,   0,   2, 
      0,   0,   3, 176,   1,   0, 
    228, 128,   9,   0,   0,   4, 
      3,   0,   2, 224,   1,   0, 
    228, 144,   0,  32, 228, 160, 
      0,   0,  85, 176,   9,   0, 
      0,   4,   4,   0,   2, 224, 
      1,   0, 228, 144,   0,  32, 
    228, 160,   0,   0,   0, 176, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,  85, 128, 
      9,   0,   0,   4,   3,   0, 
      1, 224,   1,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   1,   0,   0,   2, 
      0,   0,  15, 224,   0,   0, 
    228, 144,  46,   0,   0,   2, 
      0,   0,   3, 176,   0,   0, 
    238, 128,   1,   0,   0,   3, 
      2,   0,  15, 224,   0,  32, 
    228, 160,   0,   0,  85, 176, 
      1,   0,   0,   3,   1,   0, 
     15, 224,   0,  32, 228, 160, 
      0,   0,   0, 176,   1,   0, 
      0,   2,   4,   0,  12, 224, 
    145,   0,  68, 160, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 vfuniforms[48];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0      48
//

    vs_3_0
    def c48, 2, 0.100000001, 1.10000002, 0
    def c49, 0, 1, 0, 0
    dcl_color v0
    dcl_position v1
    dcl_color2 v2
    dcl_color o0
    dcl_position o1
    mad r0.x, v2.x, c48.x, c48.y
    frc r0.y, r0.x
    add r0.x, r0.x, -r0.y
    mad r0.y, v2.x, c48.x, -r0.y
    add r0.y, r0.y, c48.z
    mova a0.x, r0.y
    dp4 o1.y, v1, c0[a0.x]
    mova a0.x, r0.x
    dp4 o1.x, v1, c0[a0.x]
    mov o0, v0
    mov o1.zw, c49.xyxy

// approximately 11 instruction slots used
#endif

extern const BYTE pBinary_VBatchVertex[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
     48,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  48,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5,  48,   0, 
     15, 160,   0,   0,   0,  64, 
    205, 204, 204,  61, 205, 204, 
    140,  63,   0,   0,   0,   0, 
     81,   0,   0,   5,  49,   0, 
     15, 160,   0,   0,   0,   0, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      2, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 224, 
      4,   0,   0,   4,   0,   0, 
      1, 128,   2,   0,   0, 144, 
     48,   0,   0, 160,  48,   0, 
     85, 160,  19,   0,   0,   2, 
      0,   0,   2, 128,   0,   0, 
      0, 128,   2,   0,   0,   3, 
      0,   0,   1, 128,   0,   0, 
      0, 128,   0,   0,  85, 129, 
      4,   0,   0,   4,   0,   0, 
      2, 128,   2,   0,   0, 144, 
     48,   0,   0, 160,   0,   0, 
     85, 129,   2,   0,   0,   3, 
      0,   0,   2, 128,   0,   0, 
     85, 128,  48,   0, 170, 160, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,  85, 128, 
      9,   0,   0,   4,   1,   0, 
      2, 224,   1,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,  46,   0,   0,   2, 
      0,   0,   1, 176,   0,   0, 
      0, 128,   9,   0,   0,   4, 
      1,   0,   1, 224,   1,   0, 
    228, 144,   0,  32, 228, 160, 
      0,   0,   0, 176,   1,   0, 
      0,   2,   0,   0,  15, 224, 
      0,   0, 228, 144,   1,   0, 
      0,   2,   1,   0,  12, 224, 
     49,   0,  68, 160, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 vfuniforms[48];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0      48
//

    vs_3_0
    def c48, 510.019989, 0.100000001, 1.10000002, 0
    def c49, 0, 1, 0, 0
    dcl_color v0
    dcl_color1 v1
    dcl_position v2
    dcl_color o0
    dcl_color1 o1
    dcl_position o2
    mad r0.x, v1.z, c48.x, c48.y
    frc r0.y, r0.x
    add r0.x, r0.x, -r0.y
    mad r0.y, v1.z, c48.x, -r0.y
    add r0.y, r0.y, c48.z
    mova a0.x, r0.y
    dp4 o2.y, v2, c0[a0.x]
    mova a0.x, r0.x
    dp4 o2.x, v2, c0[a0.x]
    mov o0, v0
    mov o1, v1
    mov o2.zw, c49.xyxy

// approximately 12 instruction slots used
#endif

extern const BYTE pBinary_VBatchVertexEAlpha[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
     48,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  48,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5,  48,   0, 
     15, 160, 143,   2, 255,  67, 
    205, 204, 204,  61, 205, 204, 
    140,  63,   0,   0,   0,   0, 
     81,   0,   0,   5,  49,   0, 
     15, 160,   0,   0,   0,   0, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 224, 
      4,   0,   0,   4,   0,   0, 
      1, 128,   1,   0, 170, 144, 
     48,   0,   0, 160,  48,   0, 
     85, 160,  19,   0,   0,   2, 
      0,   0,   2, 128,   0,   0, 
      0, 128,   2,   0,   0,   3, 
      0,   0,   1, 128,   0,   0, 
      0, 128,   0,   0,  85, 129, 
      4,   0,   0,   4,   0,   0, 
      2, 128,   1,   0, 170, 144, 
     48,   0,   0, 160,   0,   0, 
     85, 129,   2,   0,   0,   3, 
      0,   0,   2, 128,   0,   0, 
     85, 128,  48,   0, 170, 160, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,  85, 128, 
      9,   0,   0,   4,   2,   0, 
      2, 224,   2,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,  46,   0,   0,   2, 
      0,   0,   1, 176,   0,   0, 
      0, 128,   9,   0,   0,   4, 
      2,   0,   1, 224,   2,   0, 
    228, 144,   0,  32, 228, 160, 
      0,   0,   0, 176,   1,   0, 
      0,   2,   0,   0,  15, 224, 
      0,   0, 228, 144,   1,   0, 
      0,   2,   1,   0,  15, 224, 
      1,   0, 228, 144,   1,   0, 
      0,   2,   2,   0,  12, 224, 
     49,   0,  68, 160, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 vfuniforms[96];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0      96
//

    vs_3_0
    def c96, 4, 2.0999999, 0.100000001, 1.10000002
    def c97, 3.0999999, 0, 1, 0
    dcl_color v0
    dcl_position v1
    dcl_color2 v2
    dcl_color o0
    dcl_texcoord o1
    dcl_texcoord1 o2
    dcl_position o3
    mad r0.xyz, v2.x, c96.x, c96.yzww
    frc r1.xyz, r0
    add r0.xyz, r0, -r1
    mad r0.w, v2.x, c96.x, -r1.x
    add r0.w, r0.w, c97.x
    mova a0.x, r0.w
    dp4 o3.y, v1, c0[a0.x]
    mova a0.x, r0.x
    dp4 o3.x, v1, c0[a0.x]
    mov o0, v0
    mova a0.xy, r0.yzzw
    mov o2, c0[a0.y]
    mov o1, c0[a0.x]
    mov o3.zw, c97.xyyz

// approximately 14 instruction slots used
#endif

extern const BYTE pBinary_VBatchVertexCxform[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
     96,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  96,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5,  96,   0, 
     15, 160,   0,   0, 128,  64, 
    102, 102,   6,  64, 205, 204, 
    204,  61, 205, 204, 140,  63, 
     81,   0,   0,   5,  97,   0, 
     15, 160, 102, 102,  70,  64, 
      0,   0,   0,   0,   0,   0, 
    128,  63,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      2, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   2,   0,  15, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   3,   0,  15, 224, 
      4,   0,   0,   4,   0,   0, 
      7, 128,   2,   0,   0, 144, 
     96,   0,   0, 160,  96,   0, 
    249, 160,  19,   0,   0,   2, 
      1,   0,   7, 128,   0,   0, 
    228, 128,   2,   0,   0,   3, 
      0,   0,   7, 128,   0,   0, 
    228, 128,   1,   0, 228, 129, 
      4,   0,   0,   4,   0,   0, 
      8, 128,   2,   0,   0, 144, 
     96,   0,   0, 160,   1,   0, 
      0, 129,   2,   0,   0,   3, 
      0,   0,   8, 128,   0,   0, 
    255, 128,  97,   0,   0, 160, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0, 255, 128, 
      9,   0,   0,   4,   3,   0, 
      2, 224,   1,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,  46,   0,   0,   2, 
      0,   0,   1, 176,   0,   0, 
      0, 128,   9,   0,   0,   4, 
      3,   0,   1, 224,   1,   0, 
    228, 144,   0,  32, 228, 160, 
      0,   0,   0, 176,   1,   0, 
      0,   2,   0,   0,  15, 224, 
      0,   0, 228, 144,  46,   0, 
      0,   2,   0,   0,   3, 176, 
      0,   0, 233, 128,   1,   0, 
      0,   3,   2,   0,  15, 224, 
      0,  32, 228, 160,   0,   0, 
     85, 176,   1,   0,   0,   3, 
      1,   0,  15, 224,   0,  32, 
    228, 160,   0,   0,   0, 176, 
      1,   0,   0,   2,   3,   0, 
     12, 224,  97,   0, 148, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 vfuniforms[96];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0      96
//

    vs_3_0
    def c96, 1020.03998, 2.0999999, 0.100000001, 1.10000002
    def c97, 3.0999999, 0, 1, 0
    dcl_color v0
    dcl_color1 v1
    dcl_position v2
    dcl_color o0
    dcl_color1 o1
    dcl_texcoord o2
    dcl_texcoord1 o3
    dcl_position o4
    mad r0.xyz, v1.z, c96.x, c96.yzww
    frc r1.xyz, r0
    add r0.xyz, r0, -r1
    mad r0.w, v1.z, c96.x, -r1.x
    add r0.w, r0.w, c97.x
    mova a0.x, r0.w
    dp4 o4.y, v2, c0[a0.x]
    mova a0.x, r0.x
    dp4 o4.x, v2, c0[a0.x]
    mov o0, v0
    mov o1, v1
    mova a0.xy, r0.yzzw
    mov o3, c0[a0.y]
    mov o2, c0[a0.x]
    mov o4.zw, c97.xyyz

// approximately 15 instruction slots used
#endif

extern const BYTE pBinary_VBatchVertexCxformEAlpha[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
     96,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  96,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5,  96,   0, 
     15, 160, 143,   2, 127,  68, 
    102, 102,   6,  64, 205, 204, 
    204,  61, 205, 204, 140,  63, 
     81,   0,   0,   5,  97,   0, 
     15, 160, 102, 102,  70,  64, 
      0,   0,   0,   0,   0,   0, 
    128,  63,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   2,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   3,   0,  15, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   4,   0,  15, 224, 
      4,   0,   0,   4,   0,   0, 
      7, 128,   1,   0, 170, 144, 
     96,   0,   0, 160,  96,   0, 
    249, 160,  19,   0,   0,   2, 
      1,   0,   7, 128,   0,   0, 
    228, 128,   2,   0,   0,   3, 
      0,   0,   7, 128,   0,   0, 
    228, 128,   1,   0, 228, 129, 
      4,   0,   0,   4,   0,   0, 
      8, 128,   1,   0, 170, 144, 
     96,   0,   0, 160,   1,   0, 
      0, 129,   2,   0,   0,   3, 
      0,   0,   8, 128,   0,   0, 
    255, 128,  97,   0,   0, 160, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0, 255, 128, 
      9,   0,   0,   4,   4,   0, 
      2, 224,   2,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,  46,   0,   0,   2, 
      0,   0,   1, 176,   0,   0, 
      0, 128,   9,   0,   0,   4, 
      4,   0,   1, 224,   2,   0, 
    228, 144,   0,  32, 228, 160, 
      0,   0,   0, 176,   1,   0, 
      0,   2,   0,   0,  15, 224, 
      0,   0, 228, 144,   1,   0, 
      0,   2,   1,   0,  15, 224, 
      1,   0, 228, 144,  46,   0, 
      0,   2,   0,   0,   3, 176, 
      0,   0, 233, 128,   1,   0, 
      0,   3,   3,   0,  15, 224, 
      0,  32, 228, 160,   0,   0, 
     85, 176,   1,   0,   0,   3, 
      2,   0,  15, 224,   0,  32, 
    228, 160,   0,   0,   0, 176, 
      1,   0,   0,   2,   4,   0, 
     12, 224,  97,   0, 148, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 vfuniforms[144];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0     144
//

    vs_3_0
    def c144, 1530.05994, 0.100000001, 2.0999999, 0
    def c145, 0, 1, 0, 0
    def c146, 1.10000002, 3.0999999, 4.0999999, 5.0999999
    dcl_color v0
    dcl_position v1
    dcl_color o0
    dcl_texcoord o1.xy
    dcl_texcoord1 o2.xy
    dcl_position o3
    mad r0.xy, v0.z, c144.x, c144.yzzw
    frc r1, r0.xyyy
    add r0.xy, r0, -r1.xwzw
    mad r1, v0.z, c144.x, -r1
    add r1, r1, c146
    mova a0.xy, r0
    dp4 o1.x, v1, c0[a0.y]
    dp4 o3.x, v1, c0[a0.x]
    mova a0.x, r1.x
    dp4 o3.y, v1, c0[a0.x]
    mova a0.x, r1.y
    dp4 o1.y, v1, c0[a0.x]
    mova a0.xy, r1.zwzw
    dp4 o2.y, v1, c0[a0.y]
    dp4 o2.x, v1, c0[a0.x]
    mov o0, v0
    mov o3.zw, c145.xyxy

// approximately 17 instruction slots used
#endif

extern const BYTE pBinary_VBatchTexTGTexTG[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
    144,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0, 144,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5, 144,   0, 
     15, 160, 235,  65, 191,  68, 
    205, 204, 204,  61, 102, 102, 
      6,  64,   0,   0,   0,   0, 
     81,   0,   0,   5, 145,   0, 
     15, 160,   0,   0,   0,   0, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     81,   0,   0,   5, 146,   0, 
     15, 160, 205, 204, 140,  63, 
    102, 102,  70,  64,  51,  51, 
    131,  64,  51,  51, 163,  64, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,   3, 224, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   2,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   3,   0,  15, 224, 
      4,   0,   0,   4,   0,   0, 
      3, 128,   0,   0, 170, 144, 
    144,   0,   0, 160, 144,   0, 
    233, 160,  19,   0,   0,   2, 
      1,   0,  15, 128,   0,   0, 
     84, 128,   2,   0,   0,   3, 
      0,   0,   3, 128,   0,   0, 
    228, 128,   1,   0, 236, 129, 
      4,   0,   0,   4,   1,   0, 
     15, 128,   0,   0, 170, 144, 
    144,   0,   0, 160,   1,   0, 
    228, 129,   2,   0,   0,   3, 
      1,   0,  15, 128,   1,   0, 
    228, 128, 146,   0, 228, 160, 
     46,   0,   0,   2,   0,   0, 
      3, 176,   0,   0, 228, 128, 
      9,   0,   0,   4,   1,   0, 
      1, 224,   1,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
     85, 176,   9,   0,   0,   4, 
      3,   0,   1, 224,   1,   0, 
    228, 144,   0,  32, 228, 160, 
      0,   0,   0, 176,  46,   0, 
      0,   2,   0,   0,   1, 176, 
      1,   0,   0, 128,   9,   0, 
      0,   4,   3,   0,   2, 224, 
      1,   0, 228, 144,   0,  32, 
    228, 160,   0,   0,   0, 176, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   1,   0,  85, 128, 
      9,   0,   0,   4,   1,   0, 
      2, 224,   1,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,  46,   0,   0,   2, 
      0,   0,   3, 176,   1,   0, 
    238, 128,   9,   0,   0,   4, 
      2,   0,   2, 224,   1,   0, 
    228, 144,   0,  32, 228, 160, 
      0,   0,  85, 176,   9,   0, 
      0,   4,   2,   0,   1, 224, 
      1,   0, 228, 144,   0,  32, 
    228, 160,   0,   0,   0, 176, 
      1,   0,   0,   2,   0,   0, 
     15, 224,   0,   0, 228, 144, 
      1,   0,   0,   2,   3,   0, 
     12, 224, 145,   0,  68, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 vfuniforms[192];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0     192
//

    vs_3_0
    def c192, 2.0999999, 4.0999999, 0.100000001, 1.10000002
    def c193, 2040.07996, 0, 1, 0
    def c194, 3.0999999, 5.0999999, 6.0999999, 7.0999999
    dcl_color v0
    dcl_position v1
    dcl_color o0
    dcl_texcoord o1
    dcl_texcoord1 o2
    dcl_texcoord2 o3.xy
    dcl_texcoord3 o4.xy
    dcl_position o5
    mov r0.x, c193.x
    mad r0, v0.z, r0.x, c192
    frc r1, r0
    add r0, r0, -r1
    mad r1, v0.z, c193.x, -r1.xyyy
    add r1, r1, c194
    mova a0.x, r0.x
    dp4 o5.x, v1, c0[a0.x]
    mova a0.x, r1.x
    dp4 o5.y, v1, c0[a0.x]
    mova a0.x, r0.y
    dp4 o3.x, v1, c0[a0.x]
    mova a0.x, r1.y
    dp4 o3.y, v1, c0[a0.x]
    mova a0.xy, r1.zwzw
    dp4 o4.y, v1, c0[a0.y]
    dp4 o4.x, v1, c0[a0.x]
    mov o0, v0
    mova a0.xy, r0.zwzw
    mov o2, c0[a0.y]
    mov o1, c0[a0.x]
    mov o5.zw, c193.xyyz

// approximately 22 instruction slots used
#endif

extern const BYTE pBinary_VBatchTexTGTexTGCxform[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
    192,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0, 192,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5, 192,   0, 
     15, 160, 102, 102,   6,  64, 
     51,  51, 131,  64, 205, 204, 
    204,  61, 205, 204, 140,  63, 
     81,   0,   0,   5, 193,   0, 
     15, 160, 143,   2, 255,  68, 
      0,   0,   0,   0,   0,   0, 
    128,  63,   0,   0,   0,   0, 
     81,   0,   0,   5, 194,   0, 
     15, 160, 102, 102,  70,  64, 
     51,  51, 163,  64,  51,  51, 
    195,  64,  51,  51, 227,  64, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   2,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      2, 128,   3,   0,   3, 224, 
     31,   0,   0,   2,   5,   0, 
      3, 128,   4,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   5,   0,  15, 224, 
      1,   0,   0,   2,   0,   0, 
      1, 128, 193,   0,   0, 160, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   0,   0, 170, 144, 
      0,   0,   0, 128, 192,   0, 
    228, 160,  19,   0,   0,   2, 
      1,   0,  15, 128,   0,   0, 
    228, 128,   2,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   1,   0, 228, 129, 
      4,   0,   0,   4,   1,   0, 
     15, 128,   0,   0, 170, 144, 
    193,   0,   0, 160,   1,   0, 
     84, 129,   2,   0,   0,   3, 
      1,   0,  15, 128,   1,   0, 
    228, 128, 194,   0, 228, 160, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   5,   0, 
      1, 224,   1,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,  46,   0,   0,   2, 
      0,   0,   1, 176,   1,   0, 
      0, 128,   9,   0,   0,   4, 
      5,   0,   2, 224,   1,   0, 
    228, 144,   0,  32, 228, 160, 
      0,   0,   0, 176,  46,   0, 
      0,   2,   0,   0,   1, 176, 
      0,   0,  85, 128,   9,   0, 
      0,   4,   3,   0,   1, 224, 
      1,   0, 228, 144,   0,  32, 
    228, 160,   0,   0,   0, 176, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   1,   0,  85, 128, 
      9,   0,   0,   4,   3,   0, 
      2, 224,   1,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,  46,   0,   0,   2, 
      0,   0,   3, 176,   1,   0, 
    238, 128,   9,   0,   0,   4, 
      4,   0,   2, 224,   1,   0, 
    228, 144,   0,  32, 228, 160, 
      0,   0,  85, 176,   9,   0, 
      0,   4,   4,   0,   1, 224, 
      1,   0, 228, 144,   0,  32, 
    228, 160,   0,   0,   0, 176, 
      1,   0,   0,   2,   0,   0, 
     15, 224,   0,   0, 228, 144, 
     46,   0,   0,   2,   0,   0, 
      3, 176,   0,   0, 238, 128, 
      1,   0,   0,   3,   2,   0, 
     15, 224,   0,  32, 228, 160, 
      0,   0,  85, 176,   1,   0, 
      0,   3,   1,   0,  15, 224, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   1,   0,   0,   2, 
      5,   0,  12, 224, 193,   0, 
    148, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 vfuniforms[96];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0      96
//

    vs_3_0
    def c96, 1020.03998, 0.100000001, 2.0999999, 0
    def c97, 1.10000002, 3.0999999, 0, 1
    dcl_color v0
    dcl_color1 v1
    dcl_position v2
    dcl_color o0
    dcl_color1 o1
    dcl_texcoord o2.xy
    dcl_position o3
    mad r0.xy, v1.z, c96.x, c96.yzzw
    frc r0.zw, r0.xyxy
    add r0.xy, r0, -r0.zwzw
    mad r0.zw, v1.z, c96.x, -r0
    add r0.zw, r0, c97.xyxy
    mova a0.xy, r0
    dp4 o2.x, v2, c0[a0.y]
    dp4 o3.x, v2, c0[a0.x]
    mova a0.xy, r0.zwzw
    dp4 o2.y, v2, c0[a0.y]
    dp4 o3.y, v2, c0[a0.x]
    mov o0, v0
    mov o1, v1
    mov o3.zw, c97

// approximately 14 instruction slots used
#endif

extern const BYTE pBinary_VBatchTexTGVertex[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
     96,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  96,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5,  96,   0, 
     15, 160, 143,   2, 127,  68, 
    205, 204, 204,  61, 102, 102, 
      6,  64,   0,   0,   0,   0, 
     81,   0,   0,   5,  97,   0, 
     15, 160, 205, 204, 140,  63, 
    102, 102,  70,  64,   0,   0, 
      0,   0,   0,   0, 128,  63, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   2,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   3,   0,  15, 224, 
      4,   0,   0,   4,   0,   0, 
      3, 128,   1,   0, 170, 144, 
     96,   0,   0, 160,  96,   0, 
    233, 160,  19,   0,   0,   2, 
      0,   0,  12, 128,   0,   0, 
     68, 128,   2,   0,   0,   3, 
      0,   0,   3, 128,   0,   0, 
    228, 128,   0,   0, 238, 129, 
      4,   0,   0,   4,   0,   0, 
     12, 128,   1,   0, 170, 144, 
     96,   0,   0, 160,   0,   0, 
    228, 129,   2,   0,   0,   3, 
      0,   0,  12, 128,   0,   0, 
    228, 128,  97,   0,  68, 160, 
     46,   0,   0,   2,   0,   0, 
      3, 176,   0,   0, 228, 128, 
      9,   0,   0,   4,   2,   0, 
      1, 224,   2,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
     85, 176,   9,   0,   0,   4, 
      3,   0,   1, 224,   2,   0, 
    228, 144,   0,  32, 228, 160, 
      0,   0,   0, 176,  46,   0, 
      0,   2,   0,   0,   3, 176, 
      0,   0, 238, 128,   9,   0, 
      0,   4,   2,   0,   2, 224, 
      2,   0, 228, 144,   0,  32, 
    228, 160,   0,   0,  85, 176, 
      9,   0,   0,   4,   3,   0, 
      2, 224,   2,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   1,   0,   0,   2, 
      0,   0,  15, 224,   0,   0, 
    228, 144,   1,   0,   0,   2, 
      1,   0,  15, 224,   1,   0, 
    228, 144,   1,   0,   0,   2, 
      3,   0,  12, 224,  97,   0, 
    228, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 vfuniforms[144];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0     144
//

    vs_3_0
    def c144, 2.0999999, 4.0999999, 0.100000001, 1.10000002
    def c145, 0, 1, 0, 0
    def c146, 1530.05994, 3.0999999, 5.0999999, 0
    dcl_color v0
    dcl_color1 v1
    dcl_position v2
    dcl_color o0
    dcl_color1 o1
    dcl_texcoord o2
    dcl_texcoord1 o3
    dcl_texcoord2 o4.xy
    dcl_position o5
    mov r0.x, c146.x
    mad r0, v1.z, r0.x, c144
    frc r1, r0
    add r0, r0, -r1
    mad r1.xy, v1.z, c146.x, -r1
    add r1.xy, r1, c146.yzzw
    mova a0.x, r0.x
    dp4 o5.x, v2, c0[a0.x]
    mova a0.xy, r1
    dp4 o4.y, v2, c0[a0.y]
    dp4 o5.y, v2, c0[a0.x]
    mova a0.x, r0.y
    dp4 o4.x, v2, c0[a0.x]
    mov o0, v0
    mov o1, v1
    mova a0.xy, r0.zwzw
    mov o3, c0[a0.y]
    mov o2, c0[a0.x]
    mov o5.zw, c145.xyxy

// approximately 19 instruction slots used
#endif

extern const BYTE pBinary_VBatchTexTGVertexCxform[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
    144,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0, 144,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5, 144,   0, 
     15, 160, 102, 102,   6,  64, 
     51,  51, 131,  64, 205, 204, 
    204,  61, 205, 204, 140,  63, 
     81,   0,   0,   5, 145,   0, 
     15, 160,   0,   0,   0,   0, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     81,   0,   0,   5, 146,   0, 
     15, 160, 235,  65, 191,  68, 
    102, 102,  70,  64,  51,  51, 
    163,  64,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   2,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   3,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      2, 128,   4,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   5,   0,  15, 224, 
      1,   0,   0,   2,   0,   0, 
      1, 128, 146,   0,   0, 160, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   1,   0, 170, 144, 
      0,   0,   0, 128, 144,   0, 
    228, 160,  19,   0,   0,   2, 
      1,   0,  15, 128,   0,   0, 
    228, 128,   2,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   1,   0, 228, 129, 
      4,   0,   0,   4,   1,   0, 
      3, 128,   1,   0, 170, 144, 
    146,   0,   0, 160,   1,   0, 
    228, 129,   2,   0,   0,   3, 
      1,   0,   3, 128,   1,   0, 
    228, 128, 146,   0, 233, 160, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   5,   0, 
      1, 224,   2,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,  46,   0,   0,   2, 
      0,   0,   3, 176,   1,   0, 
    228, 128,   9,   0,   0,   4, 
      4,   0,   2, 224,   2,   0, 
    228, 144,   0,  32, 228, 160, 
      0,   0,  85, 176,   9,   0, 
      0,   4,   5,   0,   2, 224, 
      2,   0, 228, 144,   0,  32, 
    228, 160,   0,   0,   0, 176, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,  85, 128, 
      9,   0,   0,   4,   4,   0, 
      1, 224,   2,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   1,   0,   0,   2, 
      0,   0,  15, 224,   0,   0, 
    228, 144,   1,   0,   0,   2, 
      1,   0,  15, 224,   1,   0, 
    228, 144,  46,   0,   0,   2, 
      0,   0,   3, 176,   0,   0, 
    238, 128,   1,   0,   0,   3, 
      3,   0,  15, 224,   0,  32, 
    228, 160,   0,   0,  85, 176, 
      1,   0,   0,   3,   2,   0, 
     15, 224,   0,  32, 228, 160, 
      0,   0,   0, 176,   1,   0, 
      0,   2,   5,   0,  12, 224, 
    145,   0,  68, 160, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4x4 vfmuniforms[24];
//   float4 vfuniforms[48];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfmuniforms  c0      96
//   vfuniforms   c96     48
//

    vs_3_0
    def c144, 0.100000001, 4, 2, 1.10000002
    dcl_position v0
    dcl_color1 v1
    dcl_texcoord o0.xy
    dcl_position o1
    add r0.x, c144.x, v1.x
    frc r0.y, r0.x
    add r0.x, r0.x, -r0.y
    mul r0.x, r0.x, c144.y
    mova a0.x, r0.x
    dp4 o1.x, v0, c0[a0.x]
    dp4 o1.y, v0, c1[a0.x]
    dp4 o1.z, v0, c2[a0.x]
    dp4 o1.w, v0, c3[a0.x]
    mad r0.x, v1.x, c144.z, c144.x
    frc r0.y, r0.x
    add r0.x, r0.x, -r0.y
    mad r0.y, v1.x, c144.z, -r0.y
    add r0.y, r0.y, c144.w
    mova a0.x, r0.y
    dp4 o0.y, v0, c96[a0.x]
    mova a0.x, r0.x
    dp4 o0.x, v0, c96[a0.x]

// approximately 18 instruction slots used
#endif

extern const BYTE pBinary_VBatchPosition3dTexTG[] =
{
      0,   3, 254, 255, 254, 255, 
     46,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 131,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    124,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
     96,   0,   2,   0,  80,   0, 
      0,   0,   0,   0,   0,   0, 
     96,   0,   0,   0,   2,   0, 
     96,   0,  48,   0, 130,   1, 
    108,   0,   0,   0,   0,   0, 
      0,   0, 118, 102, 109, 117, 
    110, 105, 102, 111, 114, 109, 
    115,   0,   3,   0,   3,   0, 
      4,   0,   4,   0,  24,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  48,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5, 144,   0, 
     15, 160, 205, 204, 204,  61, 
      0,   0, 128,  64,   0,   0, 
      0,  64, 205, 204, 140,  63, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 224, 
      2,   0,   0,   3,   0,   0, 
      1, 128, 144,   0,   0, 160, 
      1,   0,   0, 144,  19,   0, 
      0,   2,   0,   0,   2, 128, 
      0,   0,   0, 128,   2,   0, 
      0,   3,   0,   0,   1, 128, 
      0,   0,   0, 128,   0,   0, 
     85, 129,   5,   0,   0,   3, 
      0,   0,   1, 128,   0,   0, 
      0, 128, 144,   0,  85, 160, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   1,   0, 
      1, 224,   0,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      1,   0,   2, 224,   0,   0, 
    228, 144,   1,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   1,   0,   4, 224, 
      0,   0, 228, 144,   2,  32, 
    228, 160,   0,   0,   0, 176, 
      9,   0,   0,   4,   1,   0, 
      8, 224,   0,   0, 228, 144, 
      3,  32, 228, 160,   0,   0, 
      0, 176,   4,   0,   0,   4, 
      0,   0,   1, 128,   1,   0, 
      0, 144, 144,   0, 170, 160, 
    144,   0,   0, 160,  19,   0, 
      0,   2,   0,   0,   2, 128, 
      0,   0,   0, 128,   2,   0, 
      0,   3,   0,   0,   1, 128, 
      0,   0,   0, 128,   0,   0, 
     85, 129,   4,   0,   0,   4, 
      0,   0,   2, 128,   1,   0, 
      0, 144, 144,   0, 170, 160, 
      0,   0,  85, 129,   2,   0, 
      0,   3,   0,   0,   2, 128, 
      0,   0,  85, 128, 144,   0, 
    255, 160,  46,   0,   0,   2, 
      0,   0,   1, 176,   0,   0, 
     85, 128,   9,   0,   0,   4, 
      0,   0,   2, 224,   0,   0, 
    228, 144,  96,  32, 228, 160, 
      0,   0,   0, 176,  46,   0, 
      0,   2,   0,   0,   1, 176, 
      0,   0,   0, 128,   9,   0, 
      0,   4,   0,   0,   1, 224, 
      0,   0, 228, 144,  96,  32, 
    228, 160,   0,   0,   0, 176, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4x4 vfmuniforms[24];
//   float4 vfuniforms[48];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfmuniforms  c0      96
//   vfuniforms   c96     48
//

    vs_3_0
    def c144, 255.009995, 510.019989, 0.100000001, 4
    def c145, 1.10000002, 0, 0, 0
    dcl_color v0
    dcl_position v1
    dcl_color o0
    dcl_texcoord o1.xy
    dcl_position o2
    mad r0.xy, v0.z, c144, c144.z
    frc r0.zw, r0.xyxy
    add r0.xy, r0, -r0.zwzw
    mad r0.z, v0.z, c144.y, -r0.w
    add r0.z, r0.z, c145.x
    mova a0.x, r0.z
    dp4 o1.y, v1, c96[a0.x]
    mul r0.x, r0.x, c144.w
    mova a0.x, r0.y
    dp4 o1.x, v1, c96[a0.x]
    mova a0.x, r0.x
    dp4 o2.x, v1, c0[a0.x]
    dp4 o2.y, v1, c1[a0.x]
    dp4 o2.z, v1, c2[a0.x]
    dp4 o2.w, v1, c3[a0.x]
    mov o0, v0

// approximately 16 instruction slots used
#endif

extern const BYTE pBinary_VBatchPosition3dTexTGEAlpha[] =
{
      0,   3, 254, 255, 254, 255, 
     46,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 131,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    124,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
     96,   0,   2,   0,  80,   0, 
      0,   0,   0,   0,   0,   0, 
     96,   0,   0,   0,   2,   0, 
     96,   0,  48,   0, 130,   1, 
    108,   0,   0,   0,   0,   0, 
      0,   0, 118, 102, 109, 117, 
    110, 105, 102, 111, 114, 109, 
    115,   0,   3,   0,   3,   0, 
      4,   0,   4,   0,  24,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  48,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5, 144,   0, 
     15, 160, 143,   2, 127,  67, 
    143,   2, 255,  67, 205, 204, 
    204,  61,   0,   0, 128,  64, 
     81,   0,   0,   5, 145,   0, 
     15, 160, 205, 204, 140,  63, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 224, 
      4,   0,   0,   4,   0,   0, 
      3, 128,   0,   0, 170, 144, 
    144,   0, 228, 160, 144,   0, 
    170, 160,  19,   0,   0,   2, 
      0,   0,  12, 128,   0,   0, 
     68, 128,   2,   0,   0,   3, 
      0,   0,   3, 128,   0,   0, 
    228, 128,   0,   0, 238, 129, 
      4,   0,   0,   4,   0,   0, 
      4, 128,   0,   0, 170, 144, 
    144,   0,  85, 160,   0,   0, 
    255, 129,   2,   0,   0,   3, 
      0,   0,   4, 128,   0,   0, 
    170, 128, 145,   0,   0, 160, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0, 170, 128, 
      9,   0,   0,   4,   1,   0, 
      2, 224,   1,   0, 228, 144, 
     96,  32, 228, 160,   0,   0, 
      0, 176,   5,   0,   0,   3, 
      0,   0,   1, 128,   0,   0, 
      0, 128, 144,   0, 255, 160, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,  85, 128, 
      9,   0,   0,   4,   1,   0, 
      1, 224,   1,   0, 228, 144, 
     96,  32, 228, 160,   0,   0, 
      0, 176,  46,   0,   0,   2, 
      0,   0,   1, 176,   0,   0, 
      0, 128,   9,   0,   0,   4, 
      2,   0,   1, 224,   1,   0, 
    228, 144,   0,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   2,   0,   2, 224, 
      1,   0, 228, 144,   1,  32, 
    228, 160,   0,   0,   0, 176, 
      9,   0,   0,   4,   2,   0, 
      4, 224,   1,   0, 228, 144, 
      2,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      2,   0,   8, 224,   1,   0, 
    228, 144,   3,  32, 228, 160, 
      0,   0,   0, 176,   1,   0, 
      0,   2,   0,   0,  15, 224, 
      0,   0, 228, 144, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4x4 vfmuniforms[24];
//   float4 vfuniforms[96];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfmuniforms  c0      96
//   vfuniforms   c96     96
//

    vs_3_0
    def c192, 0.100000001, 4, 2.0999999, 1.10000002
    def c193, 3.0999999, 0, 0, 0
    dcl_position v0
    dcl_color1 v1
    dcl_texcoord o0
    dcl_texcoord1 o1
    dcl_texcoord2 o2.xy
    dcl_position o3
    add r0.x, c192.x, v1.x
    frc r0.y, r0.x
    add r0.x, r0.x, -r0.y
    mul r0.x, r0.x, c192.y
    mova a0.x, r0.x
    dp4 o3.x, v0, c0[a0.x]
    dp4 o3.y, v0, c1[a0.x]
    dp4 o3.z, v0, c2[a0.x]
    dp4 o3.w, v0, c3[a0.x]
    mad r0.xyz, v1.x, c192.y, c192.zxww
    frc r1.xyz, r0
    add r0.xyz, r0, -r1
    mad r0.w, v1.x, c192.y, -r1.x
    add r0.w, r0.w, c193.x
    mova a0.x, r0.w
    dp4 o2.y, v0, c96[a0.x]
    mova a0.x, r0.x
    dp4 o2.x, v0, c96[a0.x]
    mova a0.xy, r0.yzzw
    mov o1, c96[a0.y]
    mov o0, c96[a0.x]

// approximately 21 instruction slots used
#endif

extern const BYTE pBinary_VBatchPosition3dTexTGCxform[] =
{
      0,   3, 254, 255, 254, 255, 
     46,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 131,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    124,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
     96,   0,   2,   0,  80,   0, 
      0,   0,   0,   0,   0,   0, 
     96,   0,   0,   0,   2,   0, 
     96,   0,  96,   0, 130,   1, 
    108,   0,   0,   0,   0,   0, 
      0,   0, 118, 102, 109, 117, 
    110, 105, 102, 111, 114, 109, 
    115,   0,   3,   0,   3,   0, 
      4,   0,   4,   0,  24,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  96,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5, 192,   0, 
     15, 160, 205, 204, 204,  61, 
      0,   0, 128,  64, 102, 102, 
      6,  64, 205, 204, 140,  63, 
     81,   0,   0,   5, 193,   0, 
     15, 160, 102, 102,  70,  64, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      2, 128,   2,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   3,   0,  15, 224, 
      2,   0,   0,   3,   0,   0, 
      1, 128, 192,   0,   0, 160, 
      1,   0,   0, 144,  19,   0, 
      0,   2,   0,   0,   2, 128, 
      0,   0,   0, 128,   2,   0, 
      0,   3,   0,   0,   1, 128, 
      0,   0,   0, 128,   0,   0, 
     85, 129,   5,   0,   0,   3, 
      0,   0,   1, 128,   0,   0, 
      0, 128, 192,   0,  85, 160, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   3,   0, 
      1, 224,   0,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      3,   0,   2, 224,   0,   0, 
    228, 144,   1,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   3,   0,   4, 224, 
      0,   0, 228, 144,   2,  32, 
    228, 160,   0,   0,   0, 176, 
      9,   0,   0,   4,   3,   0, 
      8, 224,   0,   0, 228, 144, 
      3,  32, 228, 160,   0,   0, 
      0, 176,   4,   0,   0,   4, 
      0,   0,   7, 128,   1,   0, 
      0, 144, 192,   0,  85, 160, 
    192,   0, 242, 160,  19,   0, 
      0,   2,   1,   0,   7, 128, 
      0,   0, 228, 128,   2,   0, 
      0,   3,   0,   0,   7, 128, 
      0,   0, 228, 128,   1,   0, 
    228, 129,   4,   0,   0,   4, 
      0,   0,   8, 128,   1,   0, 
      0, 144, 192,   0,  85, 160, 
      1,   0,   0, 129,   2,   0, 
      0,   3,   0,   0,   8, 128, 
      0,   0, 255, 128, 193,   0, 
      0, 160,  46,   0,   0,   2, 
      0,   0,   1, 176,   0,   0, 
    255, 128,   9,   0,   0,   4, 
      2,   0,   2, 224,   0,   0, 
    228, 144,  96,  32, 228, 160, 
      0,   0,   0, 176,  46,   0, 
      0,   2,   0,   0,   1, 176, 
      0,   0,   0, 128,   9,   0, 
      0,   4,   2,   0,   1, 224, 
      0,   0, 228, 144,  96,  32, 
    228, 160,   0,   0,   0, 176, 
     46,   0,   0,   2,   0,   0, 
      3, 176,   0,   0, 233, 128, 
      1,   0,   0,   3,   1,   0, 
     15, 224,  96,  32, 228, 160, 
      0,   0,  85, 176,   1,   0, 
      0,   3,   0,   0,  15, 224, 
     96,  32, 228, 160,   0,   0, 
      0, 176, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4x4 vfmuniforms[24];
//   float4 vfuniforms[96];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfmuniforms  c0      96
//   vfuniforms   c96     96
//

    vs_3_0
    def c192, 255.009995, 1020.03998, 4, 3.0999999
    def c193, 0.100000001, 2.0999999, 1.10000002, 0
    dcl_color v0
    dcl_position v1
    dcl_color o0
    dcl_texcoord o1
    dcl_texcoord1 o2
    dcl_texcoord2 o3.xy
    dcl_position o4
    mov r0.xy, c192
    mad r0, v0.z, r0.xyyy, c193.xyxz
    frc r1, r0
    add r0, r0, -r1
    mad r1.x, v0.z, c192.y, -r1.y
    add r1.x, r1.x, c192.w
    mova a0.x, r1.x
    dp4 o3.y, v1, c96[a0.x]
    mul r0.x, r0.x, c192.z
    mova a0.x, r0.x
    dp4 o4.x, v1, c0[a0.x]
    dp4 o4.y, v1, c1[a0.x]
    dp4 o4.z, v1, c2[a0.x]
    dp4 o4.w, v1, c3[a0.x]
    mova a0.x, r0.y
    dp4 o3.x, v1, c96[a0.x]
    mov o0, v0
    mova a0.xy, r0.zwzw
    mov o2, c96[a0.y]
    mov o1, c96[a0.x]

// approximately 20 instruction slots used
#endif

extern const BYTE pBinary_VBatchPosition3dTexTGCxformEAlpha[] =
{
      0,   3, 254, 255, 254, 255, 
     46,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 131,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    124,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
     96,   0,   2,   0,  80,   0, 
      0,   0,   0,   0,   0,   0, 
     96,   0,   0,   0,   2,   0, 
     96,   0,  96,   0, 130,   1, 
    108,   0,   0,   0,   0,   0, 
      0,   0, 118, 102, 109, 117, 
    110, 105, 102, 111, 114, 109, 
    115,   0,   3,   0,   3,   0, 
      4,   0,   4,   0,  24,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  96,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5, 192,   0, 
     15, 160, 143,   2, 127,  67, 
    143,   2, 127,  68,   0,   0, 
    128,  64, 102, 102,  70,  64, 
     81,   0,   0,   5, 193,   0, 
     15, 160, 205, 204, 204,  61, 
    102, 102,   6,  64, 205, 204, 
    140,  63,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   2,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      2, 128,   3,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   4,   0,  15, 224, 
      1,   0,   0,   2,   0,   0, 
      3, 128, 192,   0, 228, 160, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   0,   0, 170, 144, 
      0,   0,  84, 128, 193,   0, 
    132, 160,  19,   0,   0,   2, 
      1,   0,  15, 128,   0,   0, 
    228, 128,   2,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   1,   0, 228, 129, 
      4,   0,   0,   4,   1,   0, 
      1, 128,   0,   0, 170, 144, 
    192,   0,  85, 160,   1,   0, 
     85, 129,   2,   0,   0,   3, 
      1,   0,   1, 128,   1,   0, 
      0, 128, 192,   0, 255, 160, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   1,   0,   0, 128, 
      9,   0,   0,   4,   3,   0, 
      2, 224,   1,   0, 228, 144, 
     96,  32, 228, 160,   0,   0, 
      0, 176,   5,   0,   0,   3, 
      0,   0,   1, 128,   0,   0, 
      0, 128, 192,   0, 170, 160, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   4,   0, 
      1, 224,   1,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      4,   0,   2, 224,   1,   0, 
    228, 144,   1,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   4,   0,   4, 224, 
      1,   0, 228, 144,   2,  32, 
    228, 160,   0,   0,   0, 176, 
      9,   0,   0,   4,   4,   0, 
      8, 224,   1,   0, 228, 144, 
      3,  32, 228, 160,   0,   0, 
      0, 176,  46,   0,   0,   2, 
      0,   0,   1, 176,   0,   0, 
     85, 128,   9,   0,   0,   4, 
      3,   0,   1, 224,   1,   0, 
    228, 144,  96,  32, 228, 160, 
      0,   0,   0, 176,   1,   0, 
      0,   2,   0,   0,  15, 224, 
      0,   0, 228, 144,  46,   0, 
      0,   2,   0,   0,   3, 176, 
      0,   0, 238, 128,   1,   0, 
      0,   3,   2,   0,  15, 224, 
     96,  32, 228, 160,   0,   0, 
     85, 176,   1,   0,   0,   3, 
      1,   0,  15, 224,  96,  32, 
    228, 160,   0,   0,   0, 176, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4x4 vfmuniforms[24];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfmuniforms  c0      96
//

    vs_3_0
    def c96, 0.100000001, 4, 0, 0
    dcl_color v0
    dcl_position v1
    dcl_color2 v2
    dcl_color o0
    dcl_position o1
    add r0.x, c96.x, v2.x
    frc r0.y, r0.x
    add r0.x, r0.x, -r0.y
    mul r0.x, r0.x, c96.y
    mova a0.x, r0.x
    dp4 o1.x, v1, c0[a0.x]
    dp4 o1.y, v1, c1[a0.x]
    dp4 o1.z, v1, c2[a0.x]
    dp4 o1.w, v1, c3[a0.x]
    mov o0, v0

// approximately 10 instruction slots used
#endif

extern const BYTE pBinary_VBatchPosition3dVertex[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
     96,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 109, 117, 110, 105, 
    102, 111, 114, 109, 115,   0, 
      3,   0,   3,   0,   4,   0, 
      4,   0,  24,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5,  96,   0, 
     15, 160, 205, 204, 204,  61, 
      0,   0, 128,  64,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      2, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 224, 
      2,   0,   0,   3,   0,   0, 
      1, 128,  96,   0,   0, 160, 
      2,   0,   0, 144,  19,   0, 
      0,   2,   0,   0,   2, 128, 
      0,   0,   0, 128,   2,   0, 
      0,   3,   0,   0,   1, 128, 
      0,   0,   0, 128,   0,   0, 
     85, 129,   5,   0,   0,   3, 
      0,   0,   1, 128,   0,   0, 
      0, 128,  96,   0,  85, 160, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   1,   0, 
      1, 224,   1,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      1,   0,   2, 224,   1,   0, 
    228, 144,   1,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   1,   0,   4, 224, 
      1,   0, 228, 144,   2,  32, 
    228, 160,   0,   0,   0, 176, 
      9,   0,   0,   4,   1,   0, 
      8, 224,   1,   0, 228, 144, 
      3,  32, 228, 160,   0,   0, 
      0, 176,   1,   0,   0,   2, 
      0,   0,  15, 224,   0,   0, 
    228, 144, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4x4 vfmuniforms[24];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfmuniforms  c0      96
//

    vs_3_0
    def c96, 255.009995, 0.100000001, 4, 0
    dcl_color v0
    dcl_color1 v1
    dcl_position v2
    dcl_color o0
    dcl_color1 o1
    dcl_position o2
    mad r0.x, v1.z, c96.x, c96.y
    frc r0.y, r0.x
    add r0.x, r0.x, -r0.y
    mul r0.x, r0.x, c96.z
    mova a0.x, r0.x
    dp4 o2.x, v2, c0[a0.x]
    dp4 o2.y, v2, c1[a0.x]
    dp4 o2.z, v2, c2[a0.x]
    dp4 o2.w, v2, c3[a0.x]
    mov o0, v0
    mov o1, v1

// approximately 11 instruction slots used
#endif

extern const BYTE pBinary_VBatchPosition3dVertexEAlpha[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
     96,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 109, 117, 110, 105, 
    102, 111, 114, 109, 115,   0, 
      3,   0,   3,   0,   4,   0, 
      4,   0,  24,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5,  96,   0, 
     15, 160, 143,   2, 127,  67, 
    205, 204, 204,  61,   0,   0, 
    128,  64,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 224, 
      4,   0,   0,   4,   0,   0, 
      1, 128,   1,   0, 170, 144, 
     96,   0,   0, 160,  96,   0, 
     85, 160,  19,   0,   0,   2, 
      0,   0,   2, 128,   0,   0, 
      0, 128,   2,   0,   0,   3, 
      0,   0,   1, 128,   0,   0, 
      0, 128,   0,   0,  85, 129, 
      5,   0,   0,   3,   0,   0, 
      1, 128,   0,   0,   0, 128, 
     96,   0, 170, 160,  46,   0, 
      0,   2,   0,   0,   1, 176, 
      0,   0,   0, 128,   9,   0, 
      0,   4,   2,   0,   1, 224, 
      2,   0, 228, 144,   0,  32, 
    228, 160,   0,   0,   0, 176, 
      9,   0,   0,   4,   2,   0, 
      2, 224,   2,   0, 228, 144, 
      1,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      2,   0,   4, 224,   2,   0, 
    228, 144,   2,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   2,   0,   8, 224, 
      2,   0, 228, 144,   3,  32, 
    228, 160,   0,   0,   0, 176, 
      1,   0,   0,   2,   0,   0, 
     15, 224,   0,   0, 228, 144, 
      1,   0,   0,   2,   1,   0, 
     15, 224,   1,   0, 228, 144, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4x4 vfmuniforms[24];
//   float4 vfuniforms[48];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfmuniforms  c0      96
//   vfuniforms   c96     48
//

    vs_3_0
    def c144, 0.100000001, 4, 2, 1.10000002
    dcl_color v0
    dcl_position v1
    dcl_color2 v2
    dcl_color o0
    dcl_texcoord o1
    dcl_texcoord1 o2
    dcl_position o3
    add r0.x, c144.x, v2.x
    frc r0.y, r0.x
    add r0.x, r0.x, -r0.y
    mul r0.x, r0.x, c144.y
    mova a0.x, r0.x
    dp4 o3.x, v1, c0[a0.x]
    dp4 o3.y, v1, c1[a0.x]
    dp4 o3.z, v1, c2[a0.x]
    dp4 o3.w, v1, c3[a0.x]
    mov o0, v0
    mad r0.xy, v2.x, c144.z, c144.xwzw
    frc r0.zw, r0.xyxy
    add r0.xy, r0, -r0.zwzw
    mova a0.xy, r0
    mov o2, c96[a0.y]
    mov o1, c96[a0.x]

// approximately 16 instruction slots used
#endif

extern const BYTE pBinary_VBatchPosition3dVertexCxform[] =
{
      0,   3, 254, 255, 254, 255, 
     46,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 131,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    124,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
     96,   0,   2,   0,  80,   0, 
      0,   0,   0,   0,   0,   0, 
     96,   0,   0,   0,   2,   0, 
     96,   0,  48,   0, 130,   1, 
    108,   0,   0,   0,   0,   0, 
      0,   0, 118, 102, 109, 117, 
    110, 105, 102, 111, 114, 109, 
    115,   0,   3,   0,   3,   0, 
      4,   0,   4,   0,  24,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  48,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5, 144,   0, 
     15, 160, 205, 204, 204,  61, 
      0,   0, 128,  64,   0,   0, 
      0,  64, 205, 204, 140,  63, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      2, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   2,   0,  15, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   3,   0,  15, 224, 
      2,   0,   0,   3,   0,   0, 
      1, 128, 144,   0,   0, 160, 
      2,   0,   0, 144,  19,   0, 
      0,   2,   0,   0,   2, 128, 
      0,   0,   0, 128,   2,   0, 
      0,   3,   0,   0,   1, 128, 
      0,   0,   0, 128,   0,   0, 
     85, 129,   5,   0,   0,   3, 
      0,   0,   1, 128,   0,   0, 
      0, 128, 144,   0,  85, 160, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   3,   0, 
      1, 224,   1,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      3,   0,   2, 224,   1,   0, 
    228, 144,   1,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   3,   0,   4, 224, 
      1,   0, 228, 144,   2,  32, 
    228, 160,   0,   0,   0, 176, 
      9,   0,   0,   4,   3,   0, 
      8, 224,   1,   0, 228, 144, 
      3,  32, 228, 160,   0,   0, 
      0, 176,   1,   0,   0,   2, 
      0,   0,  15, 224,   0,   0, 
    228, 144,   4,   0,   0,   4, 
      0,   0,   3, 128,   2,   0, 
      0, 144, 144,   0, 170, 160, 
    144,   0, 236, 160,  19,   0, 
      0,   2,   0,   0,  12, 128, 
      0,   0,  68, 128,   2,   0, 
      0,   3,   0,   0,   3, 128, 
      0,   0, 228, 128,   0,   0, 
    238, 129,  46,   0,   0,   2, 
      0,   0,   3, 176,   0,   0, 
    228, 128,   1,   0,   0,   3, 
      2,   0,  15, 224,  96,  32, 
    228, 160,   0,   0,  85, 176, 
      1,   0,   0,   3,   1,   0, 
     15, 224,  96,  32, 228, 160, 
      0,   0,   0, 176, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4x4 vfmuniforms[24];
//   float4 vfuniforms[48];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfmuniforms  c0      96
//   vfuniforms   c96     48
//

    vs_3_0
    def c144, 255.009995, 510.019989, 0.100000001, 1.10000002
    def c145, 4, 0, 0, 0
    dcl_color v0
    dcl_color1 v1
    dcl_position v2
    dcl_color o0
    dcl_color1 o1
    dcl_texcoord o2
    dcl_texcoord1 o3
    dcl_position o4
    mad r0.xyz, v1.z, c144.xyyw, c144.zzww
    frc r1.xyz, r0
    add r0.xyz, r0, -r1
    mul r0.x, r0.x, c145.x
    mova a0.x, r0.x
    dp4 o4.x, v2, c0[a0.x]
    dp4 o4.y, v2, c1[a0.x]
    dp4 o4.z, v2, c2[a0.x]
    dp4 o4.w, v2, c3[a0.x]
    mov o0, v0
    mov o1, v1
    mova a0.xy, r0.yzzw
    mov o3, c96[a0.y]
    mov o2, c96[a0.x]

// approximately 14 instruction slots used
#endif

extern const BYTE pBinary_VBatchPosition3dVertexCxformEAlpha[] =
{
      0,   3, 254, 255, 254, 255, 
     46,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 131,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    124,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
     96,   0,   2,   0,  80,   0, 
      0,   0,   0,   0,   0,   0, 
     96,   0,   0,   0,   2,   0, 
     96,   0,  48,   0, 130,   1, 
    108,   0,   0,   0,   0,   0, 
      0,   0, 118, 102, 109, 117, 
    110, 105, 102, 111, 114, 109, 
    115,   0,   3,   0,   3,   0, 
      4,   0,   4,   0,  24,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  48,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5, 144,   0, 
     15, 160, 143,   2, 127,  67, 
    143,   2, 255,  67, 205, 204, 
    204,  61, 205, 204, 140,  63, 
     81,   0,   0,   5, 145,   0, 
     15, 160,   0,   0, 128,  64, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   2,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   3,   0,  15, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   4,   0,  15, 224, 
      4,   0,   0,   4,   0,   0, 
      7, 128,   1,   0, 170, 144, 
    144,   0, 212, 160, 144,   0, 
    250, 160,  19,   0,   0,   2, 
      1,   0,   7, 128,   0,   0, 
    228, 128,   2,   0,   0,   3, 
      0,   0,   7, 128,   0,   0, 
    228, 128,   1,   0, 228, 129, 
      5,   0,   0,   3,   0,   0, 
      1, 128,   0,   0,   0, 128, 
    145,   0,   0, 160,  46,   0, 
      0,   2,   0,   0,   1, 176, 
      0,   0,   0, 128,   9,   0, 
      0,   4,   4,   0,   1, 224, 
      2,   0, 228, 144,   0,  32, 
    228, 160,   0,   0,   0, 176, 
      9,   0,   0,   4,   4,   0, 
      2, 224,   2,   0, 228, 144, 
      1,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      4,   0,   4, 224,   2,   0, 
    228, 144,   2,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   4,   0,   8, 224, 
      2,   0, 228, 144,   3,  32, 
    228, 160,   0,   0,   0, 176, 
      1,   0,   0,   2,   0,   0, 
     15, 224,   0,   0, 228, 144, 
      1,   0,   0,   2,   1,   0, 
     15, 224,   1,   0, 228, 144, 
     46,   0,   0,   2,   0,   0, 
      3, 176,   0,   0, 233, 128, 
      1,   0,   0,   3,   3,   0, 
     15, 224,  96,  32, 228, 160, 
      0,   0,  85, 176,   1,   0, 
      0,   3,   2,   0,  15, 224, 
     96,  32, 228, 160,   0,   0, 
      0, 176, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4x4 vfmuniforms[24];
//   float4 vfuniforms[96];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfmuniforms  c0      96
//   vfuniforms   c96     96
//

    vs_3_0
    def c192, 255.009995, 1020.03998, 0.100000001, 4
    def c193, 1.10000002, 2.0999999, 3.0999999, 0
    dcl_color v0
    dcl_position v1
    dcl_color o0
    dcl_texcoord o1.xy
    dcl_texcoord1 o2.xy
    dcl_position o3
    mad r0.xy, v0.z, c192, c192.z
    frc r0.zw, r0.xyxy
    add r0.xy, r0, -r0.zwzw
    mad r0.z, v0.z, c192.y, -r0.w
    add r1.xyz, r0.z, c193
    mul r0.x, r0.x, c192.w
    mova a0.x, r0.y
    dp4 o1.x, v1, c96[a0.x]
    mova a0.x, r0.x
    dp4 o3.x, v1, c0[a0.x]
    dp4 o3.y, v1, c1[a0.x]
    dp4 o3.z, v1, c2[a0.x]
    dp4 o3.w, v1, c3[a0.x]
    mova a0.x, r1.x
    dp4 o1.y, v1, c96[a0.x]
    mova a0.xy, r1.yzzw
    dp4 o2.y, v1, c96[a0.y]
    dp4 o2.x, v1, c96[a0.x]
    mov o0, v0

// approximately 19 instruction slots used
#endif

extern const BYTE pBinary_VBatchPosition3dTexTGTexTG[] =
{
      0,   3, 254, 255, 254, 255, 
     46,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 131,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    124,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
     96,   0,   2,   0,  80,   0, 
      0,   0,   0,   0,   0,   0, 
     96,   0,   0,   0,   2,   0, 
     96,   0,  96,   0, 130,   1, 
    108,   0,   0,   0,   0,   0, 
      0,   0, 118, 102, 109, 117, 
    110, 105, 102, 111, 114, 109, 
    115,   0,   3,   0,   3,   0, 
      4,   0,   4,   0,  24,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  96,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5, 192,   0, 
     15, 160, 143,   2, 127,  67, 
    143,   2, 127,  68, 205, 204, 
    204,  61,   0,   0, 128,  64, 
     81,   0,   0,   5, 193,   0, 
     15, 160, 205, 204, 140,  63, 
    102, 102,   6,  64, 102, 102, 
     70,  64,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,   3, 224, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   2,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   3,   0,  15, 224, 
      4,   0,   0,   4,   0,   0, 
      3, 128,   0,   0, 170, 144, 
    192,   0, 228, 160, 192,   0, 
    170, 160,  19,   0,   0,   2, 
      0,   0,  12, 128,   0,   0, 
     68, 128,   2,   0,   0,   3, 
      0,   0,   3, 128,   0,   0, 
    228, 128,   0,   0, 238, 129, 
      4,   0,   0,   4,   0,   0, 
      4, 128,   0,   0, 170, 144, 
    192,   0,  85, 160,   0,   0, 
    255, 129,   2,   0,   0,   3, 
      1,   0,   7, 128,   0,   0, 
    170, 128, 193,   0, 228, 160, 
      5,   0,   0,   3,   0,   0, 
      1, 128,   0,   0,   0, 128, 
    192,   0, 255, 160,  46,   0, 
      0,   2,   0,   0,   1, 176, 
      0,   0,  85, 128,   9,   0, 
      0,   4,   1,   0,   1, 224, 
      1,   0, 228, 144,  96,  32, 
    228, 160,   0,   0,   0, 176, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   3,   0, 
      1, 224,   1,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      3,   0,   2, 224,   1,   0, 
    228, 144,   1,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   3,   0,   4, 224, 
      1,   0, 228, 144,   2,  32, 
    228, 160,   0,   0,   0, 176, 
      9,   0,   0,   4,   3,   0, 
      8, 224,   1,   0, 228, 144, 
      3,  32, 228, 160,   0,   0, 
      0, 176,  46,   0,   0,   2, 
      0,   0,   1, 176,   1,   0, 
      0, 128,   9,   0,   0,   4, 
      1,   0,   2, 224,   1,   0, 
    228, 144,  96,  32, 228, 160, 
      0,   0,   0, 176,  46,   0, 
      0,   2,   0,   0,   3, 176, 
      1,   0, 233, 128,   9,   0, 
      0,   4,   2,   0,   2, 224, 
      1,   0, 228, 144,  96,  32, 
    228, 160,   0,   0,  85, 176, 
      9,   0,   0,   4,   2,   0, 
      1, 224,   1,   0, 228, 144, 
     96,  32, 228, 160,   0,   0, 
      0, 176,   1,   0,   0,   2, 
      0,   0,  15, 224,   0,   0, 
    228, 144, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4x4 vfmuniforms[24];
//   float4 vfuniforms[144];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfmuniforms  c0      96
//   vfuniforms   c96    144
//

    vs_3_0
    def c240, 255.009995, 1530.05994, 4, 0
    def c241, 0.100000001, 2.0999999, 1.10000002, 0
    def c242, 3.0999999, 4.0999999, 5.0999999, 0
    dcl_color v0
    dcl_position v1
    dcl_color o0
    dcl_texcoord o1
    dcl_texcoord1 o2
    dcl_texcoord2 o3.xy
    dcl_texcoord3 o4.xy
    dcl_position o5
    mov r0.xy, c240
    mad r0, v0.z, r0.xyyy, c241.xyxz
    frc r1, r0
    add r0, r0, -r1
    mad r1.x, v0.z, c240.y, -r1.y
    add r1.xyz, r1.x, c242
    mul r0.x, r0.x, c240.z
    mova a0.x, r0.x
    dp4 o5.x, v1, c0[a0.x]
    dp4 o5.y, v1, c1[a0.x]
    dp4 o5.z, v1, c2[a0.x]
    dp4 o5.w, v1, c3[a0.x]
    mova a0.x, r0.y
    dp4 o3.x, v1, c96[a0.x]
    mova a0.x, r1.x
    dp4 o3.y, v1, c96[a0.x]
    mova a0.xy, r1.yzzw
    dp4 o4.y, v1, c96[a0.y]
    dp4 o4.x, v1, c96[a0.x]
    mov o0, v0
    mova a0.xy, r0.zwzw
    mov o2, c96[a0.y]
    mov o1, c96[a0.x]

// approximately 23 instruction slots used
#endif

extern const BYTE pBinary_VBatchPosition3dTexTGTexTGCxform[] =
{
      0,   3, 254, 255, 254, 255, 
     46,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 131,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    124,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
     96,   0,   2,   0,  80,   0, 
      0,   0,   0,   0,   0,   0, 
     96,   0,   0,   0,   2,   0, 
     96,   0, 144,   0, 130,   1, 
    108,   0,   0,   0,   0,   0, 
      0,   0, 118, 102, 109, 117, 
    110, 105, 102, 111, 114, 109, 
    115,   0,   3,   0,   3,   0, 
      4,   0,   4,   0,  24,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0, 144,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5, 240,   0, 
     15, 160, 143,   2, 127,  67, 
    235,  65, 191,  68,   0,   0, 
    128,  64,   0,   0,   0,   0, 
     81,   0,   0,   5, 241,   0, 
     15, 160, 205, 204, 204,  61, 
    102, 102,   6,  64, 205, 204, 
    140,  63,   0,   0,   0,   0, 
     81,   0,   0,   5, 242,   0, 
     15, 160, 102, 102,  70,  64, 
     51,  51, 131,  64,  51,  51, 
    163,  64,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   2,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      2, 128,   3,   0,   3, 224, 
     31,   0,   0,   2,   5,   0, 
      3, 128,   4,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   5,   0,  15, 224, 
      1,   0,   0,   2,   0,   0, 
      3, 128, 240,   0, 228, 160, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   0,   0, 170, 144, 
      0,   0,  84, 128, 241,   0, 
    132, 160,  19,   0,   0,   2, 
      1,   0,  15, 128,   0,   0, 
    228, 128,   2,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   1,   0, 228, 129, 
      4,   0,   0,   4,   1,   0, 
      1, 128,   0,   0, 170, 144, 
    240,   0,  85, 160,   1,   0, 
     85, 129,   2,   0,   0,   3, 
      1,   0,   7, 128,   1,   0, 
      0, 128, 242,   0, 228, 160, 
      5,   0,   0,   3,   0,   0, 
      1, 128,   0,   0,   0, 128, 
    240,   0, 170, 160,  46,   0, 
      0,   2,   0,   0,   1, 176, 
      0,   0,   0, 128,   9,   0, 
      0,   4,   5,   0,   1, 224, 
      1,   0, 228, 144,   0,  32, 
    228, 160,   0,   0,   0, 176, 
      9,   0,   0,   4,   5,   0, 
      2, 224,   1,   0, 228, 144, 
      1,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      5,   0,   4, 224,   1,   0, 
    228, 144,   2,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   5,   0,   8, 224, 
      1,   0, 228, 144,   3,  32, 
    228, 160,   0,   0,   0, 176, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,  85, 128, 
      9,   0,   0,   4,   3,   0, 
      1, 224,   1,   0, 228, 144, 
     96,  32, 228, 160,   0,   0, 
      0, 176,  46,   0,   0,   2, 
      0,   0,   1, 176,   1,   0, 
      0, 128,   9,   0,   0,   4, 
      3,   0,   2, 224,   1,   0, 
    228, 144,  96,  32, 228, 160, 
      0,   0,   0, 176,  46,   0, 
      0,   2,   0,   0,   3, 176, 
      1,   0, 233, 128,   9,   0, 
      0,   4,   4,   0,   2, 224, 
      1,   0, 228, 144,  96,  32, 
    228, 160,   0,   0,  85, 176, 
      9,   0,   0,   4,   4,   0, 
      1, 224,   1,   0, 228, 144, 
     96,  32, 228, 160,   0,   0, 
      0, 176,   1,   0,   0,   2, 
      0,   0,  15, 224,   0,   0, 
    228, 144,  46,   0,   0,   2, 
      0,   0,   3, 176,   0,   0, 
    238, 128,   1,   0,   0,   3, 
      2,   0,  15, 224,  96,  32, 
    228, 160,   0,   0,  85, 176, 
      1,   0,   0,   3,   1,   0, 
     15, 224,  96,  32, 228, 160, 
      0,   0,   0, 176, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4x4 vfmuniforms[24];
//   float4 vfuniforms[48];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfmuniforms  c0      96
//   vfuniforms   c96     48
//

    vs_3_0
    def c144, 255.009995, 510.019989, 0.100000001, 4
    def c145, 1.10000002, 0, 0, 0
    dcl_color v0
    dcl_color1 v1
    dcl_position v2
    dcl_color o0
    dcl_color1 o1
    dcl_texcoord o2.xy
    dcl_position o3
    mad r0.xy, v1.z, c144, c144.z
    frc r0.zw, r0.xyxy
    add r0.xy, r0, -r0.zwzw
    mad r0.z, v1.z, c144.y, -r0.w
    add r0.z, r0.z, c145.x
    mova a0.x, r0.z
    dp4 o2.y, v2, c96[a0.x]
    mul r0.x, r0.x, c144.w
    mova a0.x, r0.y
    dp4 o2.x, v2, c96[a0.x]
    mova a0.x, r0.x
    dp4 o3.x, v2, c0[a0.x]
    dp4 o3.y, v2, c1[a0.x]
    dp4 o3.z, v2, c2[a0.x]
    dp4 o3.w, v2, c3[a0.x]
    mov o0, v0
    mov o1, v1

// approximately 17 instruction slots used
#endif

extern const BYTE pBinary_VBatchPosition3dTexTGVertex[] =
{
      0,   3, 254, 255, 254, 255, 
     46,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 131,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    124,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
     96,   0,   2,   0,  80,   0, 
      0,   0,   0,   0,   0,   0, 
     96,   0,   0,   0,   2,   0, 
     96,   0,  48,   0, 130,   1, 
    108,   0,   0,   0,   0,   0, 
      0,   0, 118, 102, 109, 117, 
    110, 105, 102, 111, 114, 109, 
    115,   0,   3,   0,   3,   0, 
      4,   0,   4,   0,  24,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  48,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5, 144,   0, 
     15, 160, 143,   2, 127,  67, 
    143,   2, 255,  67, 205, 204, 
    204,  61,   0,   0, 128,  64, 
     81,   0,   0,   5, 145,   0, 
     15, 160, 205, 204, 140,  63, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   2,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   3,   0,  15, 224, 
      4,   0,   0,   4,   0,   0, 
      3, 128,   1,   0, 170, 144, 
    144,   0, 228, 160, 144,   0, 
    170, 160,  19,   0,   0,   2, 
      0,   0,  12, 128,   0,   0, 
     68, 128,   2,   0,   0,   3, 
      0,   0,   3, 128,   0,   0, 
    228, 128,   0,   0, 238, 129, 
      4,   0,   0,   4,   0,   0, 
      4, 128,   1,   0, 170, 144, 
    144,   0,  85, 160,   0,   0, 
    255, 129,   2,   0,   0,   3, 
      0,   0,   4, 128,   0,   0, 
    170, 128, 145,   0,   0, 160, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0, 170, 128, 
      9,   0,   0,   4,   2,   0, 
      2, 224,   2,   0, 228, 144, 
     96,  32, 228, 160,   0,   0, 
      0, 176,   5,   0,   0,   3, 
      0,   0,   1, 128,   0,   0, 
      0, 128, 144,   0, 255, 160, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,  85, 128, 
      9,   0,   0,   4,   2,   0, 
      1, 224,   2,   0, 228, 144, 
     96,  32, 228, 160,   0,   0, 
      0, 176,  46,   0,   0,   2, 
      0,   0,   1, 176,   0,   0, 
      0, 128,   9,   0,   0,   4, 
      3,   0,   1, 224,   2,   0, 
    228, 144,   0,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   3,   0,   2, 224, 
      2,   0, 228, 144,   1,  32, 
    228, 160,   0,   0,   0, 176, 
      9,   0,   0,   4,   3,   0, 
      4, 224,   2,   0, 228, 144, 
      2,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      3,   0,   8, 224,   2,   0, 
    228, 144,   3,  32, 228, 160, 
      0,   0,   0, 176,   1,   0, 
      0,   2,   0,   0,  15, 224, 
      0,   0, 228, 144,   1,   0, 
      0,   2,   1,   0,  15, 224, 
      1,   0, 228, 144, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4x4 vfmuniforms[24];
//   float4 vfuniforms[96];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfmuniforms  c0      96
//   vfuniforms   c96     96
//

    vs_3_0
    def c192, 255.009995, 1020.03998, 4, 3.0999999
    def c193, 0.100000001, 2.0999999, 1.10000002, 0
    dcl_color v0
    dcl_color1 v1
    dcl_position v2
    dcl_color o0
    dcl_color1 o1
    dcl_texcoord o2
    dcl_texcoord1 o3
    dcl_texcoord2 o4.xy
    dcl_position o5
    mov r0.xy, c192
    mad r0, v1.z, r0.xyyy, c193.xyxz
    frc r1, r0
    add r0, r0, -r1
    mad r1.x, v1.z, c192.y, -r1.y
    add r1.x, r1.x, c192.w
    mova a0.x, r1.x
    dp4 o4.y, v2, c96[a0.x]
    mul r0.x, r0.x, c192.z
    mova a0.x, r0.x
    dp4 o5.x, v2, c0[a0.x]
    dp4 o5.y, v2, c1[a0.x]
    dp4 o5.z, v2, c2[a0.x]
    dp4 o5.w, v2, c3[a0.x]
    mova a0.x, r0.y
    dp4 o4.x, v2, c96[a0.x]
    mov o0, v0
    mov o1, v1
    mova a0.xy, r0.zwzw
    mov o3, c96[a0.y]
    mov o2, c96[a0.x]

// approximately 21 instruction slots used
#endif

extern const BYTE pBinary_VBatchPosition3dTexTGVertexCxform[] =
{
      0,   3, 254, 255, 254, 255, 
     46,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 131,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    124,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
     96,   0,   2,   0,  80,   0, 
      0,   0,   0,   0,   0,   0, 
     96,   0,   0,   0,   2,   0, 
     96,   0,  96,   0, 130,   1, 
    108,   0,   0,   0,   0,   0, 
      0,   0, 118, 102, 109, 117, 
    110, 105, 102, 111, 114, 109, 
    115,   0,   3,   0,   3,   0, 
      4,   0,   4,   0,  24,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  96,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5, 192,   0, 
     15, 160, 143,   2, 127,  67, 
    143,   2, 127,  68,   0,   0, 
    128,  64, 102, 102,  70,  64, 
     81,   0,   0,   5, 193,   0, 
     15, 160, 205, 204, 204,  61, 
    102, 102,   6,  64, 205, 204, 
    140,  63,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   2,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   3,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      2, 128,   4,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   5,   0,  15, 224, 
      1,   0,   0,   2,   0,   0, 
      3, 128, 192,   0, 228, 160, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   1,   0, 170, 144, 
      0,   0,  84, 128, 193,   0, 
    132, 160,  19,   0,   0,   2, 
      1,   0,  15, 128,   0,   0, 
    228, 128,   2,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   1,   0, 228, 129, 
      4,   0,   0,   4,   1,   0, 
      1, 128,   1,   0, 170, 144, 
    192,   0,  85, 160,   1,   0, 
     85, 129,   2,   0,   0,   3, 
      1,   0,   1, 128,   1,   0, 
      0, 128, 192,   0, 255, 160, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   1,   0,   0, 128, 
      9,   0,   0,   4,   4,   0, 
      2, 224,   2,   0, 228, 144, 
     96,  32, 228, 160,   0,   0, 
      0, 176,   5,   0,   0,   3, 
      0,   0,   1, 128,   0,   0, 
      0, 128, 192,   0, 170, 160, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   5,   0, 
      1, 224,   2,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      5,   0,   2, 224,   2,   0, 
    228, 144,   1,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   5,   0,   4, 224, 
      2,   0, 228, 144,   2,  32, 
    228, 160,   0,   0,   0, 176, 
      9,   0,   0,   4,   5,   0, 
      8, 224,   2,   0, 228, 144, 
      3,  32, 228, 160,   0,   0, 
      0, 176,  46,   0,   0,   2, 
      0,   0,   1, 176,   0,   0, 
     85, 128,   9,   0,   0,   4, 
      4,   0,   1, 224,   2,   0, 
    228, 144,  96,  32, 228, 160, 
      0,   0,   0, 176,   1,   0, 
      0,   2,   0,   0,  15, 224, 
      0,   0, 228, 144,   1,   0, 
      0,   2,   1,   0,  15, 224, 
      1,   0, 228, 144,  46,   0, 
      0,   2,   0,   0,   3, 176, 
      0,   0, 238, 128,   1,   0, 
      0,   3,   3,   0,  15, 224, 
     96,  32, 228, 160,   0,   0, 
     85, 176,   1,   0,   0,   3, 
      2,   0,  15, 224,  96,  32, 
    228, 160,   0,   0,   0, 176, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 vfuniforms[96];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0      96
//

    vs_3_0
    def c96, 1.10000002, 3.0999999, 0, 1
    def c97, 4, 0.100000001, 2.0999999, 0
    dcl_color v0
    dcl_position v1
    dcl_color1 v2
    dcl_color o0
    dcl_texcoord o1.xy
    dcl_position o2
    mad r0.xy, v2.x, c97.x, c97.yzzw
    frc r0.zw, r0.xyxy
    add r0.xy, r0, -r0.zwzw
    mad r0.zw, v2.x, c97.x, -r0
    add r0.zw, r0, c96.xyxy
    mova a0.xy, r0
    dp4 o1.x, v1, c0[a0.y]
    dp4 o2.x, v1, c0[a0.x]
    mova a0.xy, r0.zwzw
    dp4 o1.y, v1, c0[a0.y]
    dp4 o2.y, v1, c0[a0.x]
    mov o0, v0
    mov o2.zw, c96

// approximately 13 instruction slots used
#endif

extern const BYTE pBinary_VInstancedTexTGEAlpha[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
     96,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  96,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5,  96,   0, 
     15, 160, 205, 204, 140,  63, 
    102, 102,  70,  64,   0,   0, 
      0,   0,   0,   0, 128,  63, 
     81,   0,   0,   5,  97,   0, 
     15, 160,   0,   0, 128,  64, 
    205, 204, 204,  61, 102, 102, 
      6,  64,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 224, 
      4,   0,   0,   4,   0,   0, 
      3, 128,   2,   0,   0, 144, 
     97,   0,   0, 160,  97,   0, 
    233, 160,  19,   0,   0,   2, 
      0,   0,  12, 128,   0,   0, 
     68, 128,   2,   0,   0,   3, 
      0,   0,   3, 128,   0,   0, 
    228, 128,   0,   0, 238, 129, 
      4,   0,   0,   4,   0,   0, 
     12, 128,   2,   0,   0, 144, 
     97,   0,   0, 160,   0,   0, 
    228, 129,   2,   0,   0,   3, 
      0,   0,  12, 128,   0,   0, 
    228, 128,  96,   0,  68, 160, 
     46,   0,   0,   2,   0,   0, 
      3, 176,   0,   0, 228, 128, 
      9,   0,   0,   4,   1,   0, 
      1, 224,   1,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
     85, 176,   9,   0,   0,   4, 
      2,   0,   1, 224,   1,   0, 
    228, 144,   0,  32, 228, 160, 
      0,   0,   0, 176,  46,   0, 
      0,   2,   0,   0,   3, 176, 
      0,   0, 238, 128,   9,   0, 
      0,   4,   1,   0,   2, 224, 
      1,   0, 228, 144,   0,  32, 
    228, 160,   0,   0,  85, 176, 
      9,   0,   0,   4,   2,   0, 
      2, 224,   1,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   1,   0,   0,   2, 
      0,   0,  15, 224,   0,   0, 
    228, 144,   1,   0,   0,   2, 
      2,   0,  12, 224,  96,   0, 
    228, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 vfuniforms[144];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0     144
//

    vs_3_0
    def c144, 2.0999999, 4.0999999, 0.100000001, 1.10000002
    def c145, 6, 3.0999999, 5.0999999, 0
    def c146, 0, 1, 0, 0
    dcl_color v0
    dcl_position v1
    dcl_color1 v2
    dcl_color o0
    dcl_texcoord o1
    dcl_texcoord1 o2
    dcl_texcoord2 o3.xy
    dcl_position o4
    mov r0.x, c145.x
    mad r0, v2.x, r0.x, c144
    frc r1, r0
    add r0, r0, -r1
    mad r1.xy, v2.x, c145.x, -r1
    add r1.xy, r1, c145.yzzw
    mova a0.x, r0.x
    dp4 o4.x, v1, c0[a0.x]
    mova a0.xy, r1
    dp4 o3.y, v1, c0[a0.y]
    dp4 o4.y, v1, c0[a0.x]
    mova a0.x, r0.y
    dp4 o3.x, v1, c0[a0.x]
    mov o0, v0
    mova a0.xy, r0.zwzw
    mov o2, c0[a0.y]
    mov o1, c0[a0.x]
    mov o4.zw, c146.xyxy

// approximately 18 instruction slots used
#endif

extern const BYTE pBinary_VInstancedTexTGCxformEAlpha[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
    144,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0, 144,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5, 144,   0, 
     15, 160, 102, 102,   6,  64, 
     51,  51, 131,  64, 205, 204, 
    204,  61, 205, 204, 140,  63, 
     81,   0,   0,   5, 145,   0, 
     15, 160,   0,   0, 192,  64, 
    102, 102,  70,  64,  51,  51, 
    163,  64,   0,   0,   0,   0, 
     81,   0,   0,   5, 146,   0, 
     15, 160,   0,   0,   0,   0, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   2,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      2, 128,   3,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   4,   0,  15, 224, 
      1,   0,   0,   2,   0,   0, 
      1, 128, 145,   0,   0, 160, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   2,   0,   0, 144, 
      0,   0,   0, 128, 144,   0, 
    228, 160,  19,   0,   0,   2, 
      1,   0,  15, 128,   0,   0, 
    228, 128,   2,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   1,   0, 228, 129, 
      4,   0,   0,   4,   1,   0, 
      3, 128,   2,   0,   0, 144, 
    145,   0,   0, 160,   1,   0, 
    228, 129,   2,   0,   0,   3, 
      1,   0,   3, 128,   1,   0, 
    228, 128, 145,   0, 233, 160, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   4,   0, 
      1, 224,   1,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,  46,   0,   0,   2, 
      0,   0,   3, 176,   1,   0, 
    228, 128,   9,   0,   0,   4, 
      3,   0,   2, 224,   1,   0, 
    228, 144,   0,  32, 228, 160, 
      0,   0,  85, 176,   9,   0, 
      0,   4,   4,   0,   2, 224, 
      1,   0, 228, 144,   0,  32, 
    228, 160,   0,   0,   0, 176, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,  85, 128, 
      9,   0,   0,   4,   3,   0, 
      1, 224,   1,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   1,   0,   0,   2, 
      0,   0,  15, 224,   0,   0, 
    228, 144,  46,   0,   0,   2, 
      0,   0,   3, 176,   0,   0, 
    238, 128,   1,   0,   0,   3, 
      2,   0,  15, 224,   0,  32, 
    228, 160,   0,   0,  85, 176, 
      1,   0,   0,   3,   1,   0, 
     15, 224,   0,  32, 228, 160, 
      0,   0,   0, 176,   1,   0, 
      0,   2,   4,   0,  12, 224, 
    146,   0,  68, 160, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 vfuniforms[48];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0      48
//

    vs_3_0
    def c48, 2, 0.100000001, 1.10000002, 0
    def c49, 0, 1, 0, 0
    dcl_color v0
    dcl_color1 v1
    dcl_position v2
    dcl_color2 v3
    dcl_color o0
    dcl_color1 o1
    dcl_position o2
    mad r0.x, v3.x, c48.x, c48.y
    frc r0.y, r0.x
    add r0.x, r0.x, -r0.y
    mad r0.y, v3.x, c48.x, -r0.y
    add r0.y, r0.y, c48.z
    mova a0.x, r0.y
    dp4 o2.y, v2, c0[a0.x]
    mova a0.x, r0.x
    dp4 o2.x, v2, c0[a0.x]
    mov o0, v0
    mov o1, v1
    mov o2.zw, c49.xyxy

// approximately 12 instruction slots used
#endif

extern const BYTE pBinary_VInstancedVertexEAlpha[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
     48,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  48,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5,  48,   0, 
     15, 160,   0,   0,   0,  64, 
    205, 204, 204,  61, 205, 204, 
    140,  63,   0,   0,   0,   0, 
     81,   0,   0,   5,  49,   0, 
     15, 160,   0,   0,   0,   0, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      2, 128,   3,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 224, 
      4,   0,   0,   4,   0,   0, 
      1, 128,   3,   0,   0, 144, 
     48,   0,   0, 160,  48,   0, 
     85, 160,  19,   0,   0,   2, 
      0,   0,   2, 128,   0,   0, 
      0, 128,   2,   0,   0,   3, 
      0,   0,   1, 128,   0,   0, 
      0, 128,   0,   0,  85, 129, 
      4,   0,   0,   4,   0,   0, 
      2, 128,   3,   0,   0, 144, 
     48,   0,   0, 160,   0,   0, 
     85, 129,   2,   0,   0,   3, 
      0,   0,   2, 128,   0,   0, 
     85, 128,  48,   0, 170, 160, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,  85, 128, 
      9,   0,   0,   4,   2,   0, 
      2, 224,   2,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,  46,   0,   0,   2, 
      0,   0,   1, 176,   0,   0, 
      0, 128,   9,   0,   0,   4, 
      2,   0,   1, 224,   2,   0, 
    228, 144,   0,  32, 228, 160, 
      0,   0,   0, 176,   1,   0, 
      0,   2,   0,   0,  15, 224, 
      0,   0, 228, 144,   1,   0, 
      0,   2,   1,   0,  15, 224, 
      1,   0, 228, 144,   1,   0, 
      0,   2,   2,   0,  12, 224, 
     49,   0,  68, 160, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 vfuniforms[96];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0      96
//

    vs_3_0
    def c96, 4, 2.0999999, 0.100000001, 1.10000002
    def c97, 3.0999999, 0, 1, 0
    dcl_color v0
    dcl_color1 v1
    dcl_position v2
    dcl_color2 v3
    dcl_color o0
    dcl_color1 o1
    dcl_texcoord o2
    dcl_texcoord1 o3
    dcl_position o4
    mad r0.xyz, v3.x, c96.x, c96.yzww
    frc r1.xyz, r0
    add r0.xyz, r0, -r1
    mad r0.w, v3.x, c96.x, -r1.x
    add r0.w, r0.w, c97.x
    mova a0.x, r0.w
    dp4 o4.y, v2, c0[a0.x]
    mova a0.x, r0.x
    dp4 o4.x, v2, c0[a0.x]
    mov o0, v0
    mov o1, v1
    mova a0.xy, r0.yzzw
    mov o3, c0[a0.y]
    mov o2, c0[a0.x]
    mov o4.zw, c97.xyyz

// approximately 15 instruction slots used
#endif

extern const BYTE pBinary_VInstancedVertexCxformEAlpha[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
     96,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  96,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5,  96,   0, 
     15, 160,   0,   0, 128,  64, 
    102, 102,   6,  64, 205, 204, 
    204,  61, 205, 204, 140,  63, 
     81,   0,   0,   5,  97,   0, 
     15, 160, 102, 102,  70,  64, 
      0,   0,   0,   0,   0,   0, 
    128,  63,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      2, 128,   3,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   2,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   3,   0,  15, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   4,   0,  15, 224, 
      4,   0,   0,   4,   0,   0, 
      7, 128,   3,   0,   0, 144, 
     96,   0,   0, 160,  96,   0, 
    249, 160,  19,   0,   0,   2, 
      1,   0,   7, 128,   0,   0, 
    228, 128,   2,   0,   0,   3, 
      0,   0,   7, 128,   0,   0, 
    228, 128,   1,   0, 228, 129, 
      4,   0,   0,   4,   0,   0, 
      8, 128,   3,   0,   0, 144, 
     96,   0,   0, 160,   1,   0, 
      0, 129,   2,   0,   0,   3, 
      0,   0,   8, 128,   0,   0, 
    255, 128,  97,   0,   0, 160, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0, 255, 128, 
      9,   0,   0,   4,   4,   0, 
      2, 224,   2,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,  46,   0,   0,   2, 
      0,   0,   1, 176,   0,   0, 
      0, 128,   9,   0,   0,   4, 
      4,   0,   1, 224,   2,   0, 
    228, 144,   0,  32, 228, 160, 
      0,   0,   0, 176,   1,   0, 
      0,   2,   0,   0,  15, 224, 
      0,   0, 228, 144,   1,   0, 
      0,   2,   1,   0,  15, 224, 
      1,   0, 228, 144,  46,   0, 
      0,   2,   0,   0,   3, 176, 
      0,   0, 233, 128,   1,   0, 
      0,   3,   3,   0,  15, 224, 
      0,  32, 228, 160,   0,   0, 
     85, 176,   1,   0,   0,   3, 
      2,   0,  15, 224,   0,  32, 
    228, 160,   0,   0,   0, 176, 
      1,   0,   0,   2,   4,   0, 
     12, 224,  97,   0, 148, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 vfuniforms[144];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0     144
//

    vs_3_0
    def c144, 6, 0.100000001, 2.0999999, 0
    def c145, 0, 1, 0, 0
    def c146, 1.10000002, 3.0999999, 4.0999999, 5.0999999
    dcl_color v0
    dcl_position v1
    dcl_color1 v2
    dcl_color o0
    dcl_texcoord o1.xy
    dcl_texcoord1 o2.xy
    dcl_position o3
    mad r0.xy, v2.x, c144.x, c144.yzzw
    frc r1, r0.xyyy
    add r0.xy, r0, -r1.xwzw
    mad r1, v2.x, c144.x, -r1
    add r1, r1, c146
    mova a0.xy, r0
    dp4 o1.x, v1, c0[a0.y]
    dp4 o3.x, v1, c0[a0.x]
    mova a0.x, r1.x
    dp4 o3.y, v1, c0[a0.x]
    mova a0.x, r1.y
    dp4 o1.y, v1, c0[a0.x]
    mova a0.xy, r1.zwzw
    dp4 o2.y, v1, c0[a0.y]
    dp4 o2.x, v1, c0[a0.x]
    mov o0, v0
    mov o3.zw, c145.xyxy

// approximately 17 instruction slots used
#endif

extern const BYTE pBinary_VInstancedTexTGTexTG[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
    144,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0, 144,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5, 144,   0, 
     15, 160,   0,   0, 192,  64, 
    205, 204, 204,  61, 102, 102, 
      6,  64,   0,   0,   0,   0, 
     81,   0,   0,   5, 145,   0, 
     15, 160,   0,   0,   0,   0, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     81,   0,   0,   5, 146,   0, 
     15, 160, 205, 204, 140,  63, 
    102, 102,  70,  64,  51,  51, 
    131,  64,  51,  51, 163,  64, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,   3, 224, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   2,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   3,   0,  15, 224, 
      4,   0,   0,   4,   0,   0, 
      3, 128,   2,   0,   0, 144, 
    144,   0,   0, 160, 144,   0, 
    233, 160,  19,   0,   0,   2, 
      1,   0,  15, 128,   0,   0, 
     84, 128,   2,   0,   0,   3, 
      0,   0,   3, 128,   0,   0, 
    228, 128,   1,   0, 236, 129, 
      4,   0,   0,   4,   1,   0, 
     15, 128,   2,   0,   0, 144, 
    144,   0,   0, 160,   1,   0, 
    228, 129,   2,   0,   0,   3, 
      1,   0,  15, 128,   1,   0, 
    228, 128, 146,   0, 228, 160, 
     46,   0,   0,   2,   0,   0, 
      3, 176,   0,   0, 228, 128, 
      9,   0,   0,   4,   1,   0, 
      1, 224,   1,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
     85, 176,   9,   0,   0,   4, 
      3,   0,   1, 224,   1,   0, 
    228, 144,   0,  32, 228, 160, 
      0,   0,   0, 176,  46,   0, 
      0,   2,   0,   0,   1, 176, 
      1,   0,   0, 128,   9,   0, 
      0,   4,   3,   0,   2, 224, 
      1,   0, 228, 144,   0,  32, 
    228, 160,   0,   0,   0, 176, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   1,   0,  85, 128, 
      9,   0,   0,   4,   1,   0, 
      2, 224,   1,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,  46,   0,   0,   2, 
      0,   0,   3, 176,   1,   0, 
    238, 128,   9,   0,   0,   4, 
      2,   0,   2, 224,   1,   0, 
    228, 144,   0,  32, 228, 160, 
      0,   0,  85, 176,   9,   0, 
      0,   4,   2,   0,   1, 224, 
      1,   0, 228, 144,   0,  32, 
    228, 160,   0,   0,   0, 176, 
      1,   0,   0,   2,   0,   0, 
     15, 224,   0,   0, 228, 144, 
      1,   0,   0,   2,   3,   0, 
     12, 224, 145,   0,  68, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 vfuniforms[192];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0     192
//

    vs_3_0
    def c192, 8, 0, 1, 0
    def c193, 2.0999999, 4.0999999, 0.100000001, 1.10000002
    def c194, 3.0999999, 5.0999999, 6.0999999, 7.0999999
    dcl_color v0
    dcl_position v1
    dcl_color1 v2
    dcl_color o0
    dcl_texcoord o1
    dcl_texcoord1 o2
    dcl_texcoord2 o3.xy
    dcl_texcoord3 o4.xy
    dcl_position o5
    mov r0.x, c192.x
    mad r0, v2.x, r0.x, c193
    frc r1, r0
    add r0, r0, -r1
    mad r1, v2.x, c192.x, -r1.xyyy
    add r1, r1, c194
    mova a0.x, r0.x
    dp4 o5.x, v1, c0[a0.x]
    mova a0.x, r1.x
    dp4 o5.y, v1, c0[a0.x]
    mova a0.x, r0.y
    dp4 o3.x, v1, c0[a0.x]
    mova a0.x, r1.y
    dp4 o3.y, v1, c0[a0.x]
    mova a0.xy, r1.zwzw
    dp4 o4.y, v1, c0[a0.y]
    dp4 o4.x, v1, c0[a0.x]
    mov o0, v0
    mova a0.xy, r0.zwzw
    mov o2, c0[a0.y]
    mov o1, c0[a0.x]
    mov o5.zw, c192.xyyz

// approximately 22 instruction slots used
#endif

extern const BYTE pBinary_VInstancedTexTGTexTGCxform[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
    192,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0, 192,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5, 192,   0, 
     15, 160,   0,   0,   0,  65, 
      0,   0,   0,   0,   0,   0, 
    128,  63,   0,   0,   0,   0, 
     81,   0,   0,   5, 193,   0, 
     15, 160, 102, 102,   6,  64, 
     51,  51, 131,  64, 205, 204, 
    204,  61, 205, 204, 140,  63, 
     81,   0,   0,   5, 194,   0, 
     15, 160, 102, 102,  70,  64, 
     51,  51, 163,  64,  51,  51, 
    195,  64,  51,  51, 227,  64, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   2,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      2, 128,   3,   0,   3, 224, 
     31,   0,   0,   2,   5,   0, 
      3, 128,   4,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   5,   0,  15, 224, 
      1,   0,   0,   2,   0,   0, 
      1, 128, 192,   0,   0, 160, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   2,   0,   0, 144, 
      0,   0,   0, 128, 193,   0, 
    228, 160,  19,   0,   0,   2, 
      1,   0,  15, 128,   0,   0, 
    228, 128,   2,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   1,   0, 228, 129, 
      4,   0,   0,   4,   1,   0, 
     15, 128,   2,   0,   0, 144, 
    192,   0,   0, 160,   1,   0, 
     84, 129,   2,   0,   0,   3, 
      1,   0,  15, 128,   1,   0, 
    228, 128, 194,   0, 228, 160, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   5,   0, 
      1, 224,   1,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,  46,   0,   0,   2, 
      0,   0,   1, 176,   1,   0, 
      0, 128,   9,   0,   0,   4, 
      5,   0,   2, 224,   1,   0, 
    228, 144,   0,  32, 228, 160, 
      0,   0,   0, 176,  46,   0, 
      0,   2,   0,   0,   1, 176, 
      0,   0,  85, 128,   9,   0, 
      0,   4,   3,   0,   1, 224, 
      1,   0, 228, 144,   0,  32, 
    228, 160,   0,   0,   0, 176, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   1,   0,  85, 128, 
      9,   0,   0,   4,   3,   0, 
      2, 224,   1,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,  46,   0,   0,   2, 
      0,   0,   3, 176,   1,   0, 
    238, 128,   9,   0,   0,   4, 
      4,   0,   2, 224,   1,   0, 
    228, 144,   0,  32, 228, 160, 
      0,   0,  85, 176,   9,   0, 
      0,   4,   4,   0,   1, 224, 
      1,   0, 228, 144,   0,  32, 
    228, 160,   0,   0,   0, 176, 
      1,   0,   0,   2,   0,   0, 
     15, 224,   0,   0, 228, 144, 
     46,   0,   0,   2,   0,   0, 
      3, 176,   0,   0, 238, 128, 
      1,   0,   0,   3,   2,   0, 
     15, 224,   0,  32, 228, 160, 
      0,   0,  85, 176,   1,   0, 
      0,   3,   1,   0,  15, 224, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   1,   0,   0,   2, 
      5,   0,  12, 224, 192,   0, 
    148, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 vfuniforms[96];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0      96
//

    vs_3_0
    def c96, 1.10000002, 3.0999999, 0, 1
    def c97, 4, 0.100000001, 2.0999999, 0
    dcl_color v0
    dcl_color1 v1
    dcl_position v2
    dcl_color2 v3
    dcl_color o0
    dcl_color1 o1
    dcl_texcoord o2.xy
    dcl_position o3
    mad r0.xy, v3.x, c97.x, c97.yzzw
    frc r0.zw, r0.xyxy
    add r0.xy, r0, -r0.zwzw
    mad r0.zw, v3.x, c97.x, -r0
    add r0.zw, r0, c96.xyxy
    mova a0.xy, r0
    dp4 o2.x, v2, c0[a0.y]
    dp4 o3.x, v2, c0[a0.x]
    mova a0.xy, r0.zwzw
    dp4 o2.y, v2, c0[a0.y]
    dp4 o3.y, v2, c0[a0.x]
    mov o0, v0
    mov o1, v1
    mov o3.zw, c96

// approximately 14 instruction slots used
#endif

extern const BYTE pBinary_VInstancedTexTGVertex[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
     96,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  96,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5,  96,   0, 
     15, 160, 205, 204, 140,  63, 
    102, 102,  70,  64,   0,   0, 
      0,   0,   0,   0, 128,  63, 
     81,   0,   0,   5,  97,   0, 
     15, 160,   0,   0, 128,  64, 
    205, 204, 204,  61, 102, 102, 
      6,  64,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      2, 128,   3,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   2,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   3,   0,  15, 224, 
      4,   0,   0,   4,   0,   0, 
      3, 128,   3,   0,   0, 144, 
     97,   0,   0, 160,  97,   0, 
    233, 160,  19,   0,   0,   2, 
      0,   0,  12, 128,   0,   0, 
     68, 128,   2,   0,   0,   3, 
      0,   0,   3, 128,   0,   0, 
    228, 128,   0,   0, 238, 129, 
      4,   0,   0,   4,   0,   0, 
     12, 128,   3,   0,   0, 144, 
     97,   0,   0, 160,   0,   0, 
    228, 129,   2,   0,   0,   3, 
      0,   0,  12, 128,   0,   0, 
    228, 128,  96,   0,  68, 160, 
     46,   0,   0,   2,   0,   0, 
      3, 176,   0,   0, 228, 128, 
      9,   0,   0,   4,   2,   0, 
      1, 224,   2,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
     85, 176,   9,   0,   0,   4, 
      3,   0,   1, 224,   2,   0, 
    228, 144,   0,  32, 228, 160, 
      0,   0,   0, 176,  46,   0, 
      0,   2,   0,   0,   3, 176, 
      0,   0, 238, 128,   9,   0, 
      0,   4,   2,   0,   2, 224, 
      2,   0, 228, 144,   0,  32, 
    228, 160,   0,   0,  85, 176, 
      9,   0,   0,   4,   3,   0, 
      2, 224,   2,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   1,   0,   0,   2, 
      0,   0,  15, 224,   0,   0, 
    228, 144,   1,   0,   0,   2, 
      1,   0,  15, 224,   1,   0, 
    228, 144,   1,   0,   0,   2, 
      3,   0,  12, 224,  96,   0, 
    228, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 vfuniforms[144];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0     144
//

    vs_3_0
    def c144, 2.0999999, 4.0999999, 0.100000001, 1.10000002
    def c145, 6, 3.0999999, 5.0999999, 0
    def c146, 0, 1, 0, 0
    dcl_color v0
    dcl_color1 v1
    dcl_position v2
    dcl_color2 v3
    dcl_color o0
    dcl_color1 o1
    dcl_texcoord o2
    dcl_texcoord1 o3
    dcl_texcoord2 o4.xy
    dcl_position o5
    mov r0.x, c145.x
    mad r0, v3.x, r0.x, c144
    frc r1, r0
    add r0, r0, -r1
    mad r1.xy, v3.x, c145.x, -r1
    add r1.xy, r1, c145.yzzw
    mova a0.x, r0.x
    dp4 o5.x, v2, c0[a0.x]
    mova a0.xy, r1
    dp4 o4.y, v2, c0[a0.y]
    dp4 o5.y, v2, c0[a0.x]
    mova a0.x, r0.y
    dp4 o4.x, v2, c0[a0.x]
    mov o0, v0
    mov o1, v1
    mova a0.xy, r0.zwzw
    mov o3, c0[a0.y]
    mov o2, c0[a0.x]
    mov o5.zw, c146.xyxy

// approximately 19 instruction slots used
#endif

extern const BYTE pBinary_VInstancedTexTGVertexCxform[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
    144,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0, 144,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5, 144,   0, 
     15, 160, 102, 102,   6,  64, 
     51,  51, 131,  64, 205, 204, 
    204,  61, 205, 204, 140,  63, 
     81,   0,   0,   5, 145,   0, 
     15, 160,   0,   0, 192,  64, 
    102, 102,  70,  64,  51,  51, 
    163,  64,   0,   0,   0,   0, 
     81,   0,   0,   5, 146,   0, 
     15, 160,   0,   0,   0,   0, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      2, 128,   3,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   2,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   3,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      2, 128,   4,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   5,   0,  15, 224, 
      1,   0,   0,   2,   0,   0, 
      1, 128, 145,   0,   0, 160, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   3,   0,   0, 144, 
      0,   0,   0, 128, 144,   0, 
    228, 160,  19,   0,   0,   2, 
      1,   0,  15, 128,   0,   0, 
    228, 128,   2,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   1,   0, 228, 129, 
      4,   0,   0,   4,   1,   0, 
      3, 128,   3,   0,   0, 144, 
    145,   0,   0, 160,   1,   0, 
    228, 129,   2,   0,   0,   3, 
      1,   0,   3, 128,   1,   0, 
    228, 128, 145,   0, 233, 160, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   5,   0, 
      1, 224,   2,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,  46,   0,   0,   2, 
      0,   0,   3, 176,   1,   0, 
    228, 128,   9,   0,   0,   4, 
      4,   0,   2, 224,   2,   0, 
    228, 144,   0,  32, 228, 160, 
      0,   0,  85, 176,   9,   0, 
      0,   4,   5,   0,   2, 224, 
      2,   0, 228, 144,   0,  32, 
    228, 160,   0,   0,   0, 176, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,  85, 128, 
      9,   0,   0,   4,   4,   0, 
      1, 224,   2,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   1,   0,   0,   2, 
      0,   0,  15, 224,   0,   0, 
    228, 144,   1,   0,   0,   2, 
      1,   0,  15, 224,   1,   0, 
    228, 144,  46,   0,   0,   2, 
      0,   0,   3, 176,   0,   0, 
    238, 128,   1,   0,   0,   3, 
      3,   0,  15, 224,   0,  32, 
    228, 160,   0,   0,  85, 176, 
      1,   0,   0,   3,   2,   0, 
     15, 224,   0,  32, 228, 160, 
      0,   0,   0, 176,   1,   0, 
      0,   2,   5,   0,  12, 224, 
    146,   0,  68, 160, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4x4 vfmuniforms[24];
//   float4 vfuniforms[48];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfmuniforms  c0      96
//   vfuniforms   c96     48
//

    vs_3_0
    def c144, 0.100000001, 4, 2, 1.10000002
    dcl_color v0
    dcl_position v1
    dcl_color1 v2
    dcl_color o0
    dcl_texcoord o1.xy
    dcl_position o2
    add r0.x, c144.x, v2.x
    frc r0.y, r0.x
    add r0.x, r0.x, -r0.y
    mul r0.x, r0.x, c144.y
    mova a0.x, r0.x
    dp4 o2.x, v1, c0[a0.x]
    dp4 o2.y, v1, c1[a0.x]
    dp4 o2.z, v1, c2[a0.x]
    dp4 o2.w, v1, c3[a0.x]
    mad r0.x, v2.x, c144.z, c144.x
    frc r0.y, r0.x
    add r0.x, r0.x, -r0.y
    mad r0.y, v2.x, c144.z, -r0.y
    add r0.y, r0.y, c144.w
    mova a0.x, r0.y
    dp4 o1.y, v1, c96[a0.x]
    mova a0.x, r0.x
    dp4 o1.x, v1, c96[a0.x]
    mov o0, v0

// approximately 19 instruction slots used
#endif

extern const BYTE pBinary_VInstancedPosition3dTexTGEAlpha[] =
{
      0,   3, 254, 255, 254, 255, 
     46,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 131,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    124,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
     96,   0,   2,   0,  80,   0, 
      0,   0,   0,   0,   0,   0, 
     96,   0,   0,   0,   2,   0, 
     96,   0,  48,   0, 130,   1, 
    108,   0,   0,   0,   0,   0, 
      0,   0, 118, 102, 109, 117, 
    110, 105, 102, 111, 114, 109, 
    115,   0,   3,   0,   3,   0, 
      4,   0,   4,   0,  24,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  48,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5, 144,   0, 
     15, 160, 205, 204, 204,  61, 
      0,   0, 128,  64,   0,   0, 
      0,  64, 205, 204, 140,  63, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 224, 
      2,   0,   0,   3,   0,   0, 
      1, 128, 144,   0,   0, 160, 
      2,   0,   0, 144,  19,   0, 
      0,   2,   0,   0,   2, 128, 
      0,   0,   0, 128,   2,   0, 
      0,   3,   0,   0,   1, 128, 
      0,   0,   0, 128,   0,   0, 
     85, 129,   5,   0,   0,   3, 
      0,   0,   1, 128,   0,   0, 
      0, 128, 144,   0,  85, 160, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   2,   0, 
      1, 224,   1,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      2,   0,   2, 224,   1,   0, 
    228, 144,   1,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   2,   0,   4, 224, 
      1,   0, 228, 144,   2,  32, 
    228, 160,   0,   0,   0, 176, 
      9,   0,   0,   4,   2,   0, 
      8, 224,   1,   0, 228, 144, 
      3,  32, 228, 160,   0,   0, 
      0, 176,   4,   0,   0,   4, 
      0,   0,   1, 128,   2,   0, 
      0, 144, 144,   0, 170, 160, 
    144,   0,   0, 160,  19,   0, 
      0,   2,   0,   0,   2, 128, 
      0,   0,   0, 128,   2,   0, 
      0,   3,   0,   0,   1, 128, 
      0,   0,   0, 128,   0,   0, 
     85, 129,   4,   0,   0,   4, 
      0,   0,   2, 128,   2,   0, 
      0, 144, 144,   0, 170, 160, 
      0,   0,  85, 129,   2,   0, 
      0,   3,   0,   0,   2, 128, 
      0,   0,  85, 128, 144,   0, 
    255, 160,  46,   0,   0,   2, 
      0,   0,   1, 176,   0,   0, 
     85, 128,   9,   0,   0,   4, 
      1,   0,   2, 224,   1,   0, 
    228, 144,  96,  32, 228, 160, 
      0,   0,   0, 176,  46,   0, 
      0,   2,   0,   0,   1, 176, 
      0,   0,   0, 128,   9,   0, 
      0,   4,   1,   0,   1, 224, 
      1,   0, 228, 144,  96,  32, 
    228, 160,   0,   0,   0, 176, 
      1,   0,   0,   2,   0,   0, 
     15, 224,   0,   0, 228, 144, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4x4 vfmuniforms[24];
//   float4 vfuniforms[96];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfmuniforms  c0      96
//   vfuniforms   c96     96
//

    vs_3_0
    def c192, 0.100000001, 4, 2.0999999, 1.10000002
    def c193, 3.0999999, 0, 0, 0
    dcl_color v0
    dcl_position v1
    dcl_color1 v2
    dcl_color o0
    dcl_texcoord o1
    dcl_texcoord1 o2
    dcl_texcoord2 o3.xy
    dcl_position o4
    add r0.x, c192.x, v2.x
    frc r0.y, r0.x
    add r0.x, r0.x, -r0.y
    mul r0.x, r0.x, c192.y
    mova a0.x, r0.x
    dp4 o4.x, v1, c0[a0.x]
    dp4 o4.y, v1, c1[a0.x]
    dp4 o4.z, v1, c2[a0.x]
    dp4 o4.w, v1, c3[a0.x]
    mad r0.xyz, v2.x, c192.y, c192.zxww
    frc r1.xyz, r0
    add r0.xyz, r0, -r1
    mad r0.w, v2.x, c192.y, -r1.x
    add r0.w, r0.w, c193.x
    mova a0.x, r0.w
    dp4 o3.y, v1, c96[a0.x]
    mova a0.x, r0.x
    dp4 o3.x, v1, c96[a0.x]
    mov o0, v0
    mova a0.xy, r0.yzzw
    mov o2, c96[a0.y]
    mov o1, c96[a0.x]

// approximately 22 instruction slots used
#endif

extern const BYTE pBinary_VInstancedPosition3dTexTGCxformEAlpha[] =
{
      0,   3, 254, 255, 254, 255, 
     46,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 131,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    124,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
     96,   0,   2,   0,  80,   0, 
      0,   0,   0,   0,   0,   0, 
     96,   0,   0,   0,   2,   0, 
     96,   0,  96,   0, 130,   1, 
    108,   0,   0,   0,   0,   0, 
      0,   0, 118, 102, 109, 117, 
    110, 105, 102, 111, 114, 109, 
    115,   0,   3,   0,   3,   0, 
      4,   0,   4,   0,  24,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  96,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5, 192,   0, 
     15, 160, 205, 204, 204,  61, 
      0,   0, 128,  64, 102, 102, 
      6,  64, 205, 204, 140,  63, 
     81,   0,   0,   5, 193,   0, 
     15, 160, 102, 102,  70,  64, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   2,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      2, 128,   3,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   4,   0,  15, 224, 
      2,   0,   0,   3,   0,   0, 
      1, 128, 192,   0,   0, 160, 
      2,   0,   0, 144,  19,   0, 
      0,   2,   0,   0,   2, 128, 
      0,   0,   0, 128,   2,   0, 
      0,   3,   0,   0,   1, 128, 
      0,   0,   0, 128,   0,   0, 
     85, 129,   5,   0,   0,   3, 
      0,   0,   1, 128,   0,   0, 
      0, 128, 192,   0,  85, 160, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   4,   0, 
      1, 224,   1,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      4,   0,   2, 224,   1,   0, 
    228, 144,   1,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   4,   0,   4, 224, 
      1,   0, 228, 144,   2,  32, 
    228, 160,   0,   0,   0, 176, 
      9,   0,   0,   4,   4,   0, 
      8, 224,   1,   0, 228, 144, 
      3,  32, 228, 160,   0,   0, 
      0, 176,   4,   0,   0,   4, 
      0,   0,   7, 128,   2,   0, 
      0, 144, 192,   0,  85, 160, 
    192,   0, 242, 160,  19,   0, 
      0,   2,   1,   0,   7, 128, 
      0,   0, 228, 128,   2,   0, 
      0,   3,   0,   0,   7, 128, 
      0,   0, 228, 128,   1,   0, 
    228, 129,   4,   0,   0,   4, 
      0,   0,   8, 128,   2,   0, 
      0, 144, 192,   0,  85, 160, 
      1,   0,   0, 129,   2,   0, 
      0,   3,   0,   0,   8, 128, 
      0,   0, 255, 128, 193,   0, 
      0, 160,  46,   0,   0,   2, 
      0,   0,   1, 176,   0,   0, 
    255, 128,   9,   0,   0,   4, 
      3,   0,   2, 224,   1,   0, 
    228, 144,  96,  32, 228, 160, 
      0,   0,   0, 176,  46,   0, 
      0,   2,   0,   0,   1, 176, 
      0,   0,   0, 128,   9,   0, 
      0,   4,   3,   0,   1, 224, 
      1,   0, 228, 144,  96,  32, 
    228, 160,   0,   0,   0, 176, 
      1,   0,   0,   2,   0,   0, 
     15, 224,   0,   0, 228, 144, 
     46,   0,   0,   2,   0,   0, 
      3, 176,   0,   0, 233, 128, 
      1,   0,   0,   3,   2,   0, 
     15, 224,  96,  32, 228, 160, 
      0,   0,  85, 176,   1,   0, 
      0,   3,   1,   0,  15, 224, 
     96,  32, 228, 160,   0,   0, 
      0, 176, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4x4 vfmuniforms[24];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfmuniforms  c0      96
//

    vs_3_0
    def c96, 0.100000001, 4, 0, 0
    dcl_color v0
    dcl_color1 v1
    dcl_position v2
    dcl_color2 v3
    dcl_color o0
    dcl_color1 o1
    dcl_position o2
    add r0.x, c96.x, v3.x
    frc r0.y, r0.x
    add r0.x, r0.x, -r0.y
    mul r0.x, r0.x, c96.y
    mova a0.x, r0.x
    dp4 o2.x, v2, c0[a0.x]
    dp4 o2.y, v2, c1[a0.x]
    dp4 o2.z, v2, c2[a0.x]
    dp4 o2.w, v2, c3[a0.x]
    mov o0, v0
    mov o1, v1

// approximately 11 instruction slots used
#endif

extern const BYTE pBinary_VInstancedPosition3dVertexEAlpha[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
     96,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 109, 117, 110, 105, 
    102, 111, 114, 109, 115,   0, 
      3,   0,   3,   0,   4,   0, 
      4,   0,  24,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5,  96,   0, 
     15, 160, 205, 204, 204,  61, 
      0,   0, 128,  64,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      2, 128,   3,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 224, 
      2,   0,   0,   3,   0,   0, 
      1, 128,  96,   0,   0, 160, 
      3,   0,   0, 144,  19,   0, 
      0,   2,   0,   0,   2, 128, 
      0,   0,   0, 128,   2,   0, 
      0,   3,   0,   0,   1, 128, 
      0,   0,   0, 128,   0,   0, 
     85, 129,   5,   0,   0,   3, 
      0,   0,   1, 128,   0,   0, 
      0, 128,  96,   0,  85, 160, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   2,   0, 
      1, 224,   2,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      2,   0,   2, 224,   2,   0, 
    228, 144,   1,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   2,   0,   4, 224, 
      2,   0, 228, 144,   2,  32, 
    228, 160,   0,   0,   0, 176, 
      9,   0,   0,   4,   2,   0, 
      8, 224,   2,   0, 228, 144, 
      3,  32, 228, 160,   0,   0, 
      0, 176,   1,   0,   0,   2, 
      0,   0,  15, 224,   0,   0, 
    228, 144,   1,   0,   0,   2, 
      1,   0,  15, 224,   1,   0, 
    228, 144, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4x4 vfmuniforms[24];
//   float4 vfuniforms[48];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfmuniforms  c0      96
//   vfuniforms   c96     48
//

    vs_3_0
    def c144, 0.100000001, 4, 2, 1.10000002
    dcl_color v0
    dcl_color1 v1
    dcl_position v2
    dcl_color2 v3
    dcl_color o0
    dcl_color1 o1
    dcl_texcoord o2
    dcl_texcoord1 o3
    dcl_position o4
    add r0.x, c144.x, v3.x
    frc r0.y, r0.x
    add r0.x, r0.x, -r0.y
    mul r0.x, r0.x, c144.y
    mova a0.x, r0.x
    dp4 o4.x, v2, c0[a0.x]
    dp4 o4.y, v2, c1[a0.x]
    dp4 o4.z, v2, c2[a0.x]
    dp4 o4.w, v2, c3[a0.x]
    mov o0, v0
    mov o1, v1
    mad r0.xy, v3.x, c144.z, c144.xwzw
    frc r0.zw, r0.xyxy
    add r0.xy, r0, -r0.zwzw
    mova a0.xy, r0
    mov o3, c96[a0.y]
    mov o2, c96[a0.x]

// approximately 17 instruction slots used
#endif

extern const BYTE pBinary_VInstancedPosition3dVertexCxformEAlpha[] =
{
      0,   3, 254, 255, 254, 255, 
     46,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 131,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    124,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
     96,   0,   2,   0,  80,   0, 
      0,   0,   0,   0,   0,   0, 
     96,   0,   0,   0,   2,   0, 
     96,   0,  48,   0, 130,   1, 
    108,   0,   0,   0,   0,   0, 
      0,   0, 118, 102, 109, 117, 
    110, 105, 102, 111, 114, 109, 
    115,   0,   3,   0,   3,   0, 
      4,   0,   4,   0,  24,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  48,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5, 144,   0, 
     15, 160, 205, 204, 204,  61, 
      0,   0, 128,  64,   0,   0, 
      0,  64, 205, 204, 140,  63, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      2, 128,   3,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   2,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   3,   0,  15, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   4,   0,  15, 224, 
      2,   0,   0,   3,   0,   0, 
      1, 128, 144,   0,   0, 160, 
      3,   0,   0, 144,  19,   0, 
      0,   2,   0,   0,   2, 128, 
      0,   0,   0, 128,   2,   0, 
      0,   3,   0,   0,   1, 128, 
      0,   0,   0, 128,   0,   0, 
     85, 129,   5,   0,   0,   3, 
      0,   0,   1, 128,   0,   0, 
      0, 128, 144,   0,  85, 160, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   4,   0, 
      1, 224,   2,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      4,   0,   2, 224,   2,   0, 
    228, 144,   1,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   4,   0,   4, 224, 
      2,   0, 228, 144,   2,  32, 
    228, 160,   0,   0,   0, 176, 
      9,   0,   0,   4,   4,   0, 
      8, 224,   2,   0, 228, 144, 
      3,  32, 228, 160,   0,   0, 
      0, 176,   1,   0,   0,   2, 
      0,   0,  15, 224,   0,   0, 
    228, 144,   1,   0,   0,   2, 
      1,   0,  15, 224,   1,   0, 
    228, 144,   4,   0,   0,   4, 
      0,   0,   3, 128,   3,   0, 
      0, 144, 144,   0, 170, 160, 
    144,   0, 236, 160,  19,   0, 
      0,   2,   0,   0,  12, 128, 
      0,   0,  68, 128,   2,   0, 
      0,   3,   0,   0,   3, 128, 
      0,   0, 228, 128,   0,   0, 
    238, 129,  46,   0,   0,   2, 
      0,   0,   3, 176,   0,   0, 
    228, 128,   1,   0,   0,   3, 
      3,   0,  15, 224,  96,  32, 
    228, 160,   0,   0,  85, 176, 
      1,   0,   0,   3,   2,   0, 
     15, 224,  96,  32, 228, 160, 
      0,   0,   0, 176, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4x4 vfmuniforms[24];
//   float4 vfuniforms[96];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfmuniforms  c0      96
//   vfuniforms   c96     96
//

    vs_3_0
    def c192, 0.100000001, 4, 0, 0
    def c193, 1.10000002, 2.0999999, 3.0999999, 0
    dcl_color v0
    dcl_position v1
    dcl_color1 v2
    dcl_color o0
    dcl_texcoord o1.xy
    dcl_texcoord1 o2.xy
    dcl_position o3
    add r0.x, c192.x, v2.x
    frc r0.y, r0.x
    add r0.x, r0.x, -r0.y
    mul r0.x, r0.x, c192.y
    mova a0.x, r0.x
    dp4 o3.x, v1, c0[a0.x]
    dp4 o3.y, v1, c1[a0.x]
    dp4 o3.z, v1, c2[a0.x]
    dp4 o3.w, v1, c3[a0.x]
    mad r0.x, v2.x, c192.y, c192.x
    frc r0.y, r0.x
    add r0.x, r0.x, -r0.y
    mad r0.y, v2.x, c192.y, -r0.y
    add r0.yzw, r0.y, c193.xxyz
    mova a0.x, r0.x
    dp4 o1.x, v1, c96[a0.x]
    mova a0.x, r0.y
    dp4 o1.y, v1, c96[a0.x]
    mova a0.xy, r0.zwzw
    dp4 o2.y, v1, c96[a0.y]
    dp4 o2.x, v1, c96[a0.x]
    mov o0, v0

// approximately 22 instruction slots used
#endif

extern const BYTE pBinary_VInstancedPosition3dTexTGTexTG[] =
{
      0,   3, 254, 255, 254, 255, 
     46,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 131,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    124,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
     96,   0,   2,   0,  80,   0, 
      0,   0,   0,   0,   0,   0, 
     96,   0,   0,   0,   2,   0, 
     96,   0,  96,   0, 130,   1, 
    108,   0,   0,   0,   0,   0, 
      0,   0, 118, 102, 109, 117, 
    110, 105, 102, 111, 114, 109, 
    115,   0,   3,   0,   3,   0, 
      4,   0,   4,   0,  24,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  96,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5, 192,   0, 
     15, 160, 205, 204, 204,  61, 
      0,   0, 128,  64,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     81,   0,   0,   5, 193,   0, 
     15, 160, 205, 204, 140,  63, 
    102, 102,   6,  64, 102, 102, 
     70,  64,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,   3, 224, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   2,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   3,   0,  15, 224, 
      2,   0,   0,   3,   0,   0, 
      1, 128, 192,   0,   0, 160, 
      2,   0,   0, 144,  19,   0, 
      0,   2,   0,   0,   2, 128, 
      0,   0,   0, 128,   2,   0, 
      0,   3,   0,   0,   1, 128, 
      0,   0,   0, 128,   0,   0, 
     85, 129,   5,   0,   0,   3, 
      0,   0,   1, 128,   0,   0, 
      0, 128, 192,   0,  85, 160, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   3,   0, 
      1, 224,   1,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      3,   0,   2, 224,   1,   0, 
    228, 144,   1,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   3,   0,   4, 224, 
      1,   0, 228, 144,   2,  32, 
    228, 160,   0,   0,   0, 176, 
      9,   0,   0,   4,   3,   0, 
      8, 224,   1,   0, 228, 144, 
      3,  32, 228, 160,   0,   0, 
      0, 176,   4,   0,   0,   4, 
      0,   0,   1, 128,   2,   0, 
      0, 144, 192,   0,  85, 160, 
    192,   0,   0, 160,  19,   0, 
      0,   2,   0,   0,   2, 128, 
      0,   0,   0, 128,   2,   0, 
      0,   3,   0,   0,   1, 128, 
      0,   0,   0, 128,   0,   0, 
     85, 129,   4,   0,   0,   4, 
      0,   0,   2, 128,   2,   0, 
      0, 144, 192,   0,  85, 160, 
      0,   0,  85, 129,   2,   0, 
      0,   3,   0,   0,  14, 128, 
      0,   0,  85, 128, 193,   0, 
    144, 160,  46,   0,   0,   2, 
      0,   0,   1, 176,   0,   0, 
      0, 128,   9,   0,   0,   4, 
      1,   0,   1, 224,   1,   0, 
    228, 144,  96,  32, 228, 160, 
      0,   0,   0, 176,  46,   0, 
      0,   2,   0,   0,   1, 176, 
      0,   0,  85, 128,   9,   0, 
      0,   4,   1,   0,   2, 224, 
      1,   0, 228, 144,  96,  32, 
    228, 160,   0,   0,   0, 176, 
     46,   0,   0,   2,   0,   0, 
      3, 176,   0,   0, 238, 128, 
      9,   0,   0,   4,   2,   0, 
      2, 224,   1,   0, 228, 144, 
     96,  32, 228, 160,   0,   0, 
     85, 176,   9,   0,   0,   4, 
      2,   0,   1, 224,   1,   0, 
    228, 144,  96,  32, 228, 160, 
      0,   0,   0, 176,   1,   0, 
      0,   2,   0,   0,  15, 224, 
      0,   0, 228, 144, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4x4 vfmuniforms[24];
//   float4 vfuniforms[144];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfmuniforms  c0      96
//   vfuniforms   c96    144
//

    vs_3_0
    def c240, 0.100000001, 4, 6, 0
    def c241, 6, 2.0999999, 0.100000001, 1.10000002
    def c242, 3.0999999, 4.0999999, 5.0999999, 0
    dcl_color v0
    dcl_position v1
    dcl_color1 v2
    dcl_color o0
    dcl_texcoord o1
    dcl_texcoord1 o2
    dcl_texcoord2 o3.xy
    dcl_texcoord3 o4.xy
    dcl_position o5
    add r0.x, c240.x, v2.x
    frc r0.y, r0.x
    add r0.x, r0.x, -r0.y
    mul r0.x, r0.x, c240.y
    mova a0.x, r0.x
    dp4 o5.x, v1, c0[a0.x]
    dp4 o5.y, v1, c1[a0.x]
    dp4 o5.z, v1, c2[a0.x]
    dp4 o5.w, v1, c3[a0.x]
    mad r0.xyz, v2.x, c241.x, c241.yzww
    frc r1.xyz, r0
    add r0.xyz, r0, -r1
    mad r0.w, v2.x, c240.z, -r1.x
    add r1.xyz, r0.w, c242
    mova a0.x, r0.x
    dp4 o3.x, v1, c96[a0.x]
    mova a0.x, r1.x
    dp4 o3.y, v1, c96[a0.x]
    mova a0.xy, r1.yzzw
    dp4 o4.y, v1, c96[a0.y]
    dp4 o4.x, v1, c96[a0.x]
    mov o0, v0
    mova a0.xy, r0.yzzw
    mov o2, c96[a0.y]
    mov o1, c96[a0.x]

// approximately 25 instruction slots used
#endif

extern const BYTE pBinary_VInstancedPosition3dTexTGTexTGCxform[] =
{
      0,   3, 254, 255, 254, 255, 
     46,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 131,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    124,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
     96,   0,   2,   0,  80,   0, 
      0,   0,   0,   0,   0,   0, 
     96,   0,   0,   0,   2,   0, 
     96,   0, 144,   0, 130,   1, 
    108,   0,   0,   0,   0,   0, 
      0,   0, 118, 102, 109, 117, 
    110, 105, 102, 111, 114, 109, 
    115,   0,   3,   0,   3,   0, 
      4,   0,   4,   0,  24,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0, 144,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5, 240,   0, 
     15, 160, 205, 204, 204,  61, 
      0,   0, 128,  64,   0,   0, 
    192,  64,   0,   0,   0,   0, 
     81,   0,   0,   5, 241,   0, 
     15, 160,   0,   0, 192,  64, 
    102, 102,   6,  64, 205, 204, 
    204,  61, 205, 204, 140,  63, 
     81,   0,   0,   5, 242,   0, 
     15, 160, 102, 102,  70,  64, 
     51,  51, 131,  64,  51,  51, 
    163,  64,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   2,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      2, 128,   3,   0,   3, 224, 
     31,   0,   0,   2,   5,   0, 
      3, 128,   4,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   5,   0,  15, 224, 
      2,   0,   0,   3,   0,   0, 
      1, 128, 240,   0,   0, 160, 
      2,   0,   0, 144,  19,   0, 
      0,   2,   0,   0,   2, 128, 
      0,   0,   0, 128,   2,   0, 
      0,   3,   0,   0,   1, 128, 
      0,   0,   0, 128,   0,   0, 
     85, 129,   5,   0,   0,   3, 
      0,   0,   1, 128,   0,   0, 
      0, 128, 240,   0,  85, 160, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   5,   0, 
      1, 224,   1,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      5,   0,   2, 224,   1,   0, 
    228, 144,   1,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   5,   0,   4, 224, 
      1,   0, 228, 144,   2,  32, 
    228, 160,   0,   0,   0, 176, 
      9,   0,   0,   4,   5,   0, 
      8, 224,   1,   0, 228, 144, 
      3,  32, 228, 160,   0,   0, 
      0, 176,   4,   0,   0,   4, 
      0,   0,   7, 128,   2,   0, 
      0, 144, 241,   0,   0, 160, 
    241,   0, 249, 160,  19,   0, 
      0,   2,   1,   0,   7, 128, 
      0,   0, 228, 128,   2,   0, 
      0,   3,   0,   0,   7, 128, 
      0,   0, 228, 128,   1,   0, 
    228, 129,   4,   0,   0,   4, 
      0,   0,   8, 128,   2,   0, 
      0, 144, 240,   0, 170, 160, 
      1,   0,   0, 129,   2,   0, 
      0,   3,   1,   0,   7, 128, 
      0,   0, 255, 128, 242,   0, 
    228, 160,  46,   0,   0,   2, 
      0,   0,   1, 176,   0,   0, 
      0, 128,   9,   0,   0,   4, 
      3,   0,   1, 224,   1,   0, 
    228, 144,  96,  32, 228, 160, 
      0,   0,   0, 176,  46,   0, 
      0,   2,   0,   0,   1, 176, 
      1,   0,   0, 128,   9,   0, 
      0,   4,   3,   0,   2, 224, 
      1,   0, 228, 144,  96,  32, 
    228, 160,   0,   0,   0, 176, 
     46,   0,   0,   2,   0,   0, 
      3, 176,   1,   0, 233, 128, 
      9,   0,   0,   4,   4,   0, 
      2, 224,   1,   0, 228, 144, 
     96,  32, 228, 160,   0,   0, 
     85, 176,   9,   0,   0,   4, 
      4,   0,   1, 224,   1,   0, 
    228, 144,  96,  32, 228, 160, 
      0,   0,   0, 176,   1,   0, 
      0,   2,   0,   0,  15, 224, 
      0,   0, 228, 144,  46,   0, 
      0,   2,   0,   0,   3, 176, 
      0,   0, 233, 128,   1,   0, 
      0,   3,   2,   0,  15, 224, 
     96,  32, 228, 160,   0,   0, 
     85, 176,   1,   0,   0,   3, 
      1,   0,  15, 224,  96,  32, 
    228, 160,   0,   0,   0, 176, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4x4 vfmuniforms[24];
//   float4 vfuniforms[48];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfmuniforms  c0      96
//   vfuniforms   c96     48
//

    vs_3_0
    def c144, 0.100000001, 4, 2, 1.10000002
    dcl_color v0
    dcl_color1 v1
    dcl_position v2
    dcl_color2 v3
    dcl_color o0
    dcl_color1 o1
    dcl_texcoord o2.xy
    dcl_position o3
    add r0.x, c144.x, v3.x
    frc r0.y, r0.x
    add r0.x, r0.x, -r0.y
    mul r0.x, r0.x, c144.y
    mova a0.x, r0.x
    dp4 o3.x, v2, c0[a0.x]
    dp4 o3.y, v2, c1[a0.x]
    dp4 o3.z, v2, c2[a0.x]
    dp4 o3.w, v2, c3[a0.x]
    mad r0.x, v3.x, c144.z, c144.x
    frc r0.y, r0.x
    add r0.x, r0.x, -r0.y
    mad r0.y, v3.x, c144.z, -r0.y
    add r0.y, r0.y, c144.w
    mova a0.x, r0.y
    dp4 o2.y, v2, c96[a0.x]
    mova a0.x, r0.x
    dp4 o2.x, v2, c96[a0.x]
    mov o0, v0
    mov o1, v1

// approximately 20 instruction slots used
#endif

extern const BYTE pBinary_VInstancedPosition3dTexTGVertex[] =
{
      0,   3, 254, 255, 254, 255, 
     46,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 131,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    124,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
     96,   0,   2,   0,  80,   0, 
      0,   0,   0,   0,   0,   0, 
     96,   0,   0,   0,   2,   0, 
     96,   0,  48,   0, 130,   1, 
    108,   0,   0,   0,   0,   0, 
      0,   0, 118, 102, 109, 117, 
    110, 105, 102, 111, 114, 109, 
    115,   0,   3,   0,   3,   0, 
      4,   0,   4,   0,  24,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  48,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5, 144,   0, 
     15, 160, 205, 204, 204,  61, 
      0,   0, 128,  64,   0,   0, 
      0,  64, 205, 204, 140,  63, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      2, 128,   3,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   2,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   3,   0,  15, 224, 
      2,   0,   0,   3,   0,   0, 
      1, 128, 144,   0,   0, 160, 
      3,   0,   0, 144,  19,   0, 
      0,   2,   0,   0,   2, 128, 
      0,   0,   0, 128,   2,   0, 
      0,   3,   0,   0,   1, 128, 
      0,   0,   0, 128,   0,   0, 
     85, 129,   5,   0,   0,   3, 
      0,   0,   1, 128,   0,   0, 
      0, 128, 144,   0,  85, 160, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   3,   0, 
      1, 224,   2,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      3,   0,   2, 224,   2,   0, 
    228, 144,   1,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   3,   0,   4, 224, 
      2,   0, 228, 144,   2,  32, 
    228, 160,   0,   0,   0, 176, 
      9,   0,   0,   4,   3,   0, 
      8, 224,   2,   0, 228, 144, 
      3,  32, 228, 160,   0,   0, 
      0, 176,   4,   0,   0,   4, 
      0,   0,   1, 128,   3,   0, 
      0, 144, 144,   0, 170, 160, 
    144,   0,   0, 160,  19,   0, 
      0,   2,   0,   0,   2, 128, 
      0,   0,   0, 128,   2,   0, 
      0,   3,   0,   0,   1, 128, 
      0,   0,   0, 128,   0,   0, 
     85, 129,   4,   0,   0,   4, 
      0,   0,   2, 128,   3,   0, 
      0, 144, 144,   0, 170, 160, 
      0,   0,  85, 129,   2,   0, 
      0,   3,   0,   0,   2, 128, 
      0,   0,  85, 128, 144,   0, 
    255, 160,  46,   0,   0,   2, 
      0,   0,   1, 176,   0,   0, 
     85, 128,   9,   0,   0,   4, 
      2,   0,   2, 224,   2,   0, 
    228, 144,  96,  32, 228, 160, 
      0,   0,   0, 176,  46,   0, 
      0,   2,   0,   0,   1, 176, 
      0,   0,   0, 128,   9,   0, 
      0,   4,   2,   0,   1, 224, 
      2,   0, 228, 144,  96,  32, 
    228, 160,   0,   0,   0, 176, 
      1,   0,   0,   2,   0,   0, 
     15, 224,   0,   0, 228, 144, 
      1,   0,   0,   2,   1,   0, 
     15, 224,   1,   0, 228, 144, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4x4 vfmuniforms[24];
//   float4 vfuniforms[96];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfmuniforms  c0      96
//   vfuniforms   c96     96
//

    vs_3_0
    def c192, 0.100000001, 4, 2.0999999, 1.10000002
    def c193, 3.0999999, 0, 0, 0
    dcl_color v0
    dcl_color1 v1
    dcl_position v2
    dcl_color2 v3
    dcl_color o0
    dcl_color1 o1
    dcl_texcoord o2
    dcl_texcoord1 o3
    dcl_texcoord2 o4.xy
    dcl_position o5
    add r0.x, c192.x, v3.x
    frc r0.y, r0.x
    add r0.x, r0.x, -r0.y
    mul r0.x, r0.x, c192.y
    mova a0.x, r0.x
    dp4 o5.x, v2, c0[a0.x]
    dp4 o5.y, v2, c1[a0.x]
    dp4 o5.z, v2, c2[a0.x]
    dp4 o5.w, v2, c3[a0.x]
    mad r0.xyz, v3.x, c192.y, c192.zxww
    frc r1.xyz, r0
    add r0.xyz, r0, -r1
    mad r0.w, v3.x, c192.y, -r1.x
    add r0.w, r0.w, c193.x
    mova a0.x, r0.w
    dp4 o4.y, v2, c96[a0.x]
    mova a0.x, r0.x
    dp4 o4.x, v2, c96[a0.x]
    mov o0, v0
    mov o1, v1
    mova a0.xy, r0.yzzw
    mov o3, c96[a0.y]
    mov o2, c96[a0.x]

// approximately 23 instruction slots used
#endif

extern const BYTE pBinary_VInstancedPosition3dTexTGVertexCxform[] =
{
      0,   3, 254, 255, 254, 255, 
     46,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 131,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    124,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
     96,   0,   2,   0,  80,   0, 
      0,   0,   0,   0,   0,   0, 
     96,   0,   0,   0,   2,   0, 
     96,   0,  96,   0, 130,   1, 
    108,   0,   0,   0,   0,   0, 
      0,   0, 118, 102, 109, 117, 
    110, 105, 102, 111, 114, 109, 
    115,   0,   3,   0,   3,   0, 
      4,   0,   4,   0,  24,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  96,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5, 192,   0, 
     15, 160, 205, 204, 204,  61, 
      0,   0, 128,  64, 102, 102, 
      6,  64, 205, 204, 140,  63, 
     81,   0,   0,   5, 193,   0, 
     15, 160, 102, 102,  70,  64, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      2, 128,   3,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   2,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   3,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      2, 128,   4,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   5,   0,  15, 224, 
      2,   0,   0,   3,   0,   0, 
      1, 128, 192,   0,   0, 160, 
      3,   0,   0, 144,  19,   0, 
      0,   2,   0,   0,   2, 128, 
      0,   0,   0, 128,   2,   0, 
      0,   3,   0,   0,   1, 128, 
      0,   0,   0, 128,   0,   0, 
     85, 129,   5,   0,   0,   3, 
      0,   0,   1, 128,   0,   0, 
      0, 128, 192,   0,  85, 160, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   5,   0, 
      1, 224,   2,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      5,   0,   2, 224,   2,   0, 
    228, 144,   1,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   5,   0,   4, 224, 
      2,   0, 228, 144,   2,  32, 
    228, 160,   0,   0,   0, 176, 
      9,   0,   0,   4,   5,   0, 
      8, 224,   2,   0, 228, 144, 
      3,  32, 228, 160,   0,   0, 
      0, 176,   4,   0,   0,   4, 
      0,   0,   7, 128,   3,   0, 
      0, 144, 192,   0,  85, 160, 
    192,   0, 242, 160,  19,   0, 
      0,   2,   1,   0,   7, 128, 
      0,   0, 228, 128,   2,   0, 
      0,   3,   0,   0,   7, 128, 
      0,   0, 228, 128,   1,   0, 
    228, 129,   4,   0,   0,   4, 
      0,   0,   8, 128,   3,   0, 
      0, 144, 192,   0,  85, 160, 
      1,   0,   0, 129,   2,   0, 
      0,   3,   0,   0,   8, 128, 
      0,   0, 255, 128, 193,   0, 
      0, 160,  46,   0,   0,   2, 
      0,   0,   1, 176,   0,   0, 
    255, 128,   9,   0,   0,   4, 
      4,   0,   2, 224,   2,   0, 
    228, 144,  96,  32, 228, 160, 
      0,   0,   0, 176,  46,   0, 
      0,   2,   0,   0,   1, 176, 
      0,   0,   0, 128,   9,   0, 
      0,   4,   4,   0,   1, 224, 
      2,   0, 228, 144,  96,  32, 
    228, 160,   0,   0,   0, 176, 
      1,   0,   0,   2,   0,   0, 
     15, 224,   0,   0, 228, 144, 
      1,   0,   0,   2,   1,   0, 
     15, 224,   1,   0, 228, 144, 
     46,   0,   0,   2,   0,   0, 
      3, 176,   0,   0, 233, 128, 
      1,   0,   0,   3,   3,   0, 
     15, 224,  96,  32, 228, 160, 
      0,   0,  85, 176,   1,   0, 
      0,   3,   2,   0,  15, 224, 
     96,  32, 228, 160,   0,   0, 
      0, 176, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 mvp[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       2
//

    vs_3_0
    def c2, 0, 1, 0, 0
    dcl_position v0
    dcl_position o0
    dp4 o0.x, v0, c0
    dp4 o0.y, v0, c1
    mov o0.zw, c2.xyxy

// approximately 3 instruction slots used
#endif

extern const BYTE pBinary_VSolid[] =
{
      0,   3, 254, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
      2,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    109, 118, 112,   0,   1,   0, 
      3,   0,   1,   0,   4,   0, 
      2,   0,   0,   0,   0,   0, 
      0,   0, 118, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  81,   0, 
      0,   5,   2,   0,  15, 160, 
      0,   0,   0,   0,   0,   0, 
    128,  63,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      0,   0,  15, 224,   9,   0, 
      0,   3,   0,   0,   1, 224, 
      0,   0, 228, 144,   0,   0, 
    228, 160,   9,   0,   0,   3, 
      0,   0,   2, 224,   0,   0, 
    228, 144,   1,   0, 228, 160, 
      1,   0,   0,   2,   0,   0, 
     12, 224,   2,   0,  68, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 cxmul;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxmul        c0       1
//

    ps_3_0
    mov oC0, c0

// approximately 1 instruction slot used
#endif

extern const BYTE pBinary_FSolid[] =
{
      0,   3, 255, 255, 254, 255, 
     33,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  79,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     72,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0,  56,   0, 
      0,   0,   0,   0,   0,   0, 
     99, 120, 109, 117, 108,   0, 
    171, 171,   1,   0,   3,   0, 
      1,   0,   4,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  51,  48,  46,  56, 
     52,  48,  48,  46,  48,   0, 
    171, 171,   1,   0,   0,   2, 
      0,   8,  15, 128,   0,   0, 
    228, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 cxmul;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxmul        c0       1
//

    ps_3_0
    def c1, -1, 1, 0, 0
    mov r0, c0
    add r1, r0, c1.x
    mad oC0, r0.w, r1, c1.y

// approximately 3 instruction slots used
#endif

extern const BYTE pBinary_FSolidMul[] =
{
      0,   3, 255, 255, 254, 255, 
     33,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  79,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     72,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0,  56,   0, 
      0,   0,   0,   0,   0,   0, 
     99, 120, 109, 117, 108,   0, 
    171, 171,   1,   0,   3,   0, 
      1,   0,   4,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  51,  48,  46,  56, 
     52,  48,  48,  46,  48,   0, 
    171, 171,  81,   0,   0,   5, 
      1,   0,  15, 160,   0,   0, 
    128, 191,   0,   0, 128,  63, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   1,   0,   0,   2, 
      0,   0,  15, 128,   0,   0, 
    228, 160,   2,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    228, 128,   1,   0,   0, 160, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 255, 128, 
      1,   0, 228, 128,   1,   0, 
     85, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   float4 mvp[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   mvp          c2       2
//

    vs_3_0
    def c4, 0, 1, 0, 0
    dcl_color v0
    dcl_texcoord v1
    dcl_position v2
    dcl_texcoord o0.xy
    dcl_color o1
    dcl_position o2
    dp4 o2.x, v2, c2
    dp4 o2.y, v2, c3
    mov r0, c1
    mad o1, v0, r0, c0
    mov o0.xy, v1
    mov o2.zw, c4.xyxy

// approximately 6 instruction slots used
#endif

extern const BYTE pBinary_VText[] =
{
      0,   3, 254, 255, 254, 255, 
     50,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 147,   0, 
      0,   0,   0,   3, 254, 255, 
      3,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    140,   0,   0,   0,  88,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0,  96,   0, 
      0,   0,   0,   0,   0,   0, 
    112,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 118,   0,   0,   0, 
      2,   0,   2,   0,   2,   0, 
     10,   0, 124,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
     97, 100, 100,   0, 171, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
    109, 117, 108,   0, 109, 118, 
    112,   0, 171, 171,   1,   0, 
      3,   0,   1,   0,   4,   0, 
      2,   0,   0,   0,   0,   0, 
      0,   0, 118, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  81,   0, 
      0,   5,   4,   0,  15, 160, 
      0,   0,   0,   0,   0,   0, 
    128,  63,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      2,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,   3, 224,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      1,   0,  15, 224,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      2,   0,  15, 224,   9,   0, 
      0,   3,   2,   0,   1, 224, 
      2,   0, 228, 144,   2,   0, 
    228, 160,   9,   0,   0,   3, 
      2,   0,   2, 224,   2,   0, 
    228, 144,   3,   0, 228, 160, 
      1,   0,   0,   2,   0,   0, 
     15, 128,   1,   0, 228, 160, 
      4,   0,   0,   4,   1,   0, 
     15, 224,   0,   0, 228, 144, 
      0,   0, 228, 128,   0,   0, 
    228, 160,   1,   0,   0,   2, 
      0,   0,   3, 224,   1,   0, 
    228, 144,   1,   0,   0,   2, 
      2,   0,  12, 224,   4,   0, 
     68, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       1
//

    ps_3_0
    dcl_texcoord v0.xy
    dcl_color v1
    dcl_2d s0
    texld r0, v0, s0
    mul oC0.w, r0.w, v1.w
    mov oC0.xyz, v1

// approximately 3 instruction slots used (1 texture, 2 arithmetic)
#endif

extern const BYTE pBinary_FText[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,   3, 144,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0, 228, 144,   0,   8, 
    228, 160,   5,   0,   0,   3, 
      0,   8,   8, 128,   0,   0, 
    255, 128,   1,   0, 255, 144, 
      1,   0,   0,   2,   0,   8, 
      7, 128,   1,   0, 228, 144, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       1
//

    ps_3_0
    def c0, -1, 1, 0, 0
    dcl_texcoord v0.xy
    dcl_color v1
    dcl_2d s0
    mov r0.xyz, v1
    texld r1, v0, s0
    mul r0.w, r1.w, v1.w
    add r1, r0, c0.x
    mad oC0, r0.w, r1, c0.y

// approximately 5 instruction slots used (1 texture, 4 arithmetic)
#endif

extern const BYTE pBinary_FTextMul[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  81,   0, 
      0,   5,   0,   0,  15, 160, 
      0,   0, 128, 191,   0,   0, 
    128,  63,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,   3, 144,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,   1,   0, 
      0,   2,   0,   0,   7, 128, 
      1,   0, 228, 144,  66,   0, 
      0,   3,   1,   0,  15, 128, 
      0,   0, 228, 144,   0,   8, 
    228, 160,   5,   0,   0,   3, 
      0,   0,   8, 128,   1,   0, 
    255, 128,   1,   0, 255, 144, 
      2,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 228, 128, 
      0,   0,   0, 160,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      0,   0, 255, 128,   1,   0, 
    228, 128,   0,   0,  85, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 mvp[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       2
//

    vs_3_0
    def c2, 0, 1, 0, 0
    dcl_texcoord v0
    dcl_position v1
    dcl_texcoord o0.xy
    dcl_position o1
    dp4 o1.x, v1, c0
    dp4 o1.y, v1, c1
    mov o0.xy, v0
    mov o1.zw, c2.xyxy

// approximately 4 instruction slots used
#endif

extern const BYTE pBinary_VTextColor[] =
{
      0,   3, 254, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
      2,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    109, 118, 112,   0,   1,   0, 
      3,   0,   1,   0,   4,   0, 
      2,   0,   0,   0,   0,   0, 
      0,   0, 118, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  81,   0, 
      0,   5,   2,   0,  15, 160, 
      0,   0,   0,   0,   0,   0, 
    128,  63,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,   3, 224,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      1,   0,  15, 224,   9,   0, 
      0,   3,   1,   0,   1, 224, 
      1,   0, 228, 144,   0,   0, 
    228, 160,   9,   0,   0,   3, 
      1,   0,   2, 224,   1,   0, 
    228, 144,   1,   0, 228, 160, 
      1,   0,   0,   2,   0,   0, 
      3, 224,   0,   0, 228, 144, 
      1,   0,   0,   2,   1,   0, 
     12, 224,   2,   0,  68, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   float4 mvp[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   mvp          c2       2
//

    vs_3_0
    def c4, 0, 1, 0, 0
    dcl_texcoord v0
    dcl_position v1
    dcl_texcoord o0
    dcl_texcoord1 o1
    dcl_texcoord2 o2.xy
    dcl_position o3
    dp4 o3.x, v1, c2
    dp4 o3.y, v1, c3
    mov o0, c0
    mov o1, c1
    mov o2.xy, v0
    mov o3.zw, c4.xyxy

// approximately 6 instruction slots used
#endif

extern const BYTE pBinary_VTextColorCxform[] =
{
      0,   3, 254, 255, 254, 255, 
     50,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 147,   0, 
      0,   0,   0,   3, 254, 255, 
      3,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    140,   0,   0,   0,  88,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0,  96,   0, 
      0,   0,   0,   0,   0,   0, 
    112,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 118,   0,   0,   0, 
      2,   0,   2,   0,   2,   0, 
     10,   0, 124,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
     97, 100, 100,   0, 171, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
    109, 117, 108,   0, 109, 118, 
    112,   0, 171, 171,   1,   0, 
      3,   0,   1,   0,   4,   0, 
      2,   0,   0,   0,   0,   0, 
      0,   0, 118, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  81,   0, 
      0,   5,   4,   0,  15, 160, 
      0,   0,   0,   0,   0,   0, 
    128,  63,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,  15, 224,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      1,   0,  15, 224,  31,   0, 
      0,   2,   5,   0,   2, 128, 
      2,   0,   3, 224,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      3,   0,  15, 224,   9,   0, 
      0,   3,   3,   0,   1, 224, 
      1,   0, 228, 144,   2,   0, 
    228, 160,   9,   0,   0,   3, 
      3,   0,   2, 224,   1,   0, 
    228, 144,   3,   0, 228, 160, 
      1,   0,   0,   2,   0,   0, 
     15, 224,   0,   0, 228, 160, 
      1,   0,   0,   2,   1,   0, 
     15, 224,   1,   0, 228, 160, 
      1,   0,   0,   2,   2,   0, 
      3, 224,   0,   0, 228, 144, 
      1,   0,   0,   2,   3,   0, 
     12, 224,   4,   0,  68, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4x4 mvp;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       4
//

    vs_3_0
    dcl_position v0
    dcl_position o0
    dp4 o0.x, v0, c0
    dp4 o0.y, v0, c1
    dp4 o0.z, v0, c2
    dp4 o0.w, v0, c3

// approximately 4 instruction slots used
#endif

extern const BYTE pBinary_VPosition3dSolid[] =
{
      0,   3, 254, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
      4,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    109, 118, 112,   0,   3,   0, 
      3,   0,   4,   0,   4,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 118, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      0,   0,  15, 224,   9,   0, 
      0,   3,   0,   0,   1, 224, 
      0,   0, 228, 144,   0,   0, 
    228, 160,   9,   0,   0,   3, 
      0,   0,   2, 224,   0,   0, 
    228, 144,   1,   0, 228, 160, 
      9,   0,   0,   3,   0,   0, 
      4, 224,   0,   0, 228, 144, 
      2,   0, 228, 160,   9,   0, 
      0,   3,   0,   0,   8, 224, 
      0,   0, 228, 144,   3,   0, 
    228, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   float4x4 mvp;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   mvp          c2       4
//

    vs_3_0
    dcl_color v0
    dcl_texcoord v1
    dcl_position v2
    dcl_texcoord o0.xy
    dcl_color o1
    dcl_position o2
    dp4 o2.x, v2, c2
    dp4 o2.y, v2, c3
    dp4 o2.z, v2, c4
    dp4 o2.w, v2, c5
    mov r0, c1
    mad o1, v0, r0, c0
    mov o0.xy, v1

// approximately 7 instruction slots used
#endif

extern const BYTE pBinary_VPosition3dText[] =
{
      0,   3, 254, 255, 254, 255, 
     50,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 147,   0, 
      0,   0,   0,   3, 254, 255, 
      3,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    140,   0,   0,   0,  88,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0,  96,   0, 
      0,   0,   0,   0,   0,   0, 
    112,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 118,   0,   0,   0, 
      2,   0,   2,   0,   4,   0, 
     10,   0, 124,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
     97, 100, 100,   0, 171, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
    109, 117, 108,   0, 109, 118, 
    112,   0, 171, 171,   3,   0, 
      3,   0,   4,   0,   4,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 118, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      2,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,   3, 224,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      1,   0,  15, 224,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      2,   0,  15, 224,   9,   0, 
      0,   3,   2,   0,   1, 224, 
      2,   0, 228, 144,   2,   0, 
    228, 160,   9,   0,   0,   3, 
      2,   0,   2, 224,   2,   0, 
    228, 144,   3,   0, 228, 160, 
      9,   0,   0,   3,   2,   0, 
      4, 224,   2,   0, 228, 144, 
      4,   0, 228, 160,   9,   0, 
      0,   3,   2,   0,   8, 224, 
      2,   0, 228, 144,   5,   0, 
    228, 160,   1,   0,   0,   2, 
      0,   0,  15, 128,   1,   0, 
    228, 160,   4,   0,   0,   4, 
      1,   0,  15, 224,   0,   0, 
    228, 144,   0,   0, 228, 128, 
      0,   0, 228, 160,   1,   0, 
      0,   2,   0,   0,   3, 224, 
      1,   0, 228, 144, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4x4 mvp;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       4
//

    vs_3_0
    dcl_texcoord v0
    dcl_position v1
    dcl_texcoord o0.xy
    dcl_position o1
    dp4 o1.x, v1, c0
    dp4 o1.y, v1, c1
    dp4 o1.z, v1, c2
    dp4 o1.w, v1, c3
    mov o0.xy, v0

// approximately 5 instruction slots used
#endif

extern const BYTE pBinary_VPosition3dTextColor[] =
{
      0,   3, 254, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
      4,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    109, 118, 112,   0,   3,   0, 
      3,   0,   4,   0,   4,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 118, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,   3, 224,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      1,   0,  15, 224,   9,   0, 
      0,   3,   1,   0,   1, 224, 
      1,   0, 228, 144,   0,   0, 
    228, 160,   9,   0,   0,   3, 
      1,   0,   2, 224,   1,   0, 
    228, 144,   1,   0, 228, 160, 
      9,   0,   0,   3,   1,   0, 
      4, 224,   1,   0, 228, 144, 
      2,   0, 228, 160,   9,   0, 
      0,   3,   1,   0,   8, 224, 
      1,   0, 228, 144,   3,   0, 
    228, 160,   1,   0,   0,   2, 
      0,   0,   3, 224,   0,   0, 
    228, 144, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   float4x4 mvp;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   mvp          c2       4
//

    vs_3_0
    dcl_texcoord v0
    dcl_position v1
    dcl_texcoord o0
    dcl_texcoord1 o1
    dcl_texcoord2 o2.xy
    dcl_position o3
    dp4 o3.x, v1, c2
    dp4 o3.y, v1, c3
    dp4 o3.z, v1, c4
    dp4 o3.w, v1, c5
    mov o0, c0
    mov o1, c1
    mov o2.xy, v0

// approximately 7 instruction slots used
#endif

extern const BYTE pBinary_VPosition3dTextColorCxform[] =
{
      0,   3, 254, 255, 254, 255, 
     50,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 147,   0, 
      0,   0,   0,   3, 254, 255, 
      3,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    140,   0,   0,   0,  88,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0,  96,   0, 
      0,   0,   0,   0,   0,   0, 
    112,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 118,   0,   0,   0, 
      2,   0,   2,   0,   4,   0, 
     10,   0, 124,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
     97, 100, 100,   0, 171, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
    109, 117, 108,   0, 109, 118, 
    112,   0, 171, 171,   3,   0, 
      3,   0,   4,   0,   4,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 118, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,  15, 224,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      1,   0,  15, 224,  31,   0, 
      0,   2,   5,   0,   2, 128, 
      2,   0,   3, 224,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      3,   0,  15, 224,   9,   0, 
      0,   3,   3,   0,   1, 224, 
      1,   0, 228, 144,   2,   0, 
    228, 160,   9,   0,   0,   3, 
      3,   0,   2, 224,   1,   0, 
    228, 144,   3,   0, 228, 160, 
      9,   0,   0,   3,   3,   0, 
      4, 224,   1,   0, 228, 144, 
      4,   0, 228, 160,   9,   0, 
      0,   3,   3,   0,   8, 224, 
      1,   0, 228, 144,   5,   0, 
    228, 160,   1,   0,   0,   2, 
      0,   0,  15, 224,   0,   0, 
    228, 160,   1,   0,   0,   2, 
      1,   0,  15, 224,   1,   0, 
    228, 160,   1,   0,   0,   2, 
      2,   0,   3, 224,   0,   0, 
    228, 144, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 vfuniforms[48];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0      48
//

    vs_3_0
    def c48, 2, 0.100000001, 1.10000002, 0
    def c49, 0, 1, 0, 0
    dcl_position v0
    dcl_color1 v1
    dcl_position o0
    mad r0.x, v1.x, c48.x, c48.y
    frc r0.y, r0.x
    add r0.x, r0.x, -r0.y
    mad r0.y, v1.x, c48.x, -r0.y
    add r0.y, r0.y, c48.z
    mova a0.x, r0.y
    dp4 o0.y, v0, c0[a0.x]
    mova a0.x, r0.x
    dp4 o0.x, v0, c0[a0.x]
    mov o0.zw, c49.xyxy

// approximately 10 instruction slots used
#endif

extern const BYTE pBinary_VBatchSolid[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
     48,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  48,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5,  48,   0, 
     15, 160,   0,   0,   0,  64, 
    205, 204, 204,  61, 205, 204, 
    140,  63,   0,   0,   0,   0, 
     81,   0,   0,   5,  49,   0, 
     15, 160,   0,   0,   0,   0, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 224, 
      4,   0,   0,   4,   0,   0, 
      1, 128,   1,   0,   0, 144, 
     48,   0,   0, 160,  48,   0, 
     85, 160,  19,   0,   0,   2, 
      0,   0,   2, 128,   0,   0, 
      0, 128,   2,   0,   0,   3, 
      0,   0,   1, 128,   0,   0, 
      0, 128,   0,   0,  85, 129, 
      4,   0,   0,   4,   0,   0, 
      2, 128,   1,   0,   0, 144, 
     48,   0,   0, 160,   0,   0, 
     85, 129,   2,   0,   0,   3, 
      0,   0,   2, 128,   0,   0, 
     85, 128,  48,   0, 170, 160, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,  85, 128, 
      9,   0,   0,   4,   0,   0, 
      2, 224,   0,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,  46,   0,   0,   2, 
      0,   0,   1, 176,   0,   0, 
      0, 128,   9,   0,   0,   4, 
      0,   0,   1, 224,   0,   0, 
    228, 144,   0,  32, 228, 160, 
      0,   0,   0, 176,   1,   0, 
      0,   2,   0,   0,  12, 224, 
     49,   0,  68, 160, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 vfuniforms[96];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0      96
//

    vs_3_0
    def c96, 3.0999999, 0, 1, 0
    def c97, 4, 2.0999999, 1.10000002, 0.100000001
    dcl_color v0
    dcl_texcoord v1
    dcl_position v2
    dcl_color2 v3
    dcl_texcoord o0.xy
    dcl_color o1
    dcl_position o2
    mad r0.xyz, v3.x, c97.x, c97.yzww
    frc r1.xyz, r0
    add r0.xyz, r0, -r1
    mad r0.w, v3.x, c97.x, -r1.x
    add r0.w, r0.w, c96.x
    mova a0.x, r0.w
    dp4 o2.y, v2, c0[a0.x]
    mova a0.x, r0.x
    dp4 o2.x, v2, c0[a0.x]
    mova a0.xy, r0.yzzw
    mov r0, c0[a0.x]
    mad o1, v0, r0, c0[a0.y]
    mov o0.xy, v1
    mov o2.zw, c96.xyyz

// approximately 14 instruction slots used
#endif

extern const BYTE pBinary_VBatchText[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
     96,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  96,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5,  96,   0, 
     15, 160, 102, 102,  70,  64, 
      0,   0,   0,   0,   0,   0, 
    128,  63,   0,   0,   0,   0, 
     81,   0,   0,   5,  97,   0, 
     15, 160,   0,   0, 128,  64, 
    102, 102,   6,  64, 205, 204, 
    140,  63, 205, 204, 204,  61, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      2, 128,   3,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,   3, 224, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 224, 
      4,   0,   0,   4,   0,   0, 
      7, 128,   3,   0,   0, 144, 
     97,   0,   0, 160,  97,   0, 
    249, 160,  19,   0,   0,   2, 
      1,   0,   7, 128,   0,   0, 
    228, 128,   2,   0,   0,   3, 
      0,   0,   7, 128,   0,   0, 
    228, 128,   1,   0, 228, 129, 
      4,   0,   0,   4,   0,   0, 
      8, 128,   3,   0,   0, 144, 
     97,   0,   0, 160,   1,   0, 
      0, 129,   2,   0,   0,   3, 
      0,   0,   8, 128,   0,   0, 
    255, 128,  96,   0,   0, 160, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0, 255, 128, 
      9,   0,   0,   4,   2,   0, 
      2, 224,   2,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,  46,   0,   0,   2, 
      0,   0,   1, 176,   0,   0, 
      0, 128,   9,   0,   0,   4, 
      2,   0,   1, 224,   2,   0, 
    228, 144,   0,  32, 228, 160, 
      0,   0,   0, 176,  46,   0, 
      0,   2,   0,   0,   3, 176, 
      0,   0, 233, 128,   1,   0, 
      0,   3,   0,   0,  15, 128, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   4,   0,   0,   5, 
      1,   0,  15, 224,   0,   0, 
    228, 144,   0,   0, 228, 128, 
      0,  32, 228, 160,   0,   0, 
     85, 176,   1,   0,   0,   2, 
      0,   0,   3, 224,   1,   0, 
    228, 144,   1,   0,   0,   2, 
      2,   0,  12, 224,  96,   0, 
    148, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 vfuniforms[48];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0      48
//

    vs_3_0
    def c48, 2, 0.100000001, 1.10000002, 0
    def c49, 0, 1, 0, 0
    dcl_texcoord v0
    dcl_position v1
    dcl_color1 v2
    dcl_texcoord o0.xy
    dcl_position o1
    mad r0.x, v2.x, c48.x, c48.y
    frc r0.y, r0.x
    add r0.x, r0.x, -r0.y
    mad r0.y, v2.x, c48.x, -r0.y
    add r0.y, r0.y, c48.z
    mova a0.x, r0.y
    dp4 o1.y, v1, c0[a0.x]
    mova a0.x, r0.x
    dp4 o1.x, v1, c0[a0.x]
    mov o0.xy, v0
    mov o1.zw, c49.xyxy

// approximately 11 instruction slots used
#endif

extern const BYTE pBinary_VBatchTextColor[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
     48,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  48,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5,  48,   0, 
     15, 160,   0,   0,   0,  64, 
    205, 204, 204,  61, 205, 204, 
    140,  63,   0,   0,   0,   0, 
     81,   0,   0,   5,  49,   0, 
     15, 160,   0,   0,   0,   0, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 224, 
      4,   0,   0,   4,   0,   0, 
      1, 128,   2,   0,   0, 144, 
     48,   0,   0, 160,  48,   0, 
     85, 160,  19,   0,   0,   2, 
      0,   0,   2, 128,   0,   0, 
      0, 128,   2,   0,   0,   3, 
      0,   0,   1, 128,   0,   0, 
      0, 128,   0,   0,  85, 129, 
      4,   0,   0,   4,   0,   0, 
      2, 128,   2,   0,   0, 144, 
     48,   0,   0, 160,   0,   0, 
     85, 129,   2,   0,   0,   3, 
      0,   0,   2, 128,   0,   0, 
     85, 128,  48,   0, 170, 160, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,  85, 128, 
      9,   0,   0,   4,   1,   0, 
      2, 224,   1,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,  46,   0,   0,   2, 
      0,   0,   1, 176,   0,   0, 
      0, 128,   9,   0,   0,   4, 
      1,   0,   1, 224,   1,   0, 
    228, 144,   0,  32, 228, 160, 
      0,   0,   0, 176,   1,   0, 
      0,   2,   0,   0,   3, 224, 
      0,   0, 228, 144,   1,   0, 
      0,   2,   1,   0,  12, 224, 
     49,   0,  68, 160, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 vfuniforms[96];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0      96
//

    vs_3_0
    def c96, 4, 2.0999999, 0.100000001, 1.10000002
    def c97, 3.0999999, 0, 1, 0
    dcl_texcoord v0
    dcl_position v1
    dcl_color1 v2
    dcl_texcoord o0
    dcl_texcoord1 o1
    dcl_texcoord2 o2.xy
    dcl_position o3
    mad r0.xyz, v2.x, c96.x, c96.yzww
    frc r1.xyz, r0
    add r0.xyz, r0, -r1
    mad r0.w, v2.x, c96.x, -r1.x
    add r0.w, r0.w, c97.x
    mova a0.x, r0.w
    dp4 o3.y, v1, c0[a0.x]
    mova a0.x, r0.x
    dp4 o3.x, v1, c0[a0.x]
    mova a0.xy, r0.yzzw
    mov o1, c0[a0.y]
    mov o0, c0[a0.x]
    mov o2.xy, v0
    mov o3.zw, c97.xyyz

// approximately 14 instruction slots used
#endif

extern const BYTE pBinary_VBatchTextColorCxform[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
     96,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  96,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5,  96,   0, 
     15, 160,   0,   0, 128,  64, 
    102, 102,   6,  64, 205, 204, 
    204,  61, 205, 204, 140,  63, 
     81,   0,   0,   5,  97,   0, 
     15, 160, 102, 102,  70,  64, 
      0,   0,   0,   0,   0,   0, 
    128,  63,   0,   0,   0,   0, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      2, 128,   2,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   3,   0,  15, 224, 
      4,   0,   0,   4,   0,   0, 
      7, 128,   2,   0,   0, 144, 
     96,   0,   0, 160,  96,   0, 
    249, 160,  19,   0,   0,   2, 
      1,   0,   7, 128,   0,   0, 
    228, 128,   2,   0,   0,   3, 
      0,   0,   7, 128,   0,   0, 
    228, 128,   1,   0, 228, 129, 
      4,   0,   0,   4,   0,   0, 
      8, 128,   2,   0,   0, 144, 
     96,   0,   0, 160,   1,   0, 
      0, 129,   2,   0,   0,   3, 
      0,   0,   8, 128,   0,   0, 
    255, 128,  97,   0,   0, 160, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0, 255, 128, 
      9,   0,   0,   4,   3,   0, 
      2, 224,   1,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,  46,   0,   0,   2, 
      0,   0,   1, 176,   0,   0, 
      0, 128,   9,   0,   0,   4, 
      3,   0,   1, 224,   1,   0, 
    228, 144,   0,  32, 228, 160, 
      0,   0,   0, 176,  46,   0, 
      0,   2,   0,   0,   3, 176, 
      0,   0, 233, 128,   1,   0, 
      0,   3,   1,   0,  15, 224, 
      0,  32, 228, 160,   0,   0, 
     85, 176,   1,   0,   0,   3, 
      0,   0,  15, 224,   0,  32, 
    228, 160,   0,   0,   0, 176, 
      1,   0,   0,   2,   2,   0, 
      3, 224,   0,   0, 228, 144, 
      1,   0,   0,   2,   3,   0, 
     12, 224,  97,   0, 148, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4x4 vfmuniforms[24];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfmuniforms  c0      96
//

    vs_3_0
    def c96, 0.100000001, 4, 0, 0
    dcl_position v0
    dcl_color1 v1
    dcl_position o0
    add r0.x, c96.x, v1.x
    frc r0.y, r0.x
    add r0.x, r0.x, -r0.y
    mul r0.x, r0.x, c96.y
    mova a0.x, r0.x
    dp4 o0.x, v0, c0[a0.x]
    dp4 o0.y, v0, c1[a0.x]
    dp4 o0.z, v0, c2[a0.x]
    dp4 o0.w, v0, c3[a0.x]

// approximately 9 instruction slots used
#endif

extern const BYTE pBinary_VBatchPosition3dSolid[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
     96,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 109, 117, 110, 105, 
    102, 111, 114, 109, 115,   0, 
      3,   0,   3,   0,   4,   0, 
      4,   0,  24,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5,  96,   0, 
     15, 160, 205, 204, 204,  61, 
      0,   0, 128,  64,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 224, 
      2,   0,   0,   3,   0,   0, 
      1, 128,  96,   0,   0, 160, 
      1,   0,   0, 144,  19,   0, 
      0,   2,   0,   0,   2, 128, 
      0,   0,   0, 128,   2,   0, 
      0,   3,   0,   0,   1, 128, 
      0,   0,   0, 128,   0,   0, 
     85, 129,   5,   0,   0,   3, 
      0,   0,   1, 128,   0,   0, 
      0, 128,  96,   0,  85, 160, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   0,   0, 
      1, 224,   0,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      0,   0,   2, 224,   0,   0, 
    228, 144,   1,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   0,   0,   4, 224, 
      0,   0, 228, 144,   2,  32, 
    228, 160,   0,   0,   0, 176, 
      9,   0,   0,   4,   0,   0, 
      8, 224,   0,   0, 228, 144, 
      3,  32, 228, 160,   0,   0, 
      0, 176, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4x4 vfmuniforms[24];
//   float4 vfuniforms[48];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfmuniforms  c0      96
//   vfuniforms   c96     48
//

    vs_3_0
    def c144, 0.100000001, 4, 2, 1.10000002
    dcl_color v0
    dcl_texcoord v1
    dcl_position v2
    dcl_color2 v3
    dcl_texcoord o0.xy
    dcl_color o1
    dcl_position o2
    add r0.x, c144.x, v3.x
    frc r0.y, r0.x
    add r0.x, r0.x, -r0.y
    mul r0.x, r0.x, c144.y
    mova a0.x, r0.x
    dp4 o2.x, v2, c0[a0.x]
    dp4 o2.y, v2, c1[a0.x]
    dp4 o2.z, v2, c2[a0.x]
    dp4 o2.w, v2, c3[a0.x]
    mad r0.xy, v3.x, c144.z, c144.wxzw
    frc r0.zw, r0.xyxy
    add r0.xy, r0, -r0.zwzw
    mova a0.xy, r0
    mov r0, c96[a0.x]
    mad o1, v0, r0, c96[a0.y]
    mov o0.xy, v1

// approximately 16 instruction slots used
#endif

extern const BYTE pBinary_VBatchPosition3dText[] =
{
      0,   3, 254, 255, 254, 255, 
     46,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 131,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    124,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
     96,   0,   2,   0,  80,   0, 
      0,   0,   0,   0,   0,   0, 
     96,   0,   0,   0,   2,   0, 
     96,   0,  48,   0, 130,   1, 
    108,   0,   0,   0,   0,   0, 
      0,   0, 118, 102, 109, 117, 
    110, 105, 102, 111, 114, 109, 
    115,   0,   3,   0,   3,   0, 
      4,   0,   4,   0,  24,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  48,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5, 144,   0, 
     15, 160, 205, 204, 204,  61, 
      0,   0, 128,  64,   0,   0, 
      0,  64, 205, 204, 140,  63, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      2, 128,   3,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,   3, 224, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 224, 
      2,   0,   0,   3,   0,   0, 
      1, 128, 144,   0,   0, 160, 
      3,   0,   0, 144,  19,   0, 
      0,   2,   0,   0,   2, 128, 
      0,   0,   0, 128,   2,   0, 
      0,   3,   0,   0,   1, 128, 
      0,   0,   0, 128,   0,   0, 
     85, 129,   5,   0,   0,   3, 
      0,   0,   1, 128,   0,   0, 
      0, 128, 144,   0,  85, 160, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   2,   0, 
      1, 224,   2,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      2,   0,   2, 224,   2,   0, 
    228, 144,   1,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   2,   0,   4, 224, 
      2,   0, 228, 144,   2,  32, 
    228, 160,   0,   0,   0, 176, 
      9,   0,   0,   4,   2,   0, 
      8, 224,   2,   0, 228, 144, 
      3,  32, 228, 160,   0,   0, 
      0, 176,   4,   0,   0,   4, 
      0,   0,   3, 128,   3,   0, 
      0, 144, 144,   0, 170, 160, 
    144,   0, 227, 160,  19,   0, 
      0,   2,   0,   0,  12, 128, 
      0,   0,  68, 128,   2,   0, 
      0,   3,   0,   0,   3, 128, 
      0,   0, 228, 128,   0,   0, 
    238, 129,  46,   0,   0,   2, 
      0,   0,   3, 176,   0,   0, 
    228, 128,   1,   0,   0,   3, 
      0,   0,  15, 128,  96,  32, 
    228, 160,   0,   0,   0, 176, 
      4,   0,   0,   5,   1,   0, 
     15, 224,   0,   0, 228, 144, 
      0,   0, 228, 128,  96,  32, 
    228, 160,   0,   0,  85, 176, 
      1,   0,   0,   2,   0,   0, 
      3, 224,   1,   0, 228, 144, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4x4 vfmuniforms[24];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfmuniforms  c0      96
//

    vs_3_0
    def c96, 0.100000001, 4, 0, 0
    dcl_texcoord v0
    dcl_position v1
    dcl_color1 v2
    dcl_texcoord o0.xy
    dcl_position o1
    add r0.x, c96.x, v2.x
    frc r0.y, r0.x
    add r0.x, r0.x, -r0.y
    mul r0.x, r0.x, c96.y
    mova a0.x, r0.x
    dp4 o1.x, v1, c0[a0.x]
    dp4 o1.y, v1, c1[a0.x]
    dp4 o1.z, v1, c2[a0.x]
    dp4 o1.w, v1, c3[a0.x]
    mov o0.xy, v0

// approximately 10 instruction slots used
#endif

extern const BYTE pBinary_VBatchPosition3dTextColor[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
     96,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 109, 117, 110, 105, 
    102, 111, 114, 109, 115,   0, 
      3,   0,   3,   0,   4,   0, 
      4,   0,  24,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5,  96,   0, 
     15, 160, 205, 204, 204,  61, 
      0,   0, 128,  64,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 224, 
      2,   0,   0,   3,   0,   0, 
      1, 128,  96,   0,   0, 160, 
      2,   0,   0, 144,  19,   0, 
      0,   2,   0,   0,   2, 128, 
      0,   0,   0, 128,   2,   0, 
      0,   3,   0,   0,   1, 128, 
      0,   0,   0, 128,   0,   0, 
     85, 129,   5,   0,   0,   3, 
      0,   0,   1, 128,   0,   0, 
      0, 128,  96,   0,  85, 160, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   1,   0, 
      1, 224,   1,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      1,   0,   2, 224,   1,   0, 
    228, 144,   1,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   1,   0,   4, 224, 
      1,   0, 228, 144,   2,  32, 
    228, 160,   0,   0,   0, 176, 
      9,   0,   0,   4,   1,   0, 
      8, 224,   1,   0, 228, 144, 
      3,  32, 228, 160,   0,   0, 
      0, 176,   1,   0,   0,   2, 
      0,   0,   3, 224,   0,   0, 
    228, 144, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4x4 vfmuniforms[24];
//   float4 vfuniforms[48];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfmuniforms  c0      96
//   vfuniforms   c96     48
//

    vs_3_0
    def c144, 0.100000001, 4, 2, 1.10000002
    dcl_texcoord v0
    dcl_position v1
    dcl_color1 v2
    dcl_texcoord o0
    dcl_texcoord1 o1
    dcl_texcoord2 o2.xy
    dcl_position o3
    add r0.x, c144.x, v2.x
    frc r0.y, r0.x
    add r0.x, r0.x, -r0.y
    mul r0.x, r0.x, c144.y
    mova a0.x, r0.x
    dp4 o3.x, v1, c0[a0.x]
    dp4 o3.y, v1, c1[a0.x]
    dp4 o3.z, v1, c2[a0.x]
    dp4 o3.w, v1, c3[a0.x]
    mad r0.xy, v2.x, c144.z, c144.xwzw
    frc r0.zw, r0.xyxy
    add r0.xy, r0, -r0.zwzw
    mova a0.xy, r0
    mov o1, c96[a0.y]
    mov o0, c96[a0.x]
    mov o2.xy, v0

// approximately 16 instruction slots used
#endif

extern const BYTE pBinary_VBatchPosition3dTextColorCxform[] =
{
      0,   3, 254, 255, 254, 255, 
     46,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 131,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    124,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
     96,   0,   2,   0,  80,   0, 
      0,   0,   0,   0,   0,   0, 
     96,   0,   0,   0,   2,   0, 
     96,   0,  48,   0, 130,   1, 
    108,   0,   0,   0,   0,   0, 
      0,   0, 118, 102, 109, 117, 
    110, 105, 102, 111, 114, 109, 
    115,   0,   3,   0,   3,   0, 
      4,   0,   4,   0,  24,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  48,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5, 144,   0, 
     15, 160, 205, 204, 204,  61, 
      0,   0, 128,  64,   0,   0, 
      0,  64, 205, 204, 140,  63, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      2, 128,   2,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   3,   0,  15, 224, 
      2,   0,   0,   3,   0,   0, 
      1, 128, 144,   0,   0, 160, 
      2,   0,   0, 144,  19,   0, 
      0,   2,   0,   0,   2, 128, 
      0,   0,   0, 128,   2,   0, 
      0,   3,   0,   0,   1, 128, 
      0,   0,   0, 128,   0,   0, 
     85, 129,   5,   0,   0,   3, 
      0,   0,   1, 128,   0,   0, 
      0, 128, 144,   0,  85, 160, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   3,   0, 
      1, 224,   1,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      3,   0,   2, 224,   1,   0, 
    228, 144,   1,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   3,   0,   4, 224, 
      1,   0, 228, 144,   2,  32, 
    228, 160,   0,   0,   0, 176, 
      9,   0,   0,   4,   3,   0, 
      8, 224,   1,   0, 228, 144, 
      3,  32, 228, 160,   0,   0, 
      0, 176,   4,   0,   0,   4, 
      0,   0,   3, 128,   2,   0, 
      0, 144, 144,   0, 170, 160, 
    144,   0, 236, 160,  19,   0, 
      0,   2,   0,   0,  12, 128, 
      0,   0,  68, 128,   2,   0, 
      0,   3,   0,   0,   3, 128, 
      0,   0, 228, 128,   0,   0, 
    238, 129,  46,   0,   0,   2, 
      0,   0,   3, 176,   0,   0, 
    228, 128,   1,   0,   0,   3, 
      1,   0,  15, 224,  96,  32, 
    228, 160,   0,   0,  85, 176, 
      1,   0,   0,   3,   0,   0, 
     15, 224,  96,  32, 228, 160, 
      0,   0,   0, 176,   1,   0, 
      0,   2,   2,   0,   3, 224, 
      0,   0, 228, 144, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex[3];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       3
//

    ps_3_0
    def c0, -0.0627451017, -0.501960814, 1.16400003, 1
    def c1, 1.59599996, -0.813000023, 0, 0
    def c2, 0, -0.39199999, 2.01699996, 0
    dcl_texcoord v0.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    texld r0, v0, s2
    add r0.x, r0.w, c0.y
    mul r0.xyz, r0.x, c1
    texld r1, v0, s0
    add r0.w, r1.w, c0.x
    mad r0.xyz, r0.w, c0.z, r0
    texld r1, v0, s1
    add r0.w, r1.w, c0.y
    mad oC0.xyz, r0.w, c2, r0
    mov oC0.w, c0.w

// approximately 10 instruction slots used (3 texture, 7 arithmetic)
#endif

extern const BYTE pBinary_FYUV[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      3,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      3,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  81,   0, 
      0,   5,   0,   0,  15, 160, 
    129, 128, 128, 189, 129, 128, 
      0, 191, 244, 253, 148,  63, 
      0,   0, 128,  63,  81,   0, 
      0,   5,   1,   0,  15, 160, 
    186,  73, 204,  63, 197,  32, 
     80, 191,   0,   0,   0,   0, 
      0,   0,   0,   0,  81,   0, 
      0,   5,   2,   0,  15, 160, 
      0,   0,   0,   0,  57, 180, 
    200, 190, 135,  22,   1,  64, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      2,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0, 228, 144,   2,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,   1, 128,   0,   0, 
    255, 128,   0,   0,  85, 160, 
      5,   0,   0,   3,   0,   0, 
      7, 128,   0,   0,   0, 128, 
      1,   0, 228, 160,  66,   0, 
      0,   3,   1,   0,  15, 128, 
      0,   0, 228, 144,   0,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,   8, 128,   1,   0, 
    255, 128,   0,   0,   0, 160, 
      4,   0,   0,   4,   0,   0, 
      7, 128,   0,   0, 255, 128, 
      0,   0, 170, 160,   0,   0, 
    228, 128,  66,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    228, 144,   1,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
      8, 128,   1,   0, 255, 128, 
      0,   0,  85, 160,   4,   0, 
      0,   4,   0,   8,   7, 128, 
      0,   0, 255, 128,   2,   0, 
    228, 160,   0,   0, 228, 128, 
      1,   0,   0,   2,   0,   8, 
      8, 128,   0,   0, 255, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex[3];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       3
//

    ps_3_0
    def c0, -0.0627451017, -0.501960814, 1.16400003, 1
    def c1, 1.59599996, -0.813000023, 0, 0
    def c2, 0, -0.39199999, 2.01699996, 0
    dcl_texcoord v0.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    texld r0, v0, s2
    add r0.x, r0.w, c0.y
    mul r0.xyz, r0.x, c1
    texld r1, v0, s0
    add r0.w, r1.w, c0.x
    mad r0.xyz, r0.w, c0.z, r0
    texld r1, v0, s1
    add r0.w, r1.w, c0.y
    mad oC0.xyz, r0.w, c2, r0
    mov oC0.w, c0.w

// approximately 10 instruction slots used (3 texture, 7 arithmetic)
#endif

extern const BYTE pBinary_FYUVMul[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      3,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      3,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  81,   0, 
      0,   5,   0,   0,  15, 160, 
    129, 128, 128, 189, 129, 128, 
      0, 191, 244, 253, 148,  63, 
      0,   0, 128,  63,  81,   0, 
      0,   5,   1,   0,  15, 160, 
    186,  73, 204,  63, 197,  32, 
     80, 191,   0,   0,   0,   0, 
      0,   0,   0,   0,  81,   0, 
      0,   5,   2,   0,  15, 160, 
      0,   0,   0,   0,  57, 180, 
    200, 190, 135,  22,   1,  64, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      2,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0, 228, 144,   2,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,   1, 128,   0,   0, 
    255, 128,   0,   0,  85, 160, 
      5,   0,   0,   3,   0,   0, 
      7, 128,   0,   0,   0, 128, 
      1,   0, 228, 160,  66,   0, 
      0,   3,   1,   0,  15, 128, 
      0,   0, 228, 144,   0,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,   8, 128,   1,   0, 
    255, 128,   0,   0,   0, 160, 
      4,   0,   0,   4,   0,   0, 
      7, 128,   0,   0, 255, 128, 
      0,   0, 170, 160,   0,   0, 
    228, 128,  66,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    228, 144,   1,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
      8, 128,   1,   0, 255, 128, 
      0,   0,  85, 160,   4,   0, 
      0,   4,   0,   8,   7, 128, 
      0,   0, 255, 128,   2,   0, 
    228, 160,   0,   0, 228, 128, 
      1,   0,   0,   2,   0,   8, 
      8, 128,   0,   0, 255, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex[3];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       3
//

    ps_3_0
    def c0, -0.0627451017, -0.501960814, 1.16400003, 0
    def c1, 1.59599996, -0.813000023, 0, 0
    def c2, 0, -0.39199999, 2.01699996, 0
    dcl_color v0.w
    dcl_texcoord v1.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    texld r0, v1, s2
    add r0.x, r0.w, c0.y
    mul r0.xyz, r0.x, c1
    texld r1, v1, s0
    add r0.w, r1.w, c0.x
    mad r0.xyz, r0.w, c0.z, r0
    texld r1, v1, s1
    add r0.w, r1.w, c0.y
    mad oC0.xyz, r0.w, c2, r0
    mov oC0.w, v0.w

// approximately 10 instruction slots used (3 texture, 7 arithmetic)
#endif

extern const BYTE pBinary_FYUVEAlpha[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      3,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      3,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  81,   0, 
      0,   5,   0,   0,  15, 160, 
    129, 128, 128, 189, 129, 128, 
      0, 191, 244, 253, 148,  63, 
      0,   0,   0,   0,  81,   0, 
      0,   5,   1,   0,  15, 160, 
    186,  73, 204,  63, 197,  32, 
     80, 191,   0,   0,   0,   0, 
      0,   0,   0,   0,  81,   0, 
      0,   5,   2,   0,  15, 160, 
      0,   0,   0,   0,  57, 180, 
    200, 190, 135,  22,   1,  64, 
      0,   0,   0,   0,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,   8, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      1,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      2,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      1,   0, 228, 144,   2,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,   1, 128,   0,   0, 
    255, 128,   0,   0,  85, 160, 
      5,   0,   0,   3,   0,   0, 
      7, 128,   0,   0,   0, 128, 
      1,   0, 228, 160,  66,   0, 
      0,   3,   1,   0,  15, 128, 
      1,   0, 228, 144,   0,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,   8, 128,   1,   0, 
    255, 128,   0,   0,   0, 160, 
      4,   0,   0,   4,   0,   0, 
      7, 128,   0,   0, 255, 128, 
      0,   0, 170, 160,   0,   0, 
    228, 128,  66,   0,   0,   3, 
      1,   0,  15, 128,   1,   0, 
    228, 144,   1,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
      8, 128,   1,   0, 255, 128, 
      0,   0,  85, 160,   4,   0, 
      0,   4,   0,   8,   7, 128, 
      0,   0, 255, 128,   2,   0, 
    228, 160,   0,   0, 228, 128, 
      1,   0,   0,   2,   0,   8, 
      8, 128,   0,   0, 255, 144, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex[3];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       3
//

    ps_3_0
    def c0, -0.0627451017, -0.501960814, 1.16400003, -1
    def c1, 1.59599996, -0.813000023, 0, 0
    def c2, 0, -0.39199999, 2.01699996, 0
    dcl_color v0.w
    dcl_texcoord v1.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    texld r0, v1, s2
    add r0.x, r0.w, c0.y
    mul r0.xyz, r0.x, c1
    texld r1, v1, s0
    add r0.w, r1.w, c0.x
    mad r0.xyz, r0.w, c0.z, r0
    texld r1, v1, s1
    add r0.w, r1.w, c0.y
    mad r0.xyz, r0.w, c2, r0
    mov r0.w, v0.w
    add r0, r0, c0.w
    mad oC0, v0.w, r0, -c0.w

// approximately 12 instruction slots used (3 texture, 9 arithmetic)
#endif

extern const BYTE pBinary_FYUVEAlphaMul[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      3,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      3,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  81,   0, 
      0,   5,   0,   0,  15, 160, 
    129, 128, 128, 189, 129, 128, 
      0, 191, 244, 253, 148,  63, 
      0,   0, 128, 191,  81,   0, 
      0,   5,   1,   0,  15, 160, 
    186,  73, 204,  63, 197,  32, 
     80, 191,   0,   0,   0,   0, 
      0,   0,   0,   0,  81,   0, 
      0,   5,   2,   0,  15, 160, 
      0,   0,   0,   0,  57, 180, 
    200, 190, 135,  22,   1,  64, 
      0,   0,   0,   0,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,   8, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      1,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      2,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      1,   0, 228, 144,   2,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,   1, 128,   0,   0, 
    255, 128,   0,   0,  85, 160, 
      5,   0,   0,   3,   0,   0, 
      7, 128,   0,   0,   0, 128, 
      1,   0, 228, 160,  66,   0, 
      0,   3,   1,   0,  15, 128, 
      1,   0, 228, 144,   0,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,   8, 128,   1,   0, 
    255, 128,   0,   0,   0, 160, 
      4,   0,   0,   4,   0,   0, 
      7, 128,   0,   0, 255, 128, 
      0,   0, 170, 160,   0,   0, 
    228, 128,  66,   0,   0,   3, 
      1,   0,  15, 128,   1,   0, 
    228, 144,   1,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
      8, 128,   1,   0, 255, 128, 
      0,   0,  85, 160,   4,   0, 
      0,   4,   0,   0,   7, 128, 
      0,   0, 255, 128,   2,   0, 
    228, 160,   0,   0, 228, 128, 
      1,   0,   0,   2,   0,   0, 
      8, 128,   0,   0, 255, 144, 
      2,   0,   0,   3,   0,   0, 
     15, 128,   0,   0, 228, 128, 
      0,   0, 255, 160,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      0,   0, 255, 144,   0,   0, 
    228, 128,   0,   0, 255, 161, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex[3];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       3
//

    ps_3_0
    def c0, -0.0627451017, -0.501960814, 1.16400003, 1
    def c1, 1.59599996, -0.813000023, 0, 0
    def c2, 0, -0.39199999, 2.01699996, 0
    dcl_texcoord v0
    dcl_texcoord1 v1
    dcl_texcoord2 v2.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    texld r0, v2, s2
    add r0.x, r0.w, c0.y
    mul r0.xyz, r0.x, c1
    texld r1, v2, s0
    add r0.w, r1.w, c0.x
    mad r0.xyz, r0.w, c0.z, r0
    texld r1, v2, s1
    add r0.w, r1.w, c0.y
    mad r0.xyz, r0.w, c2, r0
    mov r0.w, c0.w
    mov r1, v1
    mad oC0, r0, r1, v0

// approximately 12 instruction slots used (3 texture, 9 arithmetic)
#endif

extern const BYTE pBinary_FYUVCxform[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      3,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      3,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  81,   0, 
      0,   5,   0,   0,  15, 160, 
    129, 128, 128, 189, 129, 128, 
      0, 191, 244, 253, 148,  63, 
      0,   0, 128,  63,  81,   0, 
      0,   5,   1,   0,  15, 160, 
    186,  73, 204,  63, 197,  32, 
     80, 191,   0,   0,   0,   0, 
      0,   0,   0,   0,  81,   0, 
      0,   5,   2,   0,  15, 160, 
      0,   0,   0,   0,  57, 180, 
    200, 190, 135,  22,   1,  64, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   2, 128, 
      2,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      2,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      2,   0, 228, 144,   2,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,   1, 128,   0,   0, 
    255, 128,   0,   0,  85, 160, 
      5,   0,   0,   3,   0,   0, 
      7, 128,   0,   0,   0, 128, 
      1,   0, 228, 160,  66,   0, 
      0,   3,   1,   0,  15, 128, 
      2,   0, 228, 144,   0,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,   8, 128,   1,   0, 
    255, 128,   0,   0,   0, 160, 
      4,   0,   0,   4,   0,   0, 
      7, 128,   0,   0, 255, 128, 
      0,   0, 170, 160,   0,   0, 
    228, 128,  66,   0,   0,   3, 
      1,   0,  15, 128,   2,   0, 
    228, 144,   1,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
      8, 128,   1,   0, 255, 128, 
      0,   0,  85, 160,   4,   0, 
      0,   4,   0,   0,   7, 128, 
      0,   0, 255, 128,   2,   0, 
    228, 160,   0,   0, 228, 128, 
      1,   0,   0,   2,   0,   0, 
      8, 128,   0,   0, 255, 160, 
      1,   0,   0,   2,   1,   0, 
     15, 128,   1,   0, 228, 144, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 228, 128, 
      1,   0, 228, 128,   0,   0, 
    228, 144, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex[3];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       3
//

    ps_3_0
    def c0, -0.0627451017, -0.501960814, 1.16400003, 1
    def c1, 1.59599996, -0.813000023, 0, 0
    def c2, 0, -0.39199999, 2.01699996, 0
    dcl_texcoord v0
    dcl_texcoord1 v1
    dcl_texcoord2 v2.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    texld r0, v2, s2
    add r0.x, r0.w, c0.y
    mul r0.xyz, r0.x, c1
    texld r1, v2, s0
    add r0.w, r1.w, c0.x
    mad r0.xyz, r0.w, c0.z, r0
    texld r1, v2, s1
    add r0.w, r1.w, c0.y
    mad r0.xyz, r0.w, c2, r0
    mov r0.w, c0.w
    mov r1, v1
    mad r0, r0, r1, v0
    add r1, r0, -c0.w
    mad oC0, r0.w, r1, c0.w

// approximately 14 instruction slots used (3 texture, 11 arithmetic)
#endif

extern const BYTE pBinary_FYUVCxformMul[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      3,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      3,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  81,   0, 
      0,   5,   0,   0,  15, 160, 
    129, 128, 128, 189, 129, 128, 
      0, 191, 244, 253, 148,  63, 
      0,   0, 128,  63,  81,   0, 
      0,   5,   1,   0,  15, 160, 
    186,  73, 204,  63, 197,  32, 
     80, 191,   0,   0,   0,   0, 
      0,   0,   0,   0,  81,   0, 
      0,   5,   2,   0,  15, 160, 
      0,   0,   0,   0,  57, 180, 
    200, 190, 135,  22,   1,  64, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   2, 128, 
      2,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      2,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      2,   0, 228, 144,   2,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,   1, 128,   0,   0, 
    255, 128,   0,   0,  85, 160, 
      5,   0,   0,   3,   0,   0, 
      7, 128,   0,   0,   0, 128, 
      1,   0, 228, 160,  66,   0, 
      0,   3,   1,   0,  15, 128, 
      2,   0, 228, 144,   0,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,   8, 128,   1,   0, 
    255, 128,   0,   0,   0, 160, 
      4,   0,   0,   4,   0,   0, 
      7, 128,   0,   0, 255, 128, 
      0,   0, 170, 160,   0,   0, 
    228, 128,  66,   0,   0,   3, 
      1,   0,  15, 128,   2,   0, 
    228, 144,   1,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
      8, 128,   1,   0, 255, 128, 
      0,   0,  85, 160,   4,   0, 
      0,   4,   0,   0,   7, 128, 
      0,   0, 255, 128,   2,   0, 
    228, 160,   0,   0, 228, 128, 
      1,   0,   0,   2,   0,   0, 
      8, 128,   0,   0, 255, 160, 
      1,   0,   0,   2,   1,   0, 
     15, 128,   1,   0, 228, 144, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   0,   0, 228, 128, 
      1,   0, 228, 128,   0,   0, 
    228, 144,   2,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    228, 128,   0,   0, 255, 161, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 255, 128, 
      1,   0, 228, 128,   0,   0, 
    255, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex[3];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       3
//

    ps_3_0
    def c0, -0.0627451017, -0.501960814, 1.16400003, 1
    def c1, 1.59599996, -0.813000023, 0, 0
    def c2, 0, -0.39199999, 2.01699996, 0
    dcl_color v0.w
    dcl_texcoord v1
    dcl_texcoord1 v2
    dcl_texcoord2 v3.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    texld r0, v3, s2
    add r0.x, r0.w, c0.y
    mul r0.xyz, r0.x, c1
    texld r1, v3, s0
    add r0.w, r1.w, c0.x
    mad r0.xyz, r0.w, c0.z, r0
    texld r1, v3, s1
    add r0.w, r1.w, c0.y
    mad r0.xyz, r0.w, c2, r0
    mov r0.w, c0.w
    mov r1, v2
    mad r0, r0, r1, v1
    mul oC0.w, r0.w, v0.w
    mov oC0.xyz, r0

// approximately 14 instruction slots used (3 texture, 11 arithmetic)
#endif

extern const BYTE pBinary_FYUVCxformEAlpha[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      3,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      3,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  81,   0, 
      0,   5,   0,   0,  15, 160, 
    129, 128, 128, 189, 129, 128, 
      0, 191, 244, 253, 148,  63, 
      0,   0, 128,  63,  81,   0, 
      0,   5,   1,   0,  15, 160, 
    186,  73, 204,  63, 197,  32, 
     80, 191,   0,   0,   0,   0, 
      0,   0,   0,   0,  81,   0, 
      0,   5,   2,   0,  15, 160, 
      0,   0,   0,   0,  57, 180, 
    200, 190, 135,  22,   1,  64, 
      0,   0,   0,   0,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,   8, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      2,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   2, 128, 
      3,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      2,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      3,   0, 228, 144,   2,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,   1, 128,   0,   0, 
    255, 128,   0,   0,  85, 160, 
      5,   0,   0,   3,   0,   0, 
      7, 128,   0,   0,   0, 128, 
      1,   0, 228, 160,  66,   0, 
      0,   3,   1,   0,  15, 128, 
      3,   0, 228, 144,   0,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,   8, 128,   1,   0, 
    255, 128,   0,   0,   0, 160, 
      4,   0,   0,   4,   0,   0, 
      7, 128,   0,   0, 255, 128, 
      0,   0, 170, 160,   0,   0, 
    228, 128,  66,   0,   0,   3, 
      1,   0,  15, 128,   3,   0, 
    228, 144,   1,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
      8, 128,   1,   0, 255, 128, 
      0,   0,  85, 160,   4,   0, 
      0,   4,   0,   0,   7, 128, 
      0,   0, 255, 128,   2,   0, 
    228, 160,   0,   0, 228, 128, 
      1,   0,   0,   2,   0,   0, 
      8, 128,   0,   0, 255, 160, 
      1,   0,   0,   2,   1,   0, 
     15, 128,   2,   0, 228, 144, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   0,   0, 228, 128, 
      1,   0, 228, 128,   1,   0, 
    228, 144,   5,   0,   0,   3, 
      0,   8,   8, 128,   0,   0, 
    255, 128,   0,   0, 255, 144, 
      1,   0,   0,   2,   0,   8, 
      7, 128,   0,   0, 228, 128, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex[3];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       3
//

    ps_3_0
    def c0, -0.0627451017, -0.501960814, 1.16400003, 1
    def c1, 1.59599996, -0.813000023, 0, 0
    def c2, 0, -0.39199999, 2.01699996, 0
    dcl_color v0.w
    dcl_texcoord v1
    dcl_texcoord1 v2
    dcl_texcoord2 v3.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    texld r0, v3, s2
    add r0.x, r0.w, c0.y
    mul r0.xyz, r0.x, c1
    texld r1, v3, s0
    add r0.w, r1.w, c0.x
    mad r0.xyz, r0.w, c0.z, r0
    texld r1, v3, s1
    add r0.w, r1.w, c0.y
    mad r0.xyz, r0.w, c2, r0
    mov r0.w, c0.w
    mov r1, v2
    mad r0, r0, r1, v1
    mul r0.w, r0.w, v0.w
    add r1, r0, -c0.w
    mad oC0, r0.w, r1, c0.w

// approximately 15 instruction slots used (3 texture, 12 arithmetic)
#endif

extern const BYTE pBinary_FYUVCxformEAlphaMul[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      3,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      3,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  81,   0, 
      0,   5,   0,   0,  15, 160, 
    129, 128, 128, 189, 129, 128, 
      0, 191, 244, 253, 148,  63, 
      0,   0, 128,  63,  81,   0, 
      0,   5,   1,   0,  15, 160, 
    186,  73, 204,  63, 197,  32, 
     80, 191,   0,   0,   0,   0, 
      0,   0,   0,   0,  81,   0, 
      0,   5,   2,   0,  15, 160, 
      0,   0,   0,   0,  57, 180, 
    200, 190, 135,  22,   1,  64, 
      0,   0,   0,   0,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,   8, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      2,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   2, 128, 
      3,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      2,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      3,   0, 228, 144,   2,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,   1, 128,   0,   0, 
    255, 128,   0,   0,  85, 160, 
      5,   0,   0,   3,   0,   0, 
      7, 128,   0,   0,   0, 128, 
      1,   0, 228, 160,  66,   0, 
      0,   3,   1,   0,  15, 128, 
      3,   0, 228, 144,   0,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,   8, 128,   1,   0, 
    255, 128,   0,   0,   0, 160, 
      4,   0,   0,   4,   0,   0, 
      7, 128,   0,   0, 255, 128, 
      0,   0, 170, 160,   0,   0, 
    228, 128,  66,   0,   0,   3, 
      1,   0,  15, 128,   3,   0, 
    228, 144,   1,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
      8, 128,   1,   0, 255, 128, 
      0,   0,  85, 160,   4,   0, 
      0,   4,   0,   0,   7, 128, 
      0,   0, 255, 128,   2,   0, 
    228, 160,   0,   0, 228, 128, 
      1,   0,   0,   2,   0,   0, 
      8, 128,   0,   0, 255, 160, 
      1,   0,   0,   2,   1,   0, 
     15, 128,   2,   0, 228, 144, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   0,   0, 228, 128, 
      1,   0, 228, 128,   1,   0, 
    228, 144,   5,   0,   0,   3, 
      0,   0,   8, 128,   0,   0, 
    255, 128,   0,   0, 255, 144, 
      2,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 228, 128, 
      0,   0, 255, 161,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      0,   0, 255, 128,   1,   0, 
    228, 128,   0,   0, 255, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex[4];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       4
//

    ps_3_0
    def c0, -0.0627451017, -0.501960814, 1.16400003, 0
    def c1, 1.59599996, -0.813000023, 0, 0
    def c2, 0, -0.39199999, 2.01699996, 0
    dcl_texcoord v0.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    texld r0, v0, s2
    add r0.x, r0.w, c0.y
    mul r0.xyz, r0.x, c1
    texld r1, v0, s0
    add r0.w, r1.w, c0.x
    mad r0.xyz, r0.w, c0.z, r0
    texld r1, v0, s1
    add r0.w, r1.w, c0.y
    mad oC0.xyz, r0.w, c2, r0
    texld r0, v0, s3
    mov oC0.w, r0.w

// approximately 11 instruction slots used (4 texture, 7 arithmetic)
#endif

extern const BYTE pBinary_FYUVA[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      4,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      4,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  81,   0, 
      0,   5,   0,   0,  15, 160, 
    129, 128, 128, 189, 129, 128, 
      0, 191, 244, 253, 148,  63, 
      0,   0,   0,   0,  81,   0, 
      0,   5,   1,   0,  15, 160, 
    186,  73, 204,  63, 197,  32, 
     80, 191,   0,   0,   0,   0, 
      0,   0,   0,   0,  81,   0, 
      0,   5,   2,   0,  15, 160, 
      0,   0,   0,   0,  57, 180, 
    200, 190, 135,  22,   1,  64, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      2,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      3,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0, 228, 144,   2,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,   1, 128,   0,   0, 
    255, 128,   0,   0,  85, 160, 
      5,   0,   0,   3,   0,   0, 
      7, 128,   0,   0,   0, 128, 
      1,   0, 228, 160,  66,   0, 
      0,   3,   1,   0,  15, 128, 
      0,   0, 228, 144,   0,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,   8, 128,   1,   0, 
    255, 128,   0,   0,   0, 160, 
      4,   0,   0,   4,   0,   0, 
      7, 128,   0,   0, 255, 128, 
      0,   0, 170, 160,   0,   0, 
    228, 128,  66,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    228, 144,   1,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
      8, 128,   1,   0, 255, 128, 
      0,   0,  85, 160,   4,   0, 
      0,   4,   0,   8,   7, 128, 
      0,   0, 255, 128,   2,   0, 
    228, 160,   0,   0, 228, 128, 
     66,   0,   0,   3,   0,   0, 
     15, 128,   0,   0, 228, 144, 
      3,   8, 228, 160,   1,   0, 
      0,   2,   0,   8,   8, 128, 
      0,   0, 255, 128, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex[4];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       4
//

    ps_3_0
    def c0, -0.0627451017, -0.501960814, 1.16400003, -1
    def c1, 1.59599996, -0.813000023, 0, 0
    def c2, 0, -0.39199999, 2.01699996, 0
    dcl_texcoord v0.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    texld r0, v0, s2
    add r0.x, r0.w, c0.y
    mul r0.xyz, r0.x, c1
    texld r1, v0, s0
    add r0.w, r1.w, c0.x
    mad r0.xyz, r0.w, c0.z, r0
    texld r1, v0, s1
    add r0.w, r1.w, c0.y
    mad r0.xyz, r0.w, c2, r0
    texld r1, v0, s3
    mov r0.w, r1.w
    add r1, r0, c0.w
    mad oC0, r0.w, r1, -c0.w

// approximately 13 instruction slots used (4 texture, 9 arithmetic)
#endif

extern const BYTE pBinary_FYUVAMul[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      4,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      4,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  81,   0, 
      0,   5,   0,   0,  15, 160, 
    129, 128, 128, 189, 129, 128, 
      0, 191, 244, 253, 148,  63, 
      0,   0, 128, 191,  81,   0, 
      0,   5,   1,   0,  15, 160, 
    186,  73, 204,  63, 197,  32, 
     80, 191,   0,   0,   0,   0, 
      0,   0,   0,   0,  81,   0, 
      0,   5,   2,   0,  15, 160, 
      0,   0,   0,   0,  57, 180, 
    200, 190, 135,  22,   1,  64, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      2,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      3,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0, 228, 144,   2,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,   1, 128,   0,   0, 
    255, 128,   0,   0,  85, 160, 
      5,   0,   0,   3,   0,   0, 
      7, 128,   0,   0,   0, 128, 
      1,   0, 228, 160,  66,   0, 
      0,   3,   1,   0,  15, 128, 
      0,   0, 228, 144,   0,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,   8, 128,   1,   0, 
    255, 128,   0,   0,   0, 160, 
      4,   0,   0,   4,   0,   0, 
      7, 128,   0,   0, 255, 128, 
      0,   0, 170, 160,   0,   0, 
    228, 128,  66,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    228, 144,   1,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
      8, 128,   1,   0, 255, 128, 
      0,   0,  85, 160,   4,   0, 
      0,   4,   0,   0,   7, 128, 
      0,   0, 255, 128,   2,   0, 
    228, 160,   0,   0, 228, 128, 
     66,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 228, 144, 
      3,   8, 228, 160,   1,   0, 
      0,   2,   0,   0,   8, 128, 
      1,   0, 255, 128,   2,   0, 
      0,   3,   1,   0,  15, 128, 
      0,   0, 228, 128,   0,   0, 
    255, 160,   4,   0,   0,   4, 
      0,   8,  15, 128,   0,   0, 
    255, 128,   1,   0, 228, 128, 
      0,   0, 255, 161, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex[4];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       4
//

    ps_3_0
    def c0, -0.0627451017, -0.501960814, 1.16400003, 0
    def c1, 1.59599996, -0.813000023, 0, 0
    def c2, 0, -0.39199999, 2.01699996, 0
    dcl_color v0.w
    dcl_texcoord v1.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    texld r0, v1, s2
    add r0.x, r0.w, c0.y
    mul r0.xyz, r0.x, c1
    texld r1, v1, s0
    add r0.w, r1.w, c0.x
    mad r0.xyz, r0.w, c0.z, r0
    texld r1, v1, s1
    add r0.w, r1.w, c0.y
    mad oC0.xyz, r0.w, c2, r0
    texld r0, v1, s3
    mul oC0.w, r0.w, v0.w

// approximately 11 instruction slots used (4 texture, 7 arithmetic)
#endif

extern const BYTE pBinary_FYUVAEAlpha[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      4,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      4,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  81,   0, 
      0,   5,   0,   0,  15, 160, 
    129, 128, 128, 189, 129, 128, 
      0, 191, 244, 253, 148,  63, 
      0,   0,   0,   0,  81,   0, 
      0,   5,   1,   0,  15, 160, 
    186,  73, 204,  63, 197,  32, 
     80, 191,   0,   0,   0,   0, 
      0,   0,   0,   0,  81,   0, 
      0,   5,   2,   0,  15, 160, 
      0,   0,   0,   0,  57, 180, 
    200, 190, 135,  22,   1,  64, 
      0,   0,   0,   0,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,   8, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      1,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      2,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      3,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      1,   0, 228, 144,   2,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,   1, 128,   0,   0, 
    255, 128,   0,   0,  85, 160, 
      5,   0,   0,   3,   0,   0, 
      7, 128,   0,   0,   0, 128, 
      1,   0, 228, 160,  66,   0, 
      0,   3,   1,   0,  15, 128, 
      1,   0, 228, 144,   0,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,   8, 128,   1,   0, 
    255, 128,   0,   0,   0, 160, 
      4,   0,   0,   4,   0,   0, 
      7, 128,   0,   0, 255, 128, 
      0,   0, 170, 160,   0,   0, 
    228, 128,  66,   0,   0,   3, 
      1,   0,  15, 128,   1,   0, 
    228, 144,   1,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
      8, 128,   1,   0, 255, 128, 
      0,   0,  85, 160,   4,   0, 
      0,   4,   0,   8,   7, 128, 
      0,   0, 255, 128,   2,   0, 
    228, 160,   0,   0, 228, 128, 
     66,   0,   0,   3,   0,   0, 
     15, 128,   1,   0, 228, 144, 
      3,   8, 228, 160,   5,   0, 
      0,   3,   0,   8,   8, 128, 
      0,   0, 255, 128,   0,   0, 
    255, 144, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex[4];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       4
//

    ps_3_0
    def c0, -0.0627451017, -0.501960814, 1.16400003, -1
    def c1, 1.59599996, -0.813000023, 0, 0
    def c2, 0, -0.39199999, 2.01699996, 0
    dcl_color v0.w
    dcl_texcoord v1.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    texld r0, v1, s2
    add r0.x, r0.w, c0.y
    mul r0.xyz, r0.x, c1
    texld r1, v1, s0
    add r0.w, r1.w, c0.x
    mad r0.xyz, r0.w, c0.z, r0
    texld r1, v1, s1
    add r0.w, r1.w, c0.y
    mad r0.xyz, r0.w, c2, r0
    texld r1, v1, s3
    mul r0.w, r1.w, v0.w
    add r1, r0, c0.w
    mad oC0, r0.w, r1, -c0.w

// approximately 13 instruction slots used (4 texture, 9 arithmetic)
#endif

extern const BYTE pBinary_FYUVAEAlphaMul[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      4,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      4,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  81,   0, 
      0,   5,   0,   0,  15, 160, 
    129, 128, 128, 189, 129, 128, 
      0, 191, 244, 253, 148,  63, 
      0,   0, 128, 191,  81,   0, 
      0,   5,   1,   0,  15, 160, 
    186,  73, 204,  63, 197,  32, 
     80, 191,   0,   0,   0,   0, 
      0,   0,   0,   0,  81,   0, 
      0,   5,   2,   0,  15, 160, 
      0,   0,   0,   0,  57, 180, 
    200, 190, 135,  22,   1,  64, 
      0,   0,   0,   0,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,   8, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      1,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      2,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      3,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      1,   0, 228, 144,   2,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,   1, 128,   0,   0, 
    255, 128,   0,   0,  85, 160, 
      5,   0,   0,   3,   0,   0, 
      7, 128,   0,   0,   0, 128, 
      1,   0, 228, 160,  66,   0, 
      0,   3,   1,   0,  15, 128, 
      1,   0, 228, 144,   0,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,   8, 128,   1,   0, 
    255, 128,   0,   0,   0, 160, 
      4,   0,   0,   4,   0,   0, 
      7, 128,   0,   0, 255, 128, 
      0,   0, 170, 160,   0,   0, 
    228, 128,  66,   0,   0,   3, 
      1,   0,  15, 128,   1,   0, 
    228, 144,   1,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
      8, 128,   1,   0, 255, 128, 
      0,   0,  85, 160,   4,   0, 
      0,   4,   0,   0,   7, 128, 
      0,   0, 255, 128,   2,   0, 
    228, 160,   0,   0, 228, 128, 
     66,   0,   0,   3,   1,   0, 
     15, 128,   1,   0, 228, 144, 
      3,   8, 228, 160,   5,   0, 
      0,   3,   0,   0,   8, 128, 
      1,   0, 255, 128,   0,   0, 
    255, 144,   2,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    228, 128,   0,   0, 255, 160, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 255, 128, 
      1,   0, 228, 128,   0,   0, 
    255, 161, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex[4];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       4
//

    ps_3_0
    def c0, -0.0627451017, -0.501960814, 1.16400003, 0
    def c1, 1.59599996, -0.813000023, 0, 0
    def c2, 0, -0.39199999, 2.01699996, 0
    dcl_texcoord v0
    dcl_texcoord1 v1
    dcl_texcoord2 v2.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    texld r0, v2, s2
    add r0.x, r0.w, c0.y
    mul r0.xyz, r0.x, c1
    texld r1, v2, s0
    add r0.w, r1.w, c0.x
    mad r0.xyz, r0.w, c0.z, r0
    texld r1, v2, s1
    add r0.w, r1.w, c0.y
    mad r0.xyz, r0.w, c2, r0
    texld r1, v2, s3
    mov r0.w, r1.w
    mov r1, v1
    mad oC0, r0, r1, v0

// approximately 13 instruction slots used (4 texture, 9 arithmetic)
#endif

extern const BYTE pBinary_FYUVACxform[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      4,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      4,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  81,   0, 
      0,   5,   0,   0,  15, 160, 
    129, 128, 128, 189, 129, 128, 
      0, 191, 244, 253, 148,  63, 
      0,   0,   0,   0,  81,   0, 
      0,   5,   1,   0,  15, 160, 
    186,  73, 204,  63, 197,  32, 
     80, 191,   0,   0,   0,   0, 
      0,   0,   0,   0,  81,   0, 
      0,   5,   2,   0,  15, 160, 
      0,   0,   0,   0,  57, 180, 
    200, 190, 135,  22,   1,  64, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   2, 128, 
      2,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      2,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      3,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      2,   0, 228, 144,   2,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,   1, 128,   0,   0, 
    255, 128,   0,   0,  85, 160, 
      5,   0,   0,   3,   0,   0, 
      7, 128,   0,   0,   0, 128, 
      1,   0, 228, 160,  66,   0, 
      0,   3,   1,   0,  15, 128, 
      2,   0, 228, 144,   0,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,   8, 128,   1,   0, 
    255, 128,   0,   0,   0, 160, 
      4,   0,   0,   4,   0,   0, 
      7, 128,   0,   0, 255, 128, 
      0,   0, 170, 160,   0,   0, 
    228, 128,  66,   0,   0,   3, 
      1,   0,  15, 128,   2,   0, 
    228, 144,   1,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
      8, 128,   1,   0, 255, 128, 
      0,   0,  85, 160,   4,   0, 
      0,   4,   0,   0,   7, 128, 
      0,   0, 255, 128,   2,   0, 
    228, 160,   0,   0, 228, 128, 
     66,   0,   0,   3,   1,   0, 
     15, 128,   2,   0, 228, 144, 
      3,   8, 228, 160,   1,   0, 
      0,   2,   0,   0,   8, 128, 
      1,   0, 255, 128,   1,   0, 
      0,   2,   1,   0,  15, 128, 
      1,   0, 228, 144,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      0,   0, 228, 128,   1,   0, 
    228, 128,   0,   0, 228, 144, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex[4];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       4
//

    ps_3_0
    def c0, -0.0627451017, -0.501960814, 1.16400003, -1
    def c1, 1.59599996, -0.813000023, 0, 0
    def c2, 0, -0.39199999, 2.01699996, 0
    dcl_texcoord v0
    dcl_texcoord1 v1
    dcl_texcoord2 v2.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    texld r0, v2, s2
    add r0.x, r0.w, c0.y
    mul r0.xyz, r0.x, c1
    texld r1, v2, s0
    add r0.w, r1.w, c0.x
    mad r0.xyz, r0.w, c0.z, r0
    texld r1, v2, s1
    add r0.w, r1.w, c0.y
    mad r0.xyz, r0.w, c2, r0
    texld r1, v2, s3
    mov r0.w, r1.w
    mov r1, v1
    mad r0, r0, r1, v0
    add r1, r0, c0.w
    mad oC0, r0.w, r1, -c0.w

// approximately 15 instruction slots used (4 texture, 11 arithmetic)
#endif

extern const BYTE pBinary_FYUVACxformMul[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      4,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      4,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  81,   0, 
      0,   5,   0,   0,  15, 160, 
    129, 128, 128, 189, 129, 128, 
      0, 191, 244, 253, 148,  63, 
      0,   0, 128, 191,  81,   0, 
      0,   5,   1,   0,  15, 160, 
    186,  73, 204,  63, 197,  32, 
     80, 191,   0,   0,   0,   0, 
      0,   0,   0,   0,  81,   0, 
      0,   5,   2,   0,  15, 160, 
      0,   0,   0,   0,  57, 180, 
    200, 190, 135,  22,   1,  64, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   2, 128, 
      2,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      2,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      3,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      2,   0, 228, 144,   2,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,   1, 128,   0,   0, 
    255, 128,   0,   0,  85, 160, 
      5,   0,   0,   3,   0,   0, 
      7, 128,   0,   0,   0, 128, 
      1,   0, 228, 160,  66,   0, 
      0,   3,   1,   0,  15, 128, 
      2,   0, 228, 144,   0,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,   8, 128,   1,   0, 
    255, 128,   0,   0,   0, 160, 
      4,   0,   0,   4,   0,   0, 
      7, 128,   0,   0, 255, 128, 
      0,   0, 170, 160,   0,   0, 
    228, 128,  66,   0,   0,   3, 
      1,   0,  15, 128,   2,   0, 
    228, 144,   1,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
      8, 128,   1,   0, 255, 128, 
      0,   0,  85, 160,   4,   0, 
      0,   4,   0,   0,   7, 128, 
      0,   0, 255, 128,   2,   0, 
    228, 160,   0,   0, 228, 128, 
     66,   0,   0,   3,   1,   0, 
     15, 128,   2,   0, 228, 144, 
      3,   8, 228, 160,   1,   0, 
      0,   2,   0,   0,   8, 128, 
      1,   0, 255, 128,   1,   0, 
      0,   2,   1,   0,  15, 128, 
      1,   0, 228, 144,   4,   0, 
      0,   4,   0,   0,  15, 128, 
      0,   0, 228, 128,   1,   0, 
    228, 128,   0,   0, 228, 144, 
      2,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 228, 128, 
      0,   0, 255, 160,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      0,   0, 255, 128,   1,   0, 
    228, 128,   0,   0, 255, 161, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex[4];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       4
//

    ps_3_0
    def c0, -0.0627451017, -0.501960814, 1.16400003, 0
    def c1, 1.59599996, -0.813000023, 0, 0
    def c2, 0, -0.39199999, 2.01699996, 0
    dcl_color v0.w
    dcl_texcoord v1
    dcl_texcoord1 v2
    dcl_texcoord2 v3.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    texld r0, v3, s2
    add r0.x, r0.w, c0.y
    mul r0.xyz, r0.x, c1
    texld r1, v3, s0
    add r0.w, r1.w, c0.x
    mad r0.xyz, r0.w, c0.z, r0
    texld r1, v3, s1
    add r0.w, r1.w, c0.y
    mad r0.xyz, r0.w, c2, r0
    texld r1, v3, s3
    mov r0.w, r1.w
    mov r1, v2
    mad r0, r0, r1, v1
    mul oC0.w, r0.w, v0.w
    mov oC0.xyz, r0

// approximately 15 instruction slots used (4 texture, 11 arithmetic)
#endif

extern const BYTE pBinary_FYUVACxformEAlpha[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      4,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      4,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  81,   0, 
      0,   5,   0,   0,  15, 160, 
    129, 128, 128, 189, 129, 128, 
      0, 191, 244, 253, 148,  63, 
      0,   0,   0,   0,  81,   0, 
      0,   5,   1,   0,  15, 160, 
    186,  73, 204,  63, 197,  32, 
     80, 191,   0,   0,   0,   0, 
      0,   0,   0,   0,  81,   0, 
      0,   5,   2,   0,  15, 160, 
      0,   0,   0,   0,  57, 180, 
    200, 190, 135,  22,   1,  64, 
      0,   0,   0,   0,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,   8, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      2,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   2, 128, 
      3,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      2,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      3,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      3,   0, 228, 144,   2,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,   1, 128,   0,   0, 
    255, 128,   0,   0,  85, 160, 
      5,   0,   0,   3,   0,   0, 
      7, 128,   0,   0,   0, 128, 
      1,   0, 228, 160,  66,   0, 
      0,   3,   1,   0,  15, 128, 
      3,   0, 228, 144,   0,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,   8, 128,   1,   0, 
    255, 128,   0,   0,   0, 160, 
      4,   0,   0,   4,   0,   0, 
      7, 128,   0,   0, 255, 128, 
      0,   0, 170, 160,   0,   0, 
    228, 128,  66,   0,   0,   3, 
      1,   0,  15, 128,   3,   0, 
    228, 144,   1,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
      8, 128,   1,   0, 255, 128, 
      0,   0,  85, 160,   4,   0, 
      0,   4,   0,   0,   7, 128, 
      0,   0, 255, 128,   2,   0, 
    228, 160,   0,   0, 228, 128, 
     66,   0,   0,   3,   1,   0, 
     15, 128,   3,   0, 228, 144, 
      3,   8, 228, 160,   1,   0, 
      0,   2,   0,   0,   8, 128, 
      1,   0, 255, 128,   1,   0, 
      0,   2,   1,   0,  15, 128, 
      2,   0, 228, 144,   4,   0, 
      0,   4,   0,   0,  15, 128, 
      0,   0, 228, 128,   1,   0, 
    228, 128,   1,   0, 228, 144, 
      5,   0,   0,   3,   0,   8, 
      8, 128,   0,   0, 255, 128, 
      0,   0, 255, 144,   1,   0, 
      0,   2,   0,   8,   7, 128, 
      0,   0, 228, 128, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex[4];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       4
//

    ps_3_0
    def c0, -0.0627451017, -0.501960814, 1.16400003, -1
    def c1, 1.59599996, -0.813000023, 0, 0
    def c2, 0, -0.39199999, 2.01699996, 0
    dcl_color v0.w
    dcl_texcoord v1
    dcl_texcoord1 v2
    dcl_texcoord2 v3.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    texld r0, v3, s2
    add r0.x, r0.w, c0.y
    mul r0.xyz, r0.x, c1
    texld r1, v3, s0
    add r0.w, r1.w, c0.x
    mad r0.xyz, r0.w, c0.z, r0
    texld r1, v3, s1
    add r0.w, r1.w, c0.y
    mad r0.xyz, r0.w, c2, r0
    texld r1, v3, s3
    mov r0.w, r1.w
    mov r1, v2
    mad r0, r0, r1, v1
    mul r0.w, r0.w, v0.w
    add r1, r0, c0.w
    mad oC0, r0.w, r1, -c0.w

// approximately 16 instruction slots used (4 texture, 12 arithmetic)
#endif

extern const BYTE pBinary_FYUVACxformEAlphaMul[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      4,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      4,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  81,   0, 
      0,   5,   0,   0,  15, 160, 
    129, 128, 128, 189, 129, 128, 
      0, 191, 244, 253, 148,  63, 
      0,   0, 128, 191,  81,   0, 
      0,   5,   1,   0,  15, 160, 
    186,  73, 204,  63, 197,  32, 
     80, 191,   0,   0,   0,   0, 
      0,   0,   0,   0,  81,   0, 
      0,   5,   2,   0,  15, 160, 
      0,   0,   0,   0,  57, 180, 
    200, 190, 135,  22,   1,  64, 
      0,   0,   0,   0,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,   8, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      2,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   2, 128, 
      3,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      2,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      3,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      3,   0, 228, 144,   2,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,   1, 128,   0,   0, 
    255, 128,   0,   0,  85, 160, 
      5,   0,   0,   3,   0,   0, 
      7, 128,   0,   0,   0, 128, 
      1,   0, 228, 160,  66,   0, 
      0,   3,   1,   0,  15, 128, 
      3,   0, 228, 144,   0,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,   8, 128,   1,   0, 
    255, 128,   0,   0,   0, 160, 
      4,   0,   0,   4,   0,   0, 
      7, 128,   0,   0, 255, 128, 
      0,   0, 170, 160,   0,   0, 
    228, 128,  66,   0,   0,   3, 
      1,   0,  15, 128,   3,   0, 
    228, 144,   1,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
      8, 128,   1,   0, 255, 128, 
      0,   0,  85, 160,   4,   0, 
      0,   4,   0,   0,   7, 128, 
      0,   0, 255, 128,   2,   0, 
    228, 160,   0,   0, 228, 128, 
     66,   0,   0,   3,   1,   0, 
     15, 128,   3,   0, 228, 144, 
      3,   8, 228, 160,   1,   0, 
      0,   2,   0,   0,   8, 128, 
      1,   0, 255, 128,   1,   0, 
      0,   2,   1,   0,  15, 128, 
      2,   0, 228, 144,   4,   0, 
      0,   4,   0,   0,  15, 128, 
      0,   0, 228, 128,   1,   0, 
    228, 128,   1,   0, 228, 144, 
      5,   0,   0,   3,   0,   0, 
      8, 128,   0,   0, 255, 128, 
      0,   0, 255, 144,   2,   0, 
      0,   3,   1,   0,  15, 128, 
      0,   0, 228, 128,   0,   0, 
    255, 160,   4,   0,   0,   4, 
      0,   8,  15, 128,   0,   0, 
    255, 128,   1,   0, 228, 128, 
      0,   0, 255, 161, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 cxadd;
//   float4x4 cxmul;
//   sampler2D tex;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       4
//   tex          s0       1
//

    ps_3_0
    dcl_texcoord v0.xy
    dcl_2d s0
    texld r0, v0, s0
    dp4 r1.x, r0, c1
    dp4 r1.y, r0, c2
    dp4 r1.z, r0, c3
    dp4 r1.w, r0, c4
    add r0.x, r0.w, c0.w
    mad oC0, c0, r0.x, r1

// approximately 7 instruction slots used (1 texture, 6 arithmetic)
#endif

extern const BYTE pBinary_FTexTGCMatrixAc[] =
{
      0,   3, 255, 255, 254, 255, 
     54,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 163,   0, 
      0,   0,   0,   3, 255, 255, 
      3,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    156,   0,   0,   0,  88,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0,  96,   0, 
      0,   0,   0,   0,   0,   0, 
    112,   0,   0,   0,   2,   0, 
      1,   0,   4,   0,   6,   0, 
    120,   0,   0,   0,   0,   0, 
      0,   0, 136,   0,   0,   0, 
      3,   0,   0,   0,   1,   0, 
      2,   0, 140,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
     97, 100, 100,   0, 171, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
    109, 117, 108,   0, 171, 171, 
      3,   0,   3,   0,   4,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120,   0,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  51,  48,  46,  56, 
     52,  48,  48,  46,  48,   0, 
    171, 171,  31,   0,   0,   2, 
      5,   0,   0, 128,   0,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  66,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 144,   0,   8, 228, 160, 
      9,   0,   0,   3,   1,   0, 
      1, 128,   0,   0, 228, 128, 
      1,   0, 228, 160,   9,   0, 
      0,   3,   1,   0,   2, 128, 
      0,   0, 228, 128,   2,   0, 
    228, 160,   9,   0,   0,   3, 
      1,   0,   4, 128,   0,   0, 
    228, 128,   3,   0, 228, 160, 
      9,   0,   0,   3,   1,   0, 
      8, 128,   0,   0, 228, 128, 
      4,   0, 228, 160,   2,   0, 
      0,   3,   0,   0,   1, 128, 
      0,   0, 255, 128,   0,   0, 
    255, 160,   4,   0,   0,   4, 
      0,   8,  15, 128,   0,   0, 
    228, 160,   0,   0,   0, 128, 
      1,   0, 228, 128, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 cxadd;
//   float4x4 cxmul;
//   sampler2D tex;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       4
//   tex          s0       1
//

    ps_3_0
    def c5, -1, 1, 0, 0
    dcl_texcoord v0.xy
    dcl_2d s0
    texld r0, v0, s0
    dp4 r1.x, r0, c1
    dp4 r1.y, r0, c2
    dp4 r1.z, r0, c3
    dp4 r1.w, r0, c4
    add r0.x, r0.w, c0.w
    mad r0, c0, r0.x, r1
    add r1, r0, c5.x
    mad oC0, r0.w, r1, c5.y

// approximately 9 instruction slots used (1 texture, 8 arithmetic)
#endif

extern const BYTE pBinary_FTexTGCMatrixAcMul[] =
{
      0,   3, 255, 255, 254, 255, 
     54,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 163,   0, 
      0,   0,   0,   3, 255, 255, 
      3,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    156,   0,   0,   0,  88,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0,  96,   0, 
      0,   0,   0,   0,   0,   0, 
    112,   0,   0,   0,   2,   0, 
      1,   0,   4,   0,   6,   0, 
    120,   0,   0,   0,   0,   0, 
      0,   0, 136,   0,   0,   0, 
      3,   0,   0,   0,   1,   0, 
      2,   0, 140,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
     97, 100, 100,   0, 171, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
    109, 117, 108,   0, 171, 171, 
      3,   0,   3,   0,   4,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120,   0,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  51,  48,  46,  56, 
     52,  48,  48,  46,  48,   0, 
    171, 171,  81,   0,   0,   5, 
      5,   0,  15, 160,   0,   0, 
    128, 191,   0,   0, 128,  63, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  31,   0,   0,   2, 
      5,   0,   0, 128,   0,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  66,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 144,   0,   8, 228, 160, 
      9,   0,   0,   3,   1,   0, 
      1, 128,   0,   0, 228, 128, 
      1,   0, 228, 160,   9,   0, 
      0,   3,   1,   0,   2, 128, 
      0,   0, 228, 128,   2,   0, 
    228, 160,   9,   0,   0,   3, 
      1,   0,   4, 128,   0,   0, 
    228, 128,   3,   0, 228, 160, 
      9,   0,   0,   3,   1,   0, 
      8, 128,   0,   0, 228, 128, 
      4,   0, 228, 160,   2,   0, 
      0,   3,   0,   0,   1, 128, 
      0,   0, 255, 128,   0,   0, 
    255, 160,   4,   0,   0,   4, 
      0,   0,  15, 128,   0,   0, 
    228, 160,   0,   0,   0, 128, 
      1,   0, 228, 128,   2,   0, 
      0,   3,   1,   0,  15, 128, 
      0,   0, 228, 128,   5,   0, 
      0, 160,   4,   0,   0,   4, 
      0,   8,  15, 128,   0,   0, 
    255, 128,   1,   0, 228, 128, 
      5,   0,  85, 160, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 cxadd;
//   float4x4 cxmul;
//   sampler2D tex;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       4
//   tex          s0       1
//

    ps_3_0
    dcl_color v0.w
    dcl_texcoord v1.xy
    dcl_2d s0
    texld r0, v1, s0
    dp4 r1.x, r0, c1
    dp4 r1.y, r0, c2
    dp4 r1.z, r0, c3
    dp4 r1.w, r0, c4
    add r0.x, r0.w, c0.w
    mad r0, c0, r0.x, r1
    mul oC0.w, r0.w, v0.w
    mov oC0.xyz, r0

// approximately 9 instruction slots used (1 texture, 8 arithmetic)
#endif

extern const BYTE pBinary_FTexTGCMatrixAcEAlpha[] =
{
      0,   3, 255, 255, 254, 255, 
     54,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 163,   0, 
      0,   0,   0,   3, 255, 255, 
      3,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    156,   0,   0,   0,  88,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0,  96,   0, 
      0,   0,   0,   0,   0,   0, 
    112,   0,   0,   0,   2,   0, 
      1,   0,   4,   0,   6,   0, 
    120,   0,   0,   0,   0,   0, 
      0,   0, 136,   0,   0,   0, 
      3,   0,   0,   0,   1,   0, 
      2,   0, 140,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
     97, 100, 100,   0, 171, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
    109, 117, 108,   0, 171, 171, 
      3,   0,   3,   0,   4,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120,   0,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  51,  48,  46,  56, 
     52,  48,  48,  46,  48,   0, 
    171, 171,  31,   0,   0,   2, 
     10,   0,   0, 128,   0,   0, 
      8, 144,  31,   0,   0,   2, 
      5,   0,   0, 128,   1,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  66,   0,   0,   3, 
      0,   0,  15, 128,   1,   0, 
    228, 144,   0,   8, 228, 160, 
      9,   0,   0,   3,   1,   0, 
      1, 128,   0,   0, 228, 128, 
      1,   0, 228, 160,   9,   0, 
      0,   3,   1,   0,   2, 128, 
      0,   0, 228, 128,   2,   0, 
    228, 160,   9,   0,   0,   3, 
      1,   0,   4, 128,   0,   0, 
    228, 128,   3,   0, 228, 160, 
      9,   0,   0,   3,   1,   0, 
      8, 128,   0,   0, 228, 128, 
      4,   0, 228, 160,   2,   0, 
      0,   3,   0,   0,   1, 128, 
      0,   0, 255, 128,   0,   0, 
    255, 160,   4,   0,   0,   4, 
      0,   0,  15, 128,   0,   0, 
    228, 160,   0,   0,   0, 128, 
      1,   0, 228, 128,   5,   0, 
      0,   3,   0,   8,   8, 128, 
      0,   0, 255, 128,   0,   0, 
    255, 144,   1,   0,   0,   2, 
      0,   8,   7, 128,   0,   0, 
    228, 128, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 cxadd;
//   float4x4 cxmul;
//   sampler2D tex;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       4
//   tex          s0       1
//

    ps_3_0
    def c5, -1, 1, 0, 0
    dcl_color v0.w
    dcl_texcoord v1.xy
    dcl_2d s0
    texld r0, v1, s0
    dp4 r1.x, r0, c1
    dp4 r1.y, r0, c2
    dp4 r1.z, r0, c3
    dp4 r1.w, r0, c4
    add r0.x, r0.w, c0.w
    mad r0, c0, r0.x, r1
    mul r0.w, r0.w, v0.w
    add r1, r0, c5.x
    mad oC0, r0.w, r1, c5.y

// approximately 10 instruction slots used (1 texture, 9 arithmetic)
#endif

extern const BYTE pBinary_FTexTGCMatrixAcEAlphaMul[] =
{
      0,   3, 255, 255, 254, 255, 
     54,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 163,   0, 
      0,   0,   0,   3, 255, 255, 
      3,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    156,   0,   0,   0,  88,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0,  96,   0, 
      0,   0,   0,   0,   0,   0, 
    112,   0,   0,   0,   2,   0, 
      1,   0,   4,   0,   6,   0, 
    120,   0,   0,   0,   0,   0, 
      0,   0, 136,   0,   0,   0, 
      3,   0,   0,   0,   1,   0, 
      2,   0, 140,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
     97, 100, 100,   0, 171, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
    109, 117, 108,   0, 171, 171, 
      3,   0,   3,   0,   4,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120,   0,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  51,  48,  46,  56, 
     52,  48,  48,  46,  48,   0, 
    171, 171,  81,   0,   0,   5, 
      5,   0,  15, 160,   0,   0, 
    128, 191,   0,   0, 128,  63, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  31,   0,   0,   2, 
     10,   0,   0, 128,   0,   0, 
      8, 144,  31,   0,   0,   2, 
      5,   0,   0, 128,   1,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  66,   0,   0,   3, 
      0,   0,  15, 128,   1,   0, 
    228, 144,   0,   8, 228, 160, 
      9,   0,   0,   3,   1,   0, 
      1, 128,   0,   0, 228, 128, 
      1,   0, 228, 160,   9,   0, 
      0,   3,   1,   0,   2, 128, 
      0,   0, 228, 128,   2,   0, 
    228, 160,   9,   0,   0,   3, 
      1,   0,   4, 128,   0,   0, 
    228, 128,   3,   0, 228, 160, 
      9,   0,   0,   3,   1,   0, 
      8, 128,   0,   0, 228, 128, 
      4,   0, 228, 160,   2,   0, 
      0,   3,   0,   0,   1, 128, 
      0,   0, 255, 128,   0,   0, 
    255, 160,   4,   0,   0,   4, 
      0,   0,  15, 128,   0,   0, 
    228, 160,   0,   0,   0, 128, 
      1,   0, 228, 128,   5,   0, 
      0,   3,   0,   0,   8, 128, 
      0,   0, 255, 128,   0,   0, 
    255, 144,   2,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    228, 128,   5,   0,   0, 160, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 255, 128, 
      1,   0, 228, 128,   5,   0, 
     85, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 fsize;
//   sampler2D tex;
//   float4 texscale;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   fsize        c0       1
//   texscale     c1       1
//   tex          s0       1
//

    ps_3_0
    def c2, 0, 0, 1, 0
    defi i0, 255, 0, 0, 0
    dcl_texcoord v0
    dcl_texcoord1 v1
    dcl_texcoord2 v2.xy
    dcl_2d s0
    mov r0.zw, c2.x
    mov r1, c2.x
    mov r2.x, -c0.x
    rep i0
      break_lt c0.x, r2.x
      mad r0.xy, r2.x, c1, v2
      texldl r3, r0, s0
      add r1, r1, r3
      add r2.x, r2.x, c2.z
    endrep
    mul r0, r1, c0.w
    mad r1, v1.xyzx, c2.zzzx, c2.xxxz
    mul r0, r0, r1
    mul r0, r0, v1.w
    mad oC0, v0, r0.w, r0

// approximately 21 instruction slots used (2 texture, 19 arithmetic)
#endif

extern const BYTE pBinary_FBox1Blur[] =
{
      0,   3, 255, 255, 254, 255, 
     50,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 148,   0, 
      0,   0,   0,   3, 255, 255, 
      3,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    141,   0,   0,   0,  88,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0,  96,   0, 
      0,   0,   0,   0,   0,   0, 
    112,   0,   0,   0,   3,   0, 
      0,   0,   1,   0,   2,   0, 
    116,   0,   0,   0,   0,   0, 
      0,   0, 132,   0,   0,   0, 
      2,   0,   1,   0,   1,   0, 
      6,   0,  96,   0,   0,   0, 
      0,   0,   0,   0, 102, 115, 
    105, 122, 101,   0, 171, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120,   0,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120, 115,  99,  97, 
    108, 101,   0, 112, 115,  95, 
     51,  95,  48,   0,  77, 105, 
     99, 114, 111, 115, 111, 102, 
    116,  32,  40,  82,  41,  32, 
     72,  76,  83,  76,  32,  83, 
    104,  97, 100, 101, 114,  32, 
     67, 111, 109, 112, 105, 108, 
    101, 114,  32,  57,  46,  51, 
     48,  46,  56,  52,  48,  48, 
     46,  48,   0, 171,  81,   0, 
      0,   5,   2,   0,  15, 160, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0, 128,  63, 
      0,   0,   0,   0,  48,   0, 
      0,   5,   0,   0,  15, 240, 
    255,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   2, 128, 
      2,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,   1,   0, 
      0,   2,   0,   0,  12, 128, 
      2,   0,   0, 160,   1,   0, 
      0,   2,   1,   0,  15, 128, 
      2,   0,   0, 160,   1,   0, 
      0,   2,   2,   0,   1, 128, 
      0,   0,   0, 161,  38,   0, 
      0,   1,   0,   0, 228, 240, 
     45,   0,   4,   2,   0,   0, 
      0, 160,   2,   0,   0, 128, 
      4,   0,   0,   4,   0,   0, 
      3, 128,   2,   0,   0, 128, 
      1,   0, 228, 160,   2,   0, 
    228, 144,  95,   0,   0,   3, 
      3,   0,  15, 128,   0,   0, 
    228, 128,   0,   8, 228, 160, 
      2,   0,   0,   3,   1,   0, 
     15, 128,   1,   0, 228, 128, 
      3,   0, 228, 128,   2,   0, 
      0,   3,   2,   0,   1, 128, 
      2,   0,   0, 128,   2,   0, 
    170, 160,  39,   0,   0,   0, 
      5,   0,   0,   3,   0,   0, 
     15, 128,   1,   0, 228, 128, 
      0,   0, 255, 160,   4,   0, 
      0,   4,   1,   0,  15, 128, 
      1,   0,  36, 144,   2,   0, 
     42, 160,   2,   0, 128, 160, 
      5,   0,   0,   3,   0,   0, 
     15, 128,   0,   0, 228, 128, 
      1,   0, 228, 128,   5,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0, 228, 128,   1,   0, 
    255, 144,   4,   0,   0,   4, 
      0,   8,  15, 128,   0,   0, 
    228, 144,   0,   0, 255, 128, 
      0,   0, 228, 128, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 fsize;
//   sampler2D tex;
//   float4 texscale;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   fsize        c0       1
//   texscale     c1       1
//   tex          s0       1
//

    ps_3_0
    def c2, 0, 0, 1, -1
    defi i0, 255, 0, 0, 0
    dcl_texcoord v0
    dcl_texcoord1 v1
    dcl_texcoord2 v2.xy
    dcl_2d s0
    mov r0.zw, c2.x
    mov r1, c2.x
    mov r2.x, -c0.x
    rep i0
      break_lt c0.x, r2.x
      mad r0.xy, r2.x, c1, v2
      texldl r3, r0, s0
      add r1, r1, r3
      add r2.x, r2.x, c2.z
    endrep
    mul r0, r1, c0.w
    mad r1, v1.xyzx, c2.zzzx, c2.xxxz
    mul r0, r0, r1
    mul r0, r0, v1.w
    mad r0, v0, r0.w, r0
    add r1, r0, c2.w
    mad oC0, r0.w, r1, c2.z

// approximately 23 instruction slots used (2 texture, 21 arithmetic)
#endif

extern const BYTE pBinary_FBox1BlurMul[] =
{
      0,   3, 255, 255, 254, 255, 
     50,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 148,   0, 
      0,   0,   0,   3, 255, 255, 
      3,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    141,   0,   0,   0,  88,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0,  96,   0, 
      0,   0,   0,   0,   0,   0, 
    112,   0,   0,   0,   3,   0, 
      0,   0,   1,   0,   2,   0, 
    116,   0,   0,   0,   0,   0, 
      0,   0, 132,   0,   0,   0, 
      2,   0,   1,   0,   1,   0, 
      6,   0,  96,   0,   0,   0, 
      0,   0,   0,   0, 102, 115, 
    105, 122, 101,   0, 171, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120,   0,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120, 115,  99,  97, 
    108, 101,   0, 112, 115,  95, 
     51,  95,  48,   0,  77, 105, 
     99, 114, 111, 115, 111, 102, 
    116,  32,  40,  82,  41,  32, 
     72,  76,  83,  76,  32,  83, 
    104,  97, 100, 101, 114,  32, 
     67, 111, 109, 112, 105, 108, 
    101, 114,  32,  57,  46,  51, 
     48,  46,  56,  52,  48,  48, 
     46,  48,   0, 171,  81,   0, 
      0,   5,   2,   0,  15, 160, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0, 128,  63, 
      0,   0, 128, 191,  48,   0, 
      0,   5,   0,   0,  15, 240, 
    255,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   2, 128, 
      2,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,   1,   0, 
      0,   2,   0,   0,  12, 128, 
      2,   0,   0, 160,   1,   0, 
      0,   2,   1,   0,  15, 128, 
      2,   0,   0, 160,   1,   0, 
      0,   2,   2,   0,   1, 128, 
      0,   0,   0, 161,  38,   0, 
      0,   1,   0,   0, 228, 240, 
     45,   0,   4,   2,   0,   0, 
      0, 160,   2,   0,   0, 128, 
      4,   0,   0,   4,   0,   0, 
      3, 128,   2,   0,   0, 128, 
      1,   0, 228, 160,   2,   0, 
    228, 144,  95,   0,   0,   3, 
      3,   0,  15, 128,   0,   0, 
    228, 128,   0,   8, 228, 160, 
      2,   0,   0,   3,   1,   0, 
     15, 128,   1,   0, 228, 128, 
      3,   0, 228, 128,   2,   0, 
      0,   3,   2,   0,   1, 128, 
      2,   0,   0, 128,   2,   0, 
    170, 160,  39,   0,   0,   0, 
      5,   0,   0,   3,   0,   0, 
     15, 128,   1,   0, 228, 128, 
      0,   0, 255, 160,   4,   0, 
      0,   4,   1,   0,  15, 128, 
      1,   0,  36, 144,   2,   0, 
     42, 160,   2,   0, 128, 160, 
      5,   0,   0,   3,   0,   0, 
     15, 128,   0,   0, 228, 128, 
      1,   0, 228, 128,   5,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0, 228, 128,   1,   0, 
    255, 144,   4,   0,   0,   4, 
      0,   0,  15, 128,   0,   0, 
    228, 144,   0,   0, 255, 128, 
      0,   0, 228, 128,   2,   0, 
      0,   3,   1,   0,  15, 128, 
      0,   0, 228, 128,   2,   0, 
    255, 160,   4,   0,   0,   4, 
      0,   8,  15, 128,   0,   0, 
    255, 128,   1,   0, 228, 128, 
      2,   0, 170, 160, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 fsize;
//   sampler2D tex;
//   float4 texscale;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   fsize        c0       1
//   texscale     c1       1
//   tex          s0       1
//

    ps_3_0
    def c2, 0, 0, 1, 0
    defi i0, 255, 0, 0, 0
    dcl_texcoord v0
    dcl_texcoord1 v1
    dcl_texcoord2 v2.xy
    dcl_2d s0
    mov r0.zw, c2.x
    mov r1, c2.x
    mov r2.x, -c0.x
    rep i0
      break_lt c0.x, r2.x
      mov r3, r1
      mov r2.y, -c0.y
      rep i0
        break_lt c0.y, r2.y
        mad r0.xy, r2, c1, v2
        texldl r4, r0, s0
        add r3, r3, r4
        add r2.y, r2.y, c2.z
      endrep
      mov r1, r3
      add r2.x, r2.x, c2.z
    endrep
    mul r0, r1, c0.w
    mad r1, v1.xyzx, c2.zzzx, c2.xxxz
    mul r0, r0, r1
    mul r0, r0, v1.w
    mad oC0, v0, r0.w, r0

// approximately 33 instruction slots used (2 texture, 31 arithmetic)
#endif

extern const BYTE pBinary_FBox2Blur[] =
{
      0,   3, 255, 255, 254, 255, 
     50,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 148,   0, 
      0,   0,   0,   3, 255, 255, 
      3,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    141,   0,   0,   0,  88,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0,  96,   0, 
      0,   0,   0,   0,   0,   0, 
    112,   0,   0,   0,   3,   0, 
      0,   0,   1,   0,   2,   0, 
    116,   0,   0,   0,   0,   0, 
      0,   0, 132,   0,   0,   0, 
      2,   0,   1,   0,   1,   0, 
      6,   0,  96,   0,   0,   0, 
      0,   0,   0,   0, 102, 115, 
    105, 122, 101,   0, 171, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120,   0,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120, 115,  99,  97, 
    108, 101,   0, 112, 115,  95, 
     51,  95,  48,   0,  77, 105, 
     99, 114, 111, 115, 111, 102, 
    116,  32,  40,  82,  41,  32, 
     72,  76,  83,  76,  32,  83, 
    104,  97, 100, 101, 114,  32, 
     67, 111, 109, 112, 105, 108, 
    101, 114,  32,  57,  46,  51, 
     48,  46,  56,  52,  48,  48, 
     46,  48,   0, 171,  81,   0, 
      0,   5,   2,   0,  15, 160, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0, 128,  63, 
      0,   0,   0,   0,  48,   0, 
      0,   5,   0,   0,  15, 240, 
    255,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   2, 128, 
      2,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,   1,   0, 
      0,   2,   0,   0,  12, 128, 
      2,   0,   0, 160,   1,   0, 
      0,   2,   1,   0,  15, 128, 
      2,   0,   0, 160,   1,   0, 
      0,   2,   2,   0,   1, 128, 
      0,   0,   0, 161,  38,   0, 
      0,   1,   0,   0, 228, 240, 
     45,   0,   4,   2,   0,   0, 
      0, 160,   2,   0,   0, 128, 
      1,   0,   0,   2,   3,   0, 
     15, 128,   1,   0, 228, 128, 
      1,   0,   0,   2,   2,   0, 
      2, 128,   0,   0,  85, 161, 
     38,   0,   0,   1,   0,   0, 
    228, 240,  45,   0,   4,   2, 
      0,   0,  85, 160,   2,   0, 
     85, 128,   4,   0,   0,   4, 
      0,   0,   3, 128,   2,   0, 
    228, 128,   1,   0, 228, 160, 
      2,   0, 228, 144,  95,   0, 
      0,   3,   4,   0,  15, 128, 
      0,   0, 228, 128,   0,   8, 
    228, 160,   2,   0,   0,   3, 
      3,   0,  15, 128,   3,   0, 
    228, 128,   4,   0, 228, 128, 
      2,   0,   0,   3,   2,   0, 
      2, 128,   2,   0,  85, 128, 
      2,   0, 170, 160,  39,   0, 
      0,   0,   1,   0,   0,   2, 
      1,   0,  15, 128,   3,   0, 
    228, 128,   2,   0,   0,   3, 
      2,   0,   1, 128,   2,   0, 
      0, 128,   2,   0, 170, 160, 
     39,   0,   0,   0,   5,   0, 
      0,   3,   0,   0,  15, 128, 
      1,   0, 228, 128,   0,   0, 
    255, 160,   4,   0,   0,   4, 
      1,   0,  15, 128,   1,   0, 
     36, 144,   2,   0,  42, 160, 
      2,   0, 128, 160,   5,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0, 228, 128,   1,   0, 
    228, 128,   5,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   1,   0, 255, 144, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 228, 144, 
      0,   0, 255, 128,   0,   0, 
    228, 128, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 fsize;
//   sampler2D tex;
//   float4 texscale;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   fsize        c0       1
//   texscale     c1       1
//   tex          s0       1
//

    ps_3_0
    def c2, 0, 0, 1, -1
    defi i0, 255, 0, 0, 0
    dcl_texcoord v0
    dcl_texcoord1 v1
    dcl_texcoord2 v2.xy
    dcl_2d s0
    mov r0.zw, c2.x
    mov r1, c2.x
    mov r2.x, -c0.x
    rep i0
      break_lt c0.x, r2.x
      mov r3, r1
      mov r2.y, -c0.y
      rep i0
        break_lt c0.y, r2.y
        mad r0.xy, r2, c1, v2
        texldl r4, r0, s0
        add r3, r3, r4
        add r2.y, r2.y, c2.z
      endrep
      mov r1, r3
      add r2.x, r2.x, c2.z
    endrep
    mul r0, r1, c0.w
    mad r1, v1.xyzx, c2.zzzx, c2.xxxz
    mul r0, r0, r1
    mul r0, r0, v1.w
    mad r0, v0, r0.w, r0
    add r1, r0, c2.w
    mad oC0, r0.w, r1, c2.z

// approximately 35 instruction slots used (2 texture, 33 arithmetic)
#endif

extern const BYTE pBinary_FBox2BlurMul[] =
{
      0,   3, 255, 255, 254, 255, 
     50,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 148,   0, 
      0,   0,   0,   3, 255, 255, 
      3,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    141,   0,   0,   0,  88,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0,  96,   0, 
      0,   0,   0,   0,   0,   0, 
    112,   0,   0,   0,   3,   0, 
      0,   0,   1,   0,   2,   0, 
    116,   0,   0,   0,   0,   0, 
      0,   0, 132,   0,   0,   0, 
      2,   0,   1,   0,   1,   0, 
      6,   0,  96,   0,   0,   0, 
      0,   0,   0,   0, 102, 115, 
    105, 122, 101,   0, 171, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120,   0,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120, 115,  99,  97, 
    108, 101,   0, 112, 115,  95, 
     51,  95,  48,   0,  77, 105, 
     99, 114, 111, 115, 111, 102, 
    116,  32,  40,  82,  41,  32, 
     72,  76,  83,  76,  32,  83, 
    104,  97, 100, 101, 114,  32, 
     67, 111, 109, 112, 105, 108, 
    101, 114,  32,  57,  46,  51, 
     48,  46,  56,  52,  48,  48, 
     46,  48,   0, 171,  81,   0, 
      0,   5,   2,   0,  15, 160, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0, 128,  63, 
      0,   0, 128, 191,  48,   0, 
      0,   5,   0,   0,  15, 240, 
    255,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   2, 128, 
      2,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,   1,   0, 
      0,   2,   0,   0,  12, 128, 
      2,   0,   0, 160,   1,   0, 
      0,   2,   1,   0,  15, 128, 
      2,   0,   0, 160,   1,   0, 
      0,   2,   2,   0,   1, 128, 
      0,   0,   0, 161,  38,   0, 
      0,   1,   0,   0, 228, 240, 
     45,   0,   4,   2,   0,   0, 
      0, 160,   2,   0,   0, 128, 
      1,   0,   0,   2,   3,   0, 
     15, 128,   1,   0, 228, 128, 
      1,   0,   0,   2,   2,   0, 
      2, 128,   0,   0,  85, 161, 
     38,   0,   0,   1,   0,   0, 
    228, 240,  45,   0,   4,   2, 
      0,   0,  85, 160,   2,   0, 
     85, 128,   4,   0,   0,   4, 
      0,   0,   3, 128,   2,   0, 
    228, 128,   1,   0, 228, 160, 
      2,   0, 228, 144,  95,   0, 
      0,   3,   4,   0,  15, 128, 
      0,   0, 228, 128,   0,   8, 
    228, 160,   2,   0,   0,   3, 
      3,   0,  15, 128,   3,   0, 
    228, 128,   4,   0, 228, 128, 
      2,   0,   0,   3,   2,   0, 
      2, 128,   2,   0,  85, 128, 
      2,   0, 170, 160,  39,   0, 
      0,   0,   1,   0,   0,   2, 
      1,   0,  15, 128,   3,   0, 
    228, 128,   2,   0,   0,   3, 
      2,   0,   1, 128,   2,   0, 
      0, 128,   2,   0, 170, 160, 
     39,   0,   0,   0,   5,   0, 
      0,   3,   0,   0,  15, 128, 
      1,   0, 228, 128,   0,   0, 
    255, 160,   4,   0,   0,   4, 
      1,   0,  15, 128,   1,   0, 
     36, 144,   2,   0,  42, 160, 
      2,   0, 128, 160,   5,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0, 228, 128,   1,   0, 
    228, 128,   5,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   1,   0, 255, 144, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   0,   0, 228, 144, 
      0,   0, 255, 128,   0,   0, 
    228, 128,   2,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    228, 128,   2,   0, 255, 160, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 255, 128, 
      1,   0, 228, 128,   2,   0, 
    170, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 fsize;
//   float4 offset;
//   float4 scolor;
//   sampler2D srctex;
//   float4 srctexscale;
//   sampler2D tex;
//   float4 texscale;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   fsize        c0       1
//   offset       c1       1
//   scolor       c2       1
//   srctexscale  c3       1
//   texscale     c4       1
//   srctex       s0       1
//   tex          s1       1
//

    ps_3_0
    def c5, 0, 0, 1, 0
    defi i0, 255, 0, 0, 0
    dcl_texcoord v0
    dcl_texcoord1 v1
    dcl_texcoord2 v2.xy
    dcl_2d s0
    dcl_2d s1
    mov r0.zw, c5.x
    mov r1.x, c5.x
    mov r1.y, -c0.x
    rep i0
      break_lt c0.x, r1.y
      add r2.x, r1.y, c1.x
      mov r3.x, r1.x
      mov r3.y, -c0.y
      rep i0
        break_lt c0.y, r3.y
        add r2.y, r3.y, c1.y
        mad r0.xy, r2, c4, v2
        texldl r4, r0, s1
        add r3.x, r3.x, r4.w
        add r3.y, r3.y, c5.z
      endrep
      mov r1.x, r3.x
      add r1.y, r1.y, c5.z
    endrep
    mul r0.x, r1.x, c0.w
    mul r0.x, r0.x, c0.z
    mul r0.yz, c3.xxyw, v2.xxyw
    texld r1, r0.yzzw, s0
    add r0.y, -r1.w, c5.z
    mul r2, r0.x, c2
    mad r0, r2, r0.y, r1
    mad r1, v1.xyzx, c5.zzzx, c5.xxxz
    mul r0, r0, r1
    mul r0, r0, v1.w
    mad oC0, v0, r0.w, r0

// approximately 41 instruction slots used (3 texture, 38 arithmetic)
#endif

extern const BYTE pBinary_FBox2Shadow[] =
{
      0,   3, 255, 255, 254, 255, 
     83,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  24,   1, 
      0,   0,   0,   3, 255, 255, 
      7,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     17,   1,   0,   0, 168,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 176,   0, 
      0,   0,   0,   0,   0,   0, 
    192,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    176,   0,   0,   0,   0,   0, 
      0,   0, 199,   0,   0,   0, 
      2,   0,   2,   0,   1,   0, 
     10,   0, 176,   0,   0,   0, 
      0,   0,   0,   0, 206,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0, 216,   0, 
      0,   0,   0,   0,   0,   0, 
    232,   0,   0,   0,   2,   0, 
      3,   0,   1,   0,  14,   0, 
    176,   0,   0,   0,   0,   0, 
      0,   0, 244,   0,   0,   0, 
      3,   0,   1,   0,   1,   0, 
      6,   0, 248,   0,   0,   0, 
      0,   0,   0,   0,   8,   1, 
      0,   0,   2,   0,   4,   0, 
      1,   0,  18,   0, 176,   0, 
      0,   0,   0,   0,   0,   0, 
    102, 115, 105, 122, 101,   0, 
    171, 171,   1,   0,   3,   0, 
      1,   0,   4,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    111, 102, 102, 115, 101, 116, 
      0, 115,  99, 111, 108, 111, 
    114,   0, 115, 114,  99, 116, 
    101, 120,   0, 171, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 115, 114, 
     99, 116, 101, 120, 115,  99, 
     97, 108, 101,   0, 116, 101, 
    120,   0,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120, 115,  99,  97, 
    108, 101,   0, 112, 115,  95, 
     51,  95,  48,   0,  77, 105, 
     99, 114, 111, 115, 111, 102, 
    116,  32,  40,  82,  41,  32, 
     72,  76,  83,  76,  32,  83, 
    104,  97, 100, 101, 114,  32, 
     67, 111, 109, 112, 105, 108, 
    101, 114,  32,  57,  46,  51, 
     48,  46,  56,  52,  48,  48, 
     46,  48,   0, 171,  81,   0, 
      0,   5,   5,   0,  15, 160, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0, 128,  63, 
      0,   0,   0,   0,  48,   0, 
      0,   5,   0,   0,  15, 240, 
    255,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   2, 128, 
      2,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,   1,   0, 
      0,   2,   0,   0,  12, 128, 
      5,   0,   0, 160,   1,   0, 
      0,   2,   1,   0,   1, 128, 
      5,   0,   0, 160,   1,   0, 
      0,   2,   1,   0,   2, 128, 
      0,   0,   0, 161,  38,   0, 
      0,   1,   0,   0, 228, 240, 
     45,   0,   4,   2,   0,   0, 
      0, 160,   1,   0,  85, 128, 
      2,   0,   0,   3,   2,   0, 
      1, 128,   1,   0,  85, 128, 
      1,   0,   0, 160,   1,   0, 
      0,   2,   3,   0,   1, 128, 
      1,   0,   0, 128,   1,   0, 
      0,   2,   3,   0,   2, 128, 
      0,   0,  85, 161,  38,   0, 
      0,   1,   0,   0, 228, 240, 
     45,   0,   4,   2,   0,   0, 
     85, 160,   3,   0,  85, 128, 
      2,   0,   0,   3,   2,   0, 
      2, 128,   3,   0,  85, 128, 
      1,   0,  85, 160,   4,   0, 
      0,   4,   0,   0,   3, 128, 
      2,   0, 228, 128,   4,   0, 
    228, 160,   2,   0, 228, 144, 
     95,   0,   0,   3,   4,   0, 
     15, 128,   0,   0, 228, 128, 
      1,   8, 228, 160,   2,   0, 
      0,   3,   3,   0,   1, 128, 
      3,   0,   0, 128,   4,   0, 
    255, 128,   2,   0,   0,   3, 
      3,   0,   2, 128,   3,   0, 
     85, 128,   5,   0, 170, 160, 
     39,   0,   0,   0,   1,   0, 
      0,   2,   1,   0,   1, 128, 
      3,   0,   0, 128,   2,   0, 
      0,   3,   1,   0,   2, 128, 
      1,   0,  85, 128,   5,   0, 
    170, 160,  39,   0,   0,   0, 
      5,   0,   0,   3,   0,   0, 
      1, 128,   1,   0,   0, 128, 
      0,   0, 255, 160,   5,   0, 
      0,   3,   0,   0,   1, 128, 
      0,   0,   0, 128,   0,   0, 
    170, 160,   5,   0,   0,   3, 
      0,   0,   6, 128,   3,   0, 
    208, 160,   2,   0, 208, 144, 
     66,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 233, 128, 
      0,   8, 228, 160,   2,   0, 
      0,   3,   0,   0,   2, 128, 
      1,   0, 255, 129,   5,   0, 
    170, 160,   5,   0,   0,   3, 
      2,   0,  15, 128,   0,   0, 
      0, 128,   2,   0, 228, 160, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   2,   0, 228, 128, 
      0,   0,  85, 128,   1,   0, 
    228, 128,   4,   0,   0,   4, 
      1,   0,  15, 128,   1,   0, 
     36, 144,   5,   0,  42, 160, 
      5,   0, 128, 160,   5,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0, 228, 128,   1,   0, 
    228, 128,   5,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   1,   0, 255, 144, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 228, 144, 
      0,   0, 255, 128,   0,   0, 
    228, 128, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 fsize;
//   float4 offset;
//   float4 scolor;
//   sampler2D srctex;
//   float4 srctexscale;
//   sampler2D tex;
//   float4 texscale;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   fsize        c0       1
//   offset       c1       1
//   scolor       c2       1
//   srctexscale  c3       1
//   texscale     c4       1
//   srctex       s0       1
//   tex          s1       1
//

    ps_3_0
    def c5, 0, 0, 1, -1
    defi i0, 255, 0, 0, 0
    dcl_texcoord v0
    dcl_texcoord1 v1
    dcl_texcoord2 v2.xy
    dcl_2d s0
    dcl_2d s1
    mov r0.zw, c5.x
    mov r1.x, c5.x
    mov r1.y, -c0.x
    rep i0
      break_lt c0.x, r1.y
      add r2.x, r1.y, c1.x
      mov r3.x, r1.x
      mov r3.y, -c0.y
      rep i0
        break_lt c0.y, r3.y
        add r2.y, r3.y, c1.y
        mad r0.xy, r2, c4, v2
        texldl r4, r0, s1
        add r3.x, r3.x, r4.w
        add r3.y, r3.y, c5.z
      endrep
      mov r1.x, r3.x
      add r1.y, r1.y, c5.z
    endrep
    mul r0.x, r1.x, c0.w
    mul r0.x, r0.x, c0.z
    mul r0.yz, c3.xxyw, v2.xxyw
    texld r1, r0.yzzw, s0
    add r0.y, -r1.w, c5.z
    mul r2, r0.x, c2
    mad r0, r2, r0.y, r1
    mad r1, v1.xyzx, c5.zzzx, c5.xxxz
    mul r0, r0, r1
    mul r0, r0, v1.w
    mad r0, v0, r0.w, r0
    add r1, r0, c5.w
    mad oC0, r0.w, r1, c5.z

// approximately 43 instruction slots used (3 texture, 40 arithmetic)
#endif

extern const BYTE pBinary_FBox2ShadowMul[] =
{
      0,   3, 255, 255, 254, 255, 
     83,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  24,   1, 
      0,   0,   0,   3, 255, 255, 
      7,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     17,   1,   0,   0, 168,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 176,   0, 
      0,   0,   0,   0,   0,   0, 
    192,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    176,   0,   0,   0,   0,   0, 
      0,   0, 199,   0,   0,   0, 
      2,   0,   2,   0,   1,   0, 
     10,   0, 176,   0,   0,   0, 
      0,   0,   0,   0, 206,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0, 216,   0, 
      0,   0,   0,   0,   0,   0, 
    232,   0,   0,   0,   2,   0, 
      3,   0,   1,   0,  14,   0, 
    176,   0,   0,   0,   0,   0, 
      0,   0, 244,   0,   0,   0, 
      3,   0,   1,   0,   1,   0, 
      6,   0, 248,   0,   0,   0, 
      0,   0,   0,   0,   8,   1, 
      0,   0,   2,   0,   4,   0, 
      1,   0,  18,   0, 176,   0, 
      0,   0,   0,   0,   0,   0, 
    102, 115, 105, 122, 101,   0, 
    171, 171,   1,   0,   3,   0, 
      1,   0,   4,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    111, 102, 102, 115, 101, 116, 
      0, 115,  99, 111, 108, 111, 
    114,   0, 115, 114,  99, 116, 
    101, 120,   0, 171, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 115, 114, 
     99, 116, 101, 120, 115,  99, 
     97, 108, 101,   0, 116, 101, 
    120,   0,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120, 115,  99,  97, 
    108, 101,   0, 112, 115,  95, 
     51,  95,  48,   0,  77, 105, 
     99, 114, 111, 115, 111, 102, 
    116,  32,  40,  82,  41,  32, 
     72,  76,  83,  76,  32,  83, 
    104,  97, 100, 101, 114,  32, 
     67, 111, 109, 112, 105, 108, 
    101, 114,  32,  57,  46,  51, 
     48,  46,  56,  52,  48,  48, 
     46,  48,   0, 171,  81,   0, 
      0,   5,   5,   0,  15, 160, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0, 128,  63, 
      0,   0, 128, 191,  48,   0, 
      0,   5,   0,   0,  15, 240, 
    255,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   2, 128, 
      2,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,   1,   0, 
      0,   2,   0,   0,  12, 128, 
      5,   0,   0, 160,   1,   0, 
      0,   2,   1,   0,   1, 128, 
      5,   0,   0, 160,   1,   0, 
      0,   2,   1,   0,   2, 128, 
      0,   0,   0, 161,  38,   0, 
      0,   1,   0,   0, 228, 240, 
     45,   0,   4,   2,   0,   0, 
      0, 160,   1,   0,  85, 128, 
      2,   0,   0,   3,   2,   0, 
      1, 128,   1,   0,  85, 128, 
      1,   0,   0, 160,   1,   0, 
      0,   2,   3,   0,   1, 128, 
      1,   0,   0, 128,   1,   0, 
      0,   2,   3,   0,   2, 128, 
      0,   0,  85, 161,  38,   0, 
      0,   1,   0,   0, 228, 240, 
     45,   0,   4,   2,   0,   0, 
     85, 160,   3,   0,  85, 128, 
      2,   0,   0,   3,   2,   0, 
      2, 128,   3,   0,  85, 128, 
      1,   0,  85, 160,   4,   0, 
      0,   4,   0,   0,   3, 128, 
      2,   0, 228, 128,   4,   0, 
    228, 160,   2,   0, 228, 144, 
     95,   0,   0,   3,   4,   0, 
     15, 128,   0,   0, 228, 128, 
      1,   8, 228, 160,   2,   0, 
      0,   3,   3,   0,   1, 128, 
      3,   0,   0, 128,   4,   0, 
    255, 128,   2,   0,   0,   3, 
      3,   0,   2, 128,   3,   0, 
     85, 128,   5,   0, 170, 160, 
     39,   0,   0,   0,   1,   0, 
      0,   2,   1,   0,   1, 128, 
      3,   0,   0, 128,   2,   0, 
      0,   3,   1,   0,   2, 128, 
      1,   0,  85, 128,   5,   0, 
    170, 160,  39,   0,   0,   0, 
      5,   0,   0,   3,   0,   0, 
      1, 128,   1,   0,   0, 128, 
      0,   0, 255, 160,   5,   0, 
      0,   3,   0,   0,   1, 128, 
      0,   0,   0, 128,   0,   0, 
    170, 160,   5,   0,   0,   3, 
      0,   0,   6, 128,   3,   0, 
    208, 160,   2,   0, 208, 144, 
     66,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 233, 128, 
      0,   8, 228, 160,   2,   0, 
      0,   3,   0,   0,   2, 128, 
      1,   0, 255, 129,   5,   0, 
    170, 160,   5,   0,   0,   3, 
      2,   0,  15, 128,   0,   0, 
      0, 128,   2,   0, 228, 160, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   2,   0, 228, 128, 
      0,   0,  85, 128,   1,   0, 
    228, 128,   4,   0,   0,   4, 
      1,   0,  15, 128,   1,   0, 
     36, 144,   5,   0,  42, 160, 
      5,   0, 128, 160,   5,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0, 228, 128,   1,   0, 
    228, 128,   5,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   1,   0, 255, 144, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   0,   0, 228, 144, 
      0,   0, 255, 128,   0,   0, 
    228, 128,   2,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    228, 128,   5,   0, 255, 160, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 255, 128, 
      1,   0, 228, 128,   5,   0, 
    170, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 fsize;
//   float4 offset;
//   float4 scolor;
//   sampler2D srctex;
//   float4 srctexscale;
//   sampler2D tex;
//   float4 texscale;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   fsize        c0       1
//   offset       c1       1
//   scolor       c2       1
//   srctexscale  c3       1
//   texscale     c4       1
//   srctex       s0       1
//   tex          s1       1
//

    ps_3_0
    def c5, 0, 0, 1, 0
    defi i0, 255, 0, 0, 0
    dcl_texcoord v0
    dcl_texcoord1 v1
    dcl_texcoord2 v2.xy
    dcl_2d s0
    dcl_2d s1
    mov r0.zw, c5.x
    mov r1.x, c5.x
    mov r1.y, -c0.x
    rep i0
      break_lt c0.x, r1.y
      add r2.x, r1.y, c1.x
      mov r3.x, r1.x
      mov r3.y, -c0.y
      rep i0
        break_lt c0.y, r3.y
        add r2.y, r3.y, c1.y
        mad r0.xy, r2, c4, v2
        texldl r4, r0, s1
        add r3.x, r3.x, r4.w
        add r3.y, r3.y, c5.z
      endrep
      mov r1.x, r3.x
      add r1.y, r1.y, c5.z
    endrep
    mul r0.x, r1.x, c0.w
    mul r0.x, r0.x, c0.z
    mul r0.yz, c3.xxyw, v2.xxyw
    texld r1, r0.yzzw, s0
    add r0.y, -r1.w, c5.z
    mul r1, r0.x, c2
    mul r0, r0.y, r1
    mad r1, v1.xyzx, c5.zzzx, c5.xxxz
    mul r0, r0, r1
    mul r0, r0, v1.w
    mad oC0, v0, r0.w, r0

// approximately 41 instruction slots used (3 texture, 38 arithmetic)
#endif

extern const BYTE pBinary_FBox2ShadowKnockout[] =
{
      0,   3, 255, 255, 254, 255, 
     83,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  24,   1, 
      0,   0,   0,   3, 255, 255, 
      7,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     17,   1,   0,   0, 168,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 176,   0, 
      0,   0,   0,   0,   0,   0, 
    192,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    176,   0,   0,   0,   0,   0, 
      0,   0, 199,   0,   0,   0, 
      2,   0,   2,   0,   1,   0, 
     10,   0, 176,   0,   0,   0, 
      0,   0,   0,   0, 206,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0, 216,   0, 
      0,   0,   0,   0,   0,   0, 
    232,   0,   0,   0,   2,   0, 
      3,   0,   1,   0,  14,   0, 
    176,   0,   0,   0,   0,   0, 
      0,   0, 244,   0,   0,   0, 
      3,   0,   1,   0,   1,   0, 
      6,   0, 248,   0,   0,   0, 
      0,   0,   0,   0,   8,   1, 
      0,   0,   2,   0,   4,   0, 
      1,   0,  18,   0, 176,   0, 
      0,   0,   0,   0,   0,   0, 
    102, 115, 105, 122, 101,   0, 
    171, 171,   1,   0,   3,   0, 
      1,   0,   4,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    111, 102, 102, 115, 101, 116, 
      0, 115,  99, 111, 108, 111, 
    114,   0, 115, 114,  99, 116, 
    101, 120,   0, 171, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 115, 114, 
     99, 116, 101, 120, 115,  99, 
     97, 108, 101,   0, 116, 101, 
    120,   0,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120, 115,  99,  97, 
    108, 101,   0, 112, 115,  95, 
     51,  95,  48,   0,  77, 105, 
     99, 114, 111, 115, 111, 102, 
    116,  32,  40,  82,  41,  32, 
     72,  76,  83,  76,  32,  83, 
    104,  97, 100, 101, 114,  32, 
     67, 111, 109, 112, 105, 108, 
    101, 114,  32,  57,  46,  51, 
     48,  46,  56,  52,  48,  48, 
     46,  48,   0, 171,  81,   0, 
      0,   5,   5,   0,  15, 160, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0, 128,  63, 
      0,   0,   0,   0,  48,   0, 
      0,   5,   0,   0,  15, 240, 
    255,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   2, 128, 
      2,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,   1,   0, 
      0,   2,   0,   0,  12, 128, 
      5,   0,   0, 160,   1,   0, 
      0,   2,   1,   0,   1, 128, 
      5,   0,   0, 160,   1,   0, 
      0,   2,   1,   0,   2, 128, 
      0,   0,   0, 161,  38,   0, 
      0,   1,   0,   0, 228, 240, 
     45,   0,   4,   2,   0,   0, 
      0, 160,   1,   0,  85, 128, 
      2,   0,   0,   3,   2,   0, 
      1, 128,   1,   0,  85, 128, 
      1,   0,   0, 160,   1,   0, 
      0,   2,   3,   0,   1, 128, 
      1,   0,   0, 128,   1,   0, 
      0,   2,   3,   0,   2, 128, 
      0,   0,  85, 161,  38,   0, 
      0,   1,   0,   0, 228, 240, 
     45,   0,   4,   2,   0,   0, 
     85, 160,   3,   0,  85, 128, 
      2,   0,   0,   3,   2,   0, 
      2, 128,   3,   0,  85, 128, 
      1,   0,  85, 160,   4,   0, 
      0,   4,   0,   0,   3, 128, 
      2,   0, 228, 128,   4,   0, 
    228, 160,   2,   0, 228, 144, 
     95,   0,   0,   3,   4,   0, 
     15, 128,   0,   0, 228, 128, 
      1,   8, 228, 160,   2,   0, 
      0,   3,   3,   0,   1, 128, 
      3,   0,   0, 128,   4,   0, 
    255, 128,   2,   0,   0,   3, 
      3,   0,   2, 128,   3,   0, 
     85, 128,   5,   0, 170, 160, 
     39,   0,   0,   0,   1,   0, 
      0,   2,   1,   0,   1, 128, 
      3,   0,   0, 128,   2,   0, 
      0,   3,   1,   0,   2, 128, 
      1,   0,  85, 128,   5,   0, 
    170, 160,  39,   0,   0,   0, 
      5,   0,   0,   3,   0,   0, 
      1, 128,   1,   0,   0, 128, 
      0,   0, 255, 160,   5,   0, 
      0,   3,   0,   0,   1, 128, 
      0,   0,   0, 128,   0,   0, 
    170, 160,   5,   0,   0,   3, 
      0,   0,   6, 128,   3,   0, 
    208, 160,   2,   0, 208, 144, 
     66,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 233, 128, 
      0,   8, 228, 160,   2,   0, 
      0,   3,   0,   0,   2, 128, 
      1,   0, 255, 129,   5,   0, 
    170, 160,   5,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
      0, 128,   2,   0, 228, 160, 
      5,   0,   0,   3,   0,   0, 
     15, 128,   0,   0,  85, 128, 
      1,   0, 228, 128,   4,   0, 
      0,   4,   1,   0,  15, 128, 
      1,   0,  36, 144,   5,   0, 
     42, 160,   5,   0, 128, 160, 
      5,   0,   0,   3,   0,   0, 
     15, 128,   0,   0, 228, 128, 
      1,   0, 228, 128,   5,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0, 228, 128,   1,   0, 
    255, 144,   4,   0,   0,   4, 
      0,   8,  15, 128,   0,   0, 
    228, 144,   0,   0, 255, 128, 
      0,   0, 228, 128, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 fsize;
//   float4 offset;
//   float4 scolor;
//   sampler2D srctex;
//   float4 srctexscale;
//   sampler2D tex;
//   float4 texscale;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   fsize        c0       1
//   offset       c1       1
//   scolor       c2       1
//   srctexscale  c3       1
//   texscale     c4       1
//   srctex       s0       1
//   tex          s1       1
//

    ps_3_0
    def c5, 0, 0, 1, -1
    defi i0, 255, 0, 0, 0
    dcl_texcoord v0
    dcl_texcoord1 v1
    dcl_texcoord2 v2.xy
    dcl_2d s0
    dcl_2d s1
    mov r0.zw, c5.x
    mov r1.x, c5.x
    mov r1.y, -c0.x
    rep i0
      break_lt c0.x, r1.y
      add r2.x, r1.y, c1.x
      mov r3.x, r1.x
      mov r3.y, -c0.y
      rep i0
        break_lt c0.y, r3.y
        add r2.y, r3.y, c1.y
        mad r0.xy, r2, c4, v2
        texldl r4, r0, s1
        add r3.x, r3.x, r4.w
        add r3.y, r3.y, c5.z
      endrep
      mov r1.x, r3.x
      add r1.y, r1.y, c5.z
    endrep
    mul r0.x, r1.x, c0.w
    mul r0.x, r0.x, c0.z
    mul r0.yz, c3.xxyw, v2.xxyw
    texld r1, r0.yzzw, s0
    add r0.y, -r1.w, c5.z
    mul r1, r0.x, c2
    mul r0, r0.y, r1
    mad r1, v1.xyzx, c5.zzzx, c5.xxxz
    mul r0, r0, r1
    mul r0, r0, v1.w
    mad r0, v0, r0.w, r0
    add r1, r0, c5.w
    mad oC0, r0.w, r1, c5.z

// approximately 43 instruction slots used (3 texture, 40 arithmetic)
#endif

extern const BYTE pBinary_FBox2ShadowKnockoutMul[] =
{
      0,   3, 255, 255, 254, 255, 
     83,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  24,   1, 
      0,   0,   0,   3, 255, 255, 
      7,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     17,   1,   0,   0, 168,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 176,   0, 
      0,   0,   0,   0,   0,   0, 
    192,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    176,   0,   0,   0,   0,   0, 
      0,   0, 199,   0,   0,   0, 
      2,   0,   2,   0,   1,   0, 
     10,   0, 176,   0,   0,   0, 
      0,   0,   0,   0, 206,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0, 216,   0, 
      0,   0,   0,   0,   0,   0, 
    232,   0,   0,   0,   2,   0, 
      3,   0,   1,   0,  14,   0, 
    176,   0,   0,   0,   0,   0, 
      0,   0, 244,   0,   0,   0, 
      3,   0,   1,   0,   1,   0, 
      6,   0, 248,   0,   0,   0, 
      0,   0,   0,   0,   8,   1, 
      0,   0,   2,   0,   4,   0, 
      1,   0,  18,   0, 176,   0, 
      0,   0,   0,   0,   0,   0, 
    102, 115, 105, 122, 101,   0, 
    171, 171,   1,   0,   3,   0, 
      1,   0,   4,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    111, 102, 102, 115, 101, 116, 
      0, 115,  99, 111, 108, 111, 
    114,   0, 115, 114,  99, 116, 
    101, 120,   0, 171, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 115, 114, 
     99, 116, 101, 120, 115,  99, 
     97, 108, 101,   0, 116, 101, 
    120,   0,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120, 115,  99,  97, 
    108, 101,   0, 112, 115,  95, 
     51,  95,  48,   0,  77, 105, 
     99, 114, 111, 115, 111, 102, 
    116,  32,  40,  82,  41,  32, 
     72,  76,  83,  76,  32,  83, 
    104,  97, 100, 101, 114,  32, 
     67, 111, 109, 112, 105, 108, 
    101, 114,  32,  57,  46,  51, 
     48,  46,  56,  52,  48,  48, 
     46,  48,   0, 171,  81,   0, 
      0,   5,   5,   0,  15, 160, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0, 128,  63, 
      0,   0, 128, 191,  48,   0, 
      0,   5,   0,   0,  15, 240, 
    255,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   2, 128, 
      2,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,   1,   0, 
      0,   2,   0,   0,  12, 128, 
      5,   0,   0, 160,   1,   0, 
      0,   2,   1,   0,   1, 128, 
      5,   0,   0, 160,   1,   0, 
      0,   2,   1,   0,   2, 128, 
      0,   0,   0, 161,  38,   0, 
      0,   1,   0,   0, 228, 240, 
     45,   0,   4,   2,   0,   0, 
      0, 160,   1,   0,  85, 128, 
      2,   0,   0,   3,   2,   0, 
      1, 128,   1,   0,  85, 128, 
      1,   0,   0, 160,   1,   0, 
      0,   2,   3,   0,   1, 128, 
      1,   0,   0, 128,   1,   0, 
      0,   2,   3,   0,   2, 128, 
      0,   0,  85, 161,  38,   0, 
      0,   1,   0,   0, 228, 240, 
     45,   0,   4,   2,   0,   0, 
     85, 160,   3,   0,  85, 128, 
      2,   0,   0,   3,   2,   0, 
      2, 128,   3,   0,  85, 128, 
      1,   0,  85, 160,   4,   0, 
      0,   4,   0,   0,   3, 128, 
      2,   0, 228, 128,   4,   0, 
    228, 160,   2,   0, 228, 144, 
     95,   0,   0,   3,   4,   0, 
     15, 128,   0,   0, 228, 128, 
      1,   8, 228, 160,   2,   0, 
      0,   3,   3,   0,   1, 128, 
      3,   0,   0, 128,   4,   0, 
    255, 128,   2,   0,   0,   3, 
      3,   0,   2, 128,   3,   0, 
     85, 128,   5,   0, 170, 160, 
     39,   0,   0,   0,   1,   0, 
      0,   2,   1,   0,   1, 128, 
      3,   0,   0, 128,   2,   0, 
      0,   3,   1,   0,   2, 128, 
      1,   0,  85, 128,   5,   0, 
    170, 160,  39,   0,   0,   0, 
      5,   0,   0,   3,   0,   0, 
      1, 128,   1,   0,   0, 128, 
      0,   0, 255, 160,   5,   0, 
      0,   3,   0,   0,   1, 128, 
      0,   0,   0, 128,   0,   0, 
    170, 160,   5,   0,   0,   3, 
      0,   0,   6, 128,   3,   0, 
    208, 160,   2,   0, 208, 144, 
     66,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 233, 128, 
      0,   8, 228, 160,   2,   0, 
      0,   3,   0,   0,   2, 128, 
      1,   0, 255, 129,   5,   0, 
    170, 160,   5,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
      0, 128,   2,   0, 228, 160, 
      5,   0,   0,   3,   0,   0, 
     15, 128,   0,   0,  85, 128, 
      1,   0, 228, 128,   4,   0, 
      0,   4,   1,   0,  15, 128, 
      1,   0,  36, 144,   5,   0, 
     42, 160,   5,   0, 128, 160, 
      5,   0,   0,   3,   0,   0, 
     15, 128,   0,   0, 228, 128, 
      1,   0, 228, 128,   5,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0, 228, 128,   1,   0, 
    255, 144,   4,   0,   0,   4, 
      0,   0,  15, 128,   0,   0, 
    228, 144,   0,   0, 255, 128, 
      0,   0, 228, 128,   2,   0, 
      0,   3,   1,   0,  15, 128, 
      0,   0, 228, 128,   5,   0, 
    255, 160,   4,   0,   0,   4, 
      0,   8,  15, 128,   0,   0, 
    255, 128,   1,   0, 228, 128, 
      5,   0, 170, 160, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 fsize;
//   float4 offset;
//   float4 scolor;
//   sampler2D srctex;
//   float4 srctexscale;
//   sampler2D tex;
//   float4 texscale;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   fsize        c0       1
//   offset       c1       1
//   scolor       c2       1
//   srctexscale  c3       1
//   texscale     c4       1
//   srctex       s0       1
//   tex          s1       1
//

    ps_3_0
    def c5, 0, 0, 1, 0
    defi i0, 255, 0, 0, 0
    dcl_texcoord v0
    dcl_texcoord1 v1
    dcl_texcoord2 v2.xy
    dcl_2d s0
    dcl_2d s1
    mov r0.zw, c5.x
    mov r1.x, c5.x
    mov r1.y, -c0.x
    rep i0
      break_lt c0.x, r1.y
      add r2.x, r1.y, c1.x
      mov r3.x, r1.x
      mov r3.y, -c0.y
      rep i0
        break_lt c0.y, r3.y
        add r2.y, r3.y, c1.y
        mad r0.xy, r2, c4, v2
        texldl r4, r0, s1
        add r3.x, r3.x, r4.w
        add r3.y, r3.y, c5.z
      endrep
      mov r1.x, r3.x
      add r1.y, r1.y, c5.z
    endrep
    mul r0.x, r1.x, c0.w
    mul r0.x, r0.x, c0.z
    mul r1.xy, c3, v2
    mov r1.zw, c5.x
    texldl r1, r1, s0
    lrp r2, r0.x, r1, c2
    mul r0, r1.w, r2
    mad r1, v1.xyzx, c5.zzzx, c5.xxxz
    mul r0, r0, r1
    mul r0, r0, v1.w
    mad oC0, v0, r0.w, r0

// approximately 42 instruction slots used (4 texture, 38 arithmetic)
#endif

extern const BYTE pBinary_FBox2InnerShadow[] =
{
      0,   3, 255, 255, 254, 255, 
     83,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  24,   1, 
      0,   0,   0,   3, 255, 255, 
      7,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     17,   1,   0,   0, 168,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 176,   0, 
      0,   0,   0,   0,   0,   0, 
    192,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    176,   0,   0,   0,   0,   0, 
      0,   0, 199,   0,   0,   0, 
      2,   0,   2,   0,   1,   0, 
     10,   0, 176,   0,   0,   0, 
      0,   0,   0,   0, 206,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0, 216,   0, 
      0,   0,   0,   0,   0,   0, 
    232,   0,   0,   0,   2,   0, 
      3,   0,   1,   0,  14,   0, 
    176,   0,   0,   0,   0,   0, 
      0,   0, 244,   0,   0,   0, 
      3,   0,   1,   0,   1,   0, 
      6,   0, 248,   0,   0,   0, 
      0,   0,   0,   0,   8,   1, 
      0,   0,   2,   0,   4,   0, 
      1,   0,  18,   0, 176,   0, 
      0,   0,   0,   0,   0,   0, 
    102, 115, 105, 122, 101,   0, 
    171, 171,   1,   0,   3,   0, 
      1,   0,   4,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    111, 102, 102, 115, 101, 116, 
      0, 115,  99, 111, 108, 111, 
    114,   0, 115, 114,  99, 116, 
    101, 120,   0, 171, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 115, 114, 
     99, 116, 101, 120, 115,  99, 
     97, 108, 101,   0, 116, 101, 
    120,   0,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120, 115,  99,  97, 
    108, 101,   0, 112, 115,  95, 
     51,  95,  48,   0,  77, 105, 
     99, 114, 111, 115, 111, 102, 
    116,  32,  40,  82,  41,  32, 
     72,  76,  83,  76,  32,  83, 
    104,  97, 100, 101, 114,  32, 
     67, 111, 109, 112, 105, 108, 
    101, 114,  32,  57,  46,  51, 
     48,  46,  56,  52,  48,  48, 
     46,  48,   0, 171,  81,   0, 
      0,   5,   5,   0,  15, 160, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0, 128,  63, 
      0,   0,   0,   0,  48,   0, 
      0,   5,   0,   0,  15, 240, 
    255,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   2, 128, 
      2,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,   1,   0, 
      0,   2,   0,   0,  12, 128, 
      5,   0,   0, 160,   1,   0, 
      0,   2,   1,   0,   1, 128, 
      5,   0,   0, 160,   1,   0, 
      0,   2,   1,   0,   2, 128, 
      0,   0,   0, 161,  38,   0, 
      0,   1,   0,   0, 228, 240, 
     45,   0,   4,   2,   0,   0, 
      0, 160,   1,   0,  85, 128, 
      2,   0,   0,   3,   2,   0, 
      1, 128,   1,   0,  85, 128, 
      1,   0,   0, 160,   1,   0, 
      0,   2,   3,   0,   1, 128, 
      1,   0,   0, 128,   1,   0, 
      0,   2,   3,   0,   2, 128, 
      0,   0,  85, 161,  38,   0, 
      0,   1,   0,   0, 228, 240, 
     45,   0,   4,   2,   0,   0, 
     85, 160,   3,   0,  85, 128, 
      2,   0,   0,   3,   2,   0, 
      2, 128,   3,   0,  85, 128, 
      1,   0,  85, 160,   4,   0, 
      0,   4,   0,   0,   3, 128, 
      2,   0, 228, 128,   4,   0, 
    228, 160,   2,   0, 228, 144, 
     95,   0,   0,   3,   4,   0, 
     15, 128,   0,   0, 228, 128, 
      1,   8, 228, 160,   2,   0, 
      0,   3,   3,   0,   1, 128, 
      3,   0,   0, 128,   4,   0, 
    255, 128,   2,   0,   0,   3, 
      3,   0,   2, 128,   3,   0, 
     85, 128,   5,   0, 170, 160, 
     39,   0,   0,   0,   1,   0, 
      0,   2,   1,   0,   1, 128, 
      3,   0,   0, 128,   2,   0, 
      0,   3,   1,   0,   2, 128, 
      1,   0,  85, 128,   5,   0, 
    170, 160,  39,   0,   0,   0, 
      5,   0,   0,   3,   0,   0, 
      1, 128,   1,   0,   0, 128, 
      0,   0, 255, 160,   5,   0, 
      0,   3,   0,   0,   1, 128, 
      0,   0,   0, 128,   0,   0, 
    170, 160,   5,   0,   0,   3, 
      1,   0,   3, 128,   3,   0, 
    228, 160,   2,   0, 228, 144, 
      1,   0,   0,   2,   1,   0, 
     12, 128,   5,   0,   0, 160, 
     95,   0,   0,   3,   1,   0, 
     15, 128,   1,   0, 228, 128, 
      0,   8, 228, 160,  18,   0, 
      0,   4,   2,   0,  15, 128, 
      0,   0,   0, 128,   1,   0, 
    228, 128,   2,   0, 228, 160, 
      5,   0,   0,   3,   0,   0, 
     15, 128,   1,   0, 255, 128, 
      2,   0, 228, 128,   4,   0, 
      0,   4,   1,   0,  15, 128, 
      1,   0,  36, 144,   5,   0, 
     42, 160,   5,   0, 128, 160, 
      5,   0,   0,   3,   0,   0, 
     15, 128,   0,   0, 228, 128, 
      1,   0, 228, 128,   5,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0, 228, 128,   1,   0, 
    255, 144,   4,   0,   0,   4, 
      0,   8,  15, 128,   0,   0, 
    228, 144,   0,   0, 255, 128, 
      0,   0, 228, 128, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 fsize;
//   float4 offset;
//   float4 scolor;
//   sampler2D srctex;
//   float4 srctexscale;
//   sampler2D tex;
//   float4 texscale;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   fsize        c0       1
//   offset       c1       1
//   scolor       c2       1
//   srctexscale  c3       1
//   texscale     c4       1
//   srctex       s0       1
//   tex          s1       1
//

    ps_3_0
    def c5, 0, 0, 1, -1
    defi i0, 255, 0, 0, 0
    dcl_texcoord v0
    dcl_texcoord1 v1
    dcl_texcoord2 v2.xy
    dcl_2d s0
    dcl_2d s1
    mov r0.zw, c5.x
    mov r1.x, c5.x
    mov r1.y, -c0.x
    rep i0
      break_lt c0.x, r1.y
      add r2.x, r1.y, c1.x
      mov r3.x, r1.x
      mov r3.y, -c0.y
      rep i0
        break_lt c0.y, r3.y
        add r2.y, r3.y, c1.y
        mad r0.xy, r2, c4, v2
        texldl r4, r0, s1
        add r3.x, r3.x, r4.w
        add r3.y, r3.y, c5.z
      endrep
      mov r1.x, r3.x
      add r1.y, r1.y, c5.z
    endrep
    mul r0.x, r1.x, c0.w
    mul r0.x, r0.x, c0.z
    mul r1.xy, c3, v2
    mov r1.zw, c5.x
    texldl r1, r1, s0
    lrp r2, r0.x, r1, c2
    mul r0, r1.w, r2
    mad r1, v1.xyzx, c5.zzzx, c5.xxxz
    mul r0, r0, r1
    mul r0, r0, v1.w
    mad r0, v0, r0.w, r0
    add r1, r0, c5.w
    mad oC0, r0.w, r1, c5.z

// approximately 44 instruction slots used (4 texture, 40 arithmetic)
#endif

extern const BYTE pBinary_FBox2InnerShadowMul[] =
{
      0,   3, 255, 255, 254, 255, 
     83,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  24,   1, 
      0,   0,   0,   3, 255, 255, 
      7,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     17,   1,   0,   0, 168,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 176,   0, 
      0,   0,   0,   0,   0,   0, 
    192,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    176,   0,   0,   0,   0,   0, 
      0,   0, 199,   0,   0,   0, 
      2,   0,   2,   0,   1,   0, 
     10,   0, 176,   0,   0,   0, 
      0,   0,   0,   0, 206,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0, 216,   0, 
      0,   0,   0,   0,   0,   0, 
    232,   0,   0,   0,   2,   0, 
      3,   0,   1,   0,  14,   0, 
    176,   0,   0,   0,   0,   0, 
      0,   0, 244,   0,   0,   0, 
      3,   0,   1,   0,   1,   0, 
      6,   0, 248,   0,   0,   0, 
      0,   0,   0,   0,   8,   1, 
      0,   0,   2,   0,   4,   0, 
      1,   0,  18,   0, 176,   0, 
      0,   0,   0,   0,   0,   0, 
    102, 115, 105, 122, 101,   0, 
    171, 171,   1,   0,   3,   0, 
      1,   0,   4,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    111, 102, 102, 115, 101, 116, 
      0, 115,  99, 111, 108, 111, 
    114,   0, 115, 114,  99, 116, 
    101, 120,   0, 171, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 115, 114, 
     99, 116, 101, 120, 115,  99, 
     97, 108, 101,   0, 116, 101, 
    120,   0,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120, 115,  99,  97, 
    108, 101,   0, 112, 115,  95, 
     51,  95,  48,   0,  77, 105, 
     99, 114, 111, 115, 111, 102, 
    116,  32,  40,  82,  41,  32, 
     72,  76,  83,  76,  32,  83, 
    104,  97, 100, 101, 114,  32, 
     67, 111, 109, 112, 105, 108, 
    101, 114,  32,  57,  46,  51, 
     48,  46,  56,  52,  48,  48, 
     46,  48,   0, 171,  81,   0, 
      0,   5,   5,   0,  15, 160, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0, 128,  63, 
      0,   0, 128, 191,  48,   0, 
      0,   5,   0,   0,  15, 240, 
    255,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   2, 128, 
      2,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,   1,   0, 
      0,   2,   0,   0,  12, 128, 
      5,   0,   0, 160,   1,   0, 
      0,   2,   1,   0,   1, 128, 
      5,   0,   0, 160,   1,   0, 
      0,   2,   1,   0,   2, 128, 
      0,   0,   0, 161,  38,   0, 
      0,   1,   0,   0, 228, 240, 
     45,   0,   4,   2,   0,   0, 
      0, 160,   1,   0,  85, 128, 
      2,   0,   0,   3,   2,   0, 
      1, 128,   1,   0,  85, 128, 
      1,   0,   0, 160,   1,   0, 
      0,   2,   3,   0,   1, 128, 
      1,   0,   0, 128,   1,   0, 
      0,   2,   3,   0,   2, 128, 
      0,   0,  85, 161,  38,   0, 
      0,   1,   0,   0, 228, 240, 
     45,   0,   4,   2,   0,   0, 
     85, 160,   3,   0,  85, 128, 
      2,   0,   0,   3,   2,   0, 
      2, 128,   3,   0,  85, 128, 
      1,   0,  85, 160,   4,   0, 
      0,   4,   0,   0,   3, 128, 
      2,   0, 228, 128,   4,   0, 
    228, 160,   2,   0, 228, 144, 
     95,   0,   0,   3,   4,   0, 
     15, 128,   0,   0, 228, 128, 
      1,   8, 228, 160,   2,   0, 
      0,   3,   3,   0,   1, 128, 
      3,   0,   0, 128,   4,   0, 
    255, 128,   2,   0,   0,   3, 
      3,   0,   2, 128,   3,   0, 
     85, 128,   5,   0, 170, 160, 
     39,   0,   0,   0,   1,   0, 
      0,   2,   1,   0,   1, 128, 
      3,   0,   0, 128,   2,   0, 
      0,   3,   1,   0,   2, 128, 
      1,   0,  85, 128,   5,   0, 
    170, 160,  39,   0,   0,   0, 
      5,   0,   0,   3,   0,   0, 
      1, 128,   1,   0,   0, 128, 
      0,   0, 255, 160,   5,   0, 
      0,   3,   0,   0,   1, 128, 
      0,   0,   0, 128,   0,   0, 
    170, 160,   5,   0,   0,   3, 
      1,   0,   3, 128,   3,   0, 
    228, 160,   2,   0, 228, 144, 
      1,   0,   0,   2,   1,   0, 
     12, 128,   5,   0,   0, 160, 
     95,   0,   0,   3,   1,   0, 
     15, 128,   1,   0, 228, 128, 
      0,   8, 228, 160,  18,   0, 
      0,   4,   2,   0,  15, 128, 
      0,   0,   0, 128,   1,   0, 
    228, 128,   2,   0, 228, 160, 
      5,   0,   0,   3,   0,   0, 
     15, 128,   1,   0, 255, 128, 
      2,   0, 228, 128,   4,   0, 
      0,   4,   1,   0,  15, 128, 
      1,   0,  36, 144,   5,   0, 
     42, 160,   5,   0, 128, 160, 
      5,   0,   0,   3,   0,   0, 
     15, 128,   0,   0, 228, 128, 
      1,   0, 228, 128,   5,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0, 228, 128,   1,   0, 
    255, 144,   4,   0,   0,   4, 
      0,   0,  15, 128,   0,   0, 
    228, 144,   0,   0, 255, 128, 
      0,   0, 228, 128,   2,   0, 
      0,   3,   1,   0,  15, 128, 
      0,   0, 228, 128,   5,   0, 
    255, 160,   4,   0,   0,   4, 
      0,   8,  15, 128,   0,   0, 
    255, 128,   1,   0, 228, 128, 
      5,   0, 170, 160, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 fsize;
//   float4 offset;
//   float4 scolor;
//   sampler2D srctex;
//   float4 srctexscale;
//   sampler2D tex;
//   float4 texscale;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   fsize        c0       1
//   offset       c1       1
//   scolor       c2       1
//   srctexscale  c3       1
//   texscale     c4       1
//   srctex       s0       1
//   tex          s1       1
//

    ps_3_0
    def c5, 0, 0, 1, 0
    defi i0, 255, 0, 0, 0
    dcl_texcoord v0
    dcl_texcoord1 v1
    dcl_texcoord2 v2.xy
    dcl_2d s0
    dcl_2d s1
    mov r0.zw, c5.x
    mov r1.x, c5.x
    mov r1.y, -c0.x
    rep i0
      break_lt c0.x, r1.y
      add r2.x, r1.y, c1.x
      mov r3.x, r1.x
      mov r3.y, -c0.y
      rep i0
        break_lt c0.y, r3.y
        add r2.y, r3.y, c1.y
        mad r0.xy, r2, c4, v2
        texldl r4, r0, s1
        add r3.x, r3.x, r4.w
        add r3.y, r3.y, c5.z
      endrep
      mov r1.x, r3.x
      add r1.y, r1.y, c5.z
    endrep
    mul r0.x, r1.x, c0.w
    mul r0.x, r0.x, c0.z
    mul r1.xy, c3, v2
    mov r1.zw, c5.x
    texldl r1, r1, s0
    lrp r2, r0.x, r1, c2
    mad r0, r2, r1.w, -r1
    mad r1, v1.xyzx, c5.zzzx, c5.xxxz
    mul r0, r0, r1
    mul r0, r0, v1.w
    mad oC0, v0, r0.w, r0

// approximately 42 instruction slots used (4 texture, 38 arithmetic)
#endif

extern const BYTE pBinary_FBox2InnerShadowKnockout[] =
{
      0,   3, 255, 255, 254, 255, 
     83,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  24,   1, 
      0,   0,   0,   3, 255, 255, 
      7,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     17,   1,   0,   0, 168,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 176,   0, 
      0,   0,   0,   0,   0,   0, 
    192,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    176,   0,   0,   0,   0,   0, 
      0,   0, 199,   0,   0,   0, 
      2,   0,   2,   0,   1,   0, 
     10,   0, 176,   0,   0,   0, 
      0,   0,   0,   0, 206,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0, 216,   0, 
      0,   0,   0,   0,   0,   0, 
    232,   0,   0,   0,   2,   0, 
      3,   0,   1,   0,  14,   0, 
    176,   0,   0,   0,   0,   0, 
      0,   0, 244,   0,   0,   0, 
      3,   0,   1,   0,   1,   0, 
      6,   0, 248,   0,   0,   0, 
      0,   0,   0,   0,   8,   1, 
      0,   0,   2,   0,   4,   0, 
      1,   0,  18,   0, 176,   0, 
      0,   0,   0,   0,   0,   0, 
    102, 115, 105, 122, 101,   0, 
    171, 171,   1,   0,   3,   0, 
      1,   0,   4,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    111, 102, 102, 115, 101, 116, 
      0, 115,  99, 111, 108, 111, 
    114,   0, 115, 114,  99, 116, 
    101, 120,   0, 171, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 115, 114, 
     99, 116, 101, 120, 115,  99, 
     97, 108, 101,   0, 116, 101, 
    120,   0,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120, 115,  99,  97, 
    108, 101,   0, 112, 115,  95, 
     51,  95,  48,   0,  77, 105, 
     99, 114, 111, 115, 111, 102, 
    116,  32,  40,  82,  41,  32, 
     72,  76,  83,  76,  32,  83, 
    104,  97, 100, 101, 114,  32, 
     67, 111, 109, 112, 105, 108, 
    101, 114,  32,  57,  46,  51, 
     48,  46,  56,  52,  48,  48, 
     46,  48,   0, 171,  81,   0, 
      0,   5,   5,   0,  15, 160, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0, 128,  63, 
      0,   0,   0,   0,  48,   0, 
      0,   5,   0,   0,  15, 240, 
    255,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   2, 128, 
      2,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,   1,   0, 
      0,   2,   0,   0,  12, 128, 
      5,   0,   0, 160,   1,   0, 
      0,   2,   1,   0,   1, 128, 
      5,   0,   0, 160,   1,   0, 
      0,   2,   1,   0,   2, 128, 
      0,   0,   0, 161,  38,   0, 
      0,   1,   0,   0, 228, 240, 
     45,   0,   4,   2,   0,   0, 
      0, 160,   1,   0,  85, 128, 
      2,   0,   0,   3,   2,   0, 
      1, 128,   1,   0,  85, 128, 
      1,   0,   0, 160,   1,   0, 
      0,   2,   3,   0,   1, 128, 
      1,   0,   0, 128,   1,   0, 
      0,   2,   3,   0,   2, 128, 
      0,   0,  85, 161,  38,   0, 
      0,   1,   0,   0, 228, 240, 
     45,   0,   4,   2,   0,   0, 
     85, 160,   3,   0,  85, 128, 
      2,   0,   0,   3,   2,   0, 
      2, 128,   3,   0,  85, 128, 
      1,   0,  85, 160,   4,   0, 
      0,   4,   0,   0,   3, 128, 
      2,   0, 228, 128,   4,   0, 
    228, 160,   2,   0, 228, 144, 
     95,   0,   0,   3,   4,   0, 
     15, 128,   0,   0, 228, 128, 
      1,   8, 228, 160,   2,   0, 
      0,   3,   3,   0,   1, 128, 
      3,   0,   0, 128,   4,   0, 
    255, 128,   2,   0,   0,   3, 
      3,   0,   2, 128,   3,   0, 
     85, 128,   5,   0, 170, 160, 
     39,   0,   0,   0,   1,   0, 
      0,   2,   1,   0,   1, 128, 
      3,   0,   0, 128,   2,   0, 
      0,   3,   1,   0,   2, 128, 
      1,   0,  85, 128,   5,   0, 
    170, 160,  39,   0,   0,   0, 
      5,   0,   0,   3,   0,   0, 
      1, 128,   1,   0,   0, 128, 
      0,   0, 255, 160,   5,   0, 
      0,   3,   0,   0,   1, 128, 
      0,   0,   0, 128,   0,   0, 
    170, 160,   5,   0,   0,   3, 
      1,   0,   3, 128,   3,   0, 
    228, 160,   2,   0, 228, 144, 
      1,   0,   0,   2,   1,   0, 
     12, 128,   5,   0,   0, 160, 
     95,   0,   0,   3,   1,   0, 
     15, 128,   1,   0, 228, 128, 
      0,   8, 228, 160,  18,   0, 
      0,   4,   2,   0,  15, 128, 
      0,   0,   0, 128,   1,   0, 
    228, 128,   2,   0, 228, 160, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   2,   0, 228, 128, 
      1,   0, 255, 128,   1,   0, 
    228, 129,   4,   0,   0,   4, 
      1,   0,  15, 128,   1,   0, 
     36, 144,   5,   0,  42, 160, 
      5,   0, 128, 160,   5,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0, 228, 128,   1,   0, 
    228, 128,   5,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   1,   0, 255, 144, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 228, 144, 
      0,   0, 255, 128,   0,   0, 
    228, 128, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 fsize;
//   float4 offset;
//   float4 scolor;
//   sampler2D srctex;
//   float4 srctexscale;
//   sampler2D tex;
//   float4 texscale;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   fsize        c0       1
//   offset       c1       1
//   scolor       c2       1
//   srctexscale  c3       1
//   texscale     c4       1
//   srctex       s0       1
//   tex          s1       1
//

    ps_3_0
    def c5, 0, 0, 1, -1
    defi i0, 255, 0, 0, 0
    dcl_texcoord v0
    dcl_texcoord1 v1
    dcl_texcoord2 v2.xy
    dcl_2d s0
    dcl_2d s1
    mov r0.zw, c5.x
    mov r1.x, c5.x
    mov r1.y, -c0.x
    rep i0
      break_lt c0.x, r1.y
      add r2.x, r1.y, c1.x
      mov r3.x, r1.x
      mov r3.y, -c0.y
      rep i0
        break_lt c0.y, r3.y
        add r2.y, r3.y, c1.y
        mad r0.xy, r2, c4, v2
        texldl r4, r0, s1
        add r3.x, r3.x, r4.w
        add r3.y, r3.y, c5.z
      endrep
      mov r1.x, r3.x
      add r1.y, r1.y, c5.z
    endrep
    mul r0.x, r1.x, c0.w
    mul r0.x, r0.x, c0.z
    mul r1.xy, c3, v2
    mov r1.zw, c5.x
    texldl r1, r1, s0
    lrp r2, r0.x, r1, c2
    mad r0, r2, r1.w, -r1
    mad r1, v1.xyzx, c5.zzzx, c5.xxxz
    mul r0, r0, r1
    mul r0, r0, v1.w
    mad r0, v0, r0.w, r0
    add r1, r0, c5.w
    mad oC0, r0.w, r1, c5.z

// approximately 44 instruction slots used (4 texture, 40 arithmetic)
#endif

extern const BYTE pBinary_FBox2InnerShadowKnockoutMul[] =
{
      0,   3, 255, 255, 254, 255, 
     83,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  24,   1, 
      0,   0,   0,   3, 255, 255, 
      7,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     17,   1,   0,   0, 168,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 176,   0, 
      0,   0,   0,   0,   0,   0, 
    192,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    176,   0,   0,   0,   0,   0, 
      0,   0, 199,   0,   0,   0, 
      2,   0,   2,   0,   1,   0, 
     10,   0, 176,   0,   0,   0, 
      0,   0,   0,   0, 206,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0, 216,   0, 
      0,   0,   0,   0,   0,   0, 
    232,   0,   0,   0,   2,   0, 
      3,   0,   1,   0,  14,   0, 
    176,   0,   0,   0,   0,   0, 
      0,   0, 244,   0,   0,   0, 
      3,   0,   1,   0,   1,   0, 
      6,   0, 248,   0,   0,   0, 
      0,   0,   0,   0,   8,   1, 
      0,   0,   2,   0,   4,   0, 
      1,   0,  18,   0, 176,   0, 
      0,   0,   0,   0,   0,   0, 
    102, 115, 105, 122, 101,   0, 
    171, 171,   1,   0,   3,   0, 
      1,   0,   4,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    111, 102, 102, 115, 101, 116, 
      0, 115,  99, 111, 108, 111, 
    114,   0, 115, 114,  99, 116, 
    101, 120,   0, 171, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 115, 114, 
     99, 116, 101, 120, 115,  99, 
     97, 108, 101,   0, 116, 101, 
    120,   0,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120, 115,  99,  97, 
    108, 101,   0, 112, 115,  95, 
     51,  95,  48,   0,  77, 105, 
     99, 114, 111, 115, 111, 102, 
    116,  32,  40,  82,  41,  32, 
     72,  76,  83,  76,  32,  83, 
    104,  97, 100, 101, 114,  32, 
     67, 111, 109, 112, 105, 108, 
    101, 114,  32,  57,  46,  51, 
     48,  46,  56,  52,  48,  48, 
     46,  48,   0, 171,  81,   0, 
      0,   5,   5,   0,  15, 160, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0, 128,  63, 
      0,   0, 128, 191,  48,   0, 
      0,   5,   0,   0,  15, 240, 
    255,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   2, 128, 
      2,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,   1,   0, 
      0,   2,   0,   0,  12, 128, 
      5,   0,   0, 160,   1,   0, 
      0,   2,   1,   0,   1, 128, 
      5,   0,   0, 160,   1,   0, 
      0,   2,   1,   0,   2, 128, 
      0,   0,   0, 161,  38,   0, 
      0,   1,   0,   0, 228, 240, 
     45,   0,   4,   2,   0,   0, 
      0, 160,   1,   0,  85, 128, 
      2,   0,   0,   3,   2,   0, 
      1, 128,   1,   0,  85, 128, 
      1,   0,   0, 160,   1,   0, 
      0,   2,   3,   0,   1, 128, 
      1,   0,   0, 128,   1,   0, 
      0,   2,   3,   0,   2, 128, 
      0,   0,  85, 161,  38,   0, 
      0,   1,   0,   0, 228, 240, 
     45,   0,   4,   2,   0,   0, 
     85, 160,   3,   0,  85, 128, 
      2,   0,   0,   3,   2,   0, 
      2, 128,   3,   0,  85, 128, 
      1,   0,  85, 160,   4,   0, 
      0,   4,   0,   0,   3, 128, 
      2,   0, 228, 128,   4,   0, 
    228, 160,   2,   0, 228, 144, 
     95,   0,   0,   3,   4,   0, 
     15, 128,   0,   0, 228, 128, 
      1,   8, 228, 160,   2,   0, 
      0,   3,   3,   0,   1, 128, 
      3,   0,   0, 128,   4,   0, 
    255, 128,   2,   0,   0,   3, 
      3,   0,   2, 128,   3,   0, 
     85, 128,   5,   0, 170, 160, 
     39,   0,   0,   0,   1,   0, 
      0,   2,   1,   0,   1, 128, 
      3,   0,   0, 128,   2,   0, 
      0,   3,   1,   0,   2, 128, 
      1,   0,  85, 128,   5,   0, 
    170, 160,  39,   0,   0,   0, 
      5,   0,   0,   3,   0,   0, 
      1, 128,   1,   0,   0, 128, 
      0,   0, 255, 160,   5,   0, 
      0,   3,   0,   0,   1, 128, 
      0,   0,   0, 128,   0,   0, 
    170, 160,   5,   0,   0,   3, 
      1,   0,   3, 128,   3,   0, 
    228, 160,   2,   0, 228, 144, 
      1,   0,   0,   2,   1,   0, 
     12, 128,   5,   0,   0, 160, 
     95,   0,   0,   3,   1,   0, 
     15, 128,   1,   0, 228, 128, 
      0,   8, 228, 160,  18,   0, 
      0,   4,   2,   0,  15, 128, 
      0,   0,   0, 128,   1,   0, 
    228, 128,   2,   0, 228, 160, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   2,   0, 228, 128, 
      1,   0, 255, 128,   1,   0, 
    228, 129,   4,   0,   0,   4, 
      1,   0,  15, 128,   1,   0, 
     36, 144,   5,   0,  42, 160, 
      5,   0, 128, 160,   5,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0, 228, 128,   1,   0, 
    228, 128,   5,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   1,   0, 255, 144, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   0,   0, 228, 144, 
      0,   0, 255, 128,   0,   0, 
    228, 128,   2,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    228, 128,   5,   0, 255, 160, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 255, 128, 
      1,   0, 228, 128,   5,   0, 
    170, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 fsize;
//   float4 offset;
//   float4 scolor;
//   sampler2D tex;
//   float4 texscale;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   fsize        c0       1
//   offset       c1       1
//   scolor       c2       1
//   texscale     c3       1
//   tex          s0       1
//

    ps_3_0
    def c4, 0, 0, 1, 0
    defi i0, 255, 0, 0, 0
    dcl_texcoord v0
    dcl_texcoord1 v1
    dcl_texcoord2 v2.xy
    dcl_2d s0
    mov r0.zw, c4.x
    mov r1.x, c4.x
    mov r1.y, -c0.x
    rep i0
      break_lt c0.x, r1.y
      add r2.x, r1.y, c1.x
      mov r3.x, r1.x
      mov r3.y, -c0.y
      rep i0
        break_lt c0.y, r3.y
        add r2.y, r3.y, c1.y
        mad r0.xy, r2, c3, v2
        texldl r4, r0, s0
        add r3.x, r3.x, r4.w
        add r3.y, r3.y, c4.z
      endrep
      mov r1.x, r3.x
      add r1.y, r1.y, c4.z
    endrep
    mul r0.x, r1.x, c0.w
    mul r0.x, r0.x, c0.z
    mul r0, r0.x, c2
    mad r1, v1.xyzx, c4.zzzx, c4.xxxz
    mul r0, r0, r1
    mul r0, r0, v1.w
    mad oC0, v0, r0.w, r0

// approximately 37 instruction slots used (2 texture, 35 arithmetic)
#endif

extern const BYTE pBinary_FBox2Shadowonly[] =
{
      0,   3, 255, 255, 254, 255, 
     64,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 204,   0, 
      0,   0,   0,   3, 255, 255, 
      5,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    197,   0,   0,   0, 128,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 136,   0, 
      0,   0,   0,   0,   0,   0, 
    152,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    136,   0,   0,   0,   0,   0, 
      0,   0, 159,   0,   0,   0, 
      2,   0,   2,   0,   1,   0, 
     10,   0, 136,   0,   0,   0, 
      0,   0,   0,   0, 166,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0, 172,   0, 
      0,   0,   0,   0,   0,   0, 
    188,   0,   0,   0,   2,   0, 
      3,   0,   1,   0,  14,   0, 
    136,   0,   0,   0,   0,   0, 
      0,   0, 102, 115, 105, 122, 
    101,   0, 171, 171,   1,   0, 
      3,   0,   1,   0,   4,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 111, 102, 102, 115, 
    101, 116,   0, 115,  99, 111, 
    108, 111, 114,   0, 116, 101, 
    120,   0, 171, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 116, 101, 120, 115, 
     99,  97, 108, 101,   0, 112, 
    115,  95,  51,  95,  48,   0, 
     77, 105,  99, 114, 111, 115, 
    111, 102, 116,  32,  40,  82, 
     41,  32,  72,  76,  83,  76, 
     32,  83, 104,  97, 100, 101, 
    114,  32,  67, 111, 109, 112, 
    105, 108, 101, 114,  32,  57, 
     46,  51,  48,  46,  56,  52, 
     48,  48,  46,  48,   0, 171, 
     81,   0,   0,   5,   4,   0, 
     15, 160,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
    128,  63,   0,   0,   0,   0, 
     48,   0,   0,   5,   0,   0, 
     15, 240, 255,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      2, 128,   2,   0,   3, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   0,   8,  15, 160, 
      1,   0,   0,   2,   0,   0, 
     12, 128,   4,   0,   0, 160, 
      1,   0,   0,   2,   1,   0, 
      1, 128,   4,   0,   0, 160, 
      1,   0,   0,   2,   1,   0, 
      2, 128,   0,   0,   0, 161, 
     38,   0,   0,   1,   0,   0, 
    228, 240,  45,   0,   4,   2, 
      0,   0,   0, 160,   1,   0, 
     85, 128,   2,   0,   0,   3, 
      2,   0,   1, 128,   1,   0, 
     85, 128,   1,   0,   0, 160, 
      1,   0,   0,   2,   3,   0, 
      1, 128,   1,   0,   0, 128, 
      1,   0,   0,   2,   3,   0, 
      2, 128,   0,   0,  85, 161, 
     38,   0,   0,   1,   0,   0, 
    228, 240,  45,   0,   4,   2, 
      0,   0,  85, 160,   3,   0, 
     85, 128,   2,   0,   0,   3, 
      2,   0,   2, 128,   3,   0, 
     85, 128,   1,   0,  85, 160, 
      4,   0,   0,   4,   0,   0, 
      3, 128,   2,   0, 228, 128, 
      3,   0, 228, 160,   2,   0, 
    228, 144,  95,   0,   0,   3, 
      4,   0,  15, 128,   0,   0, 
    228, 128,   0,   8, 228, 160, 
      2,   0,   0,   3,   3,   0, 
      1, 128,   3,   0,   0, 128, 
      4,   0, 255, 128,   2,   0, 
      0,   3,   3,   0,   2, 128, 
      3,   0,  85, 128,   4,   0, 
    170, 160,  39,   0,   0,   0, 
      1,   0,   0,   2,   1,   0, 
      1, 128,   3,   0,   0, 128, 
      2,   0,   0,   3,   1,   0, 
      2, 128,   1,   0,  85, 128, 
      4,   0, 170, 160,  39,   0, 
      0,   0,   5,   0,   0,   3, 
      0,   0,   1, 128,   1,   0, 
      0, 128,   0,   0, 255, 160, 
      5,   0,   0,   3,   0,   0, 
      1, 128,   0,   0,   0, 128, 
      0,   0, 170, 160,   5,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0,   0, 128,   2,   0, 
    228, 160,   4,   0,   0,   4, 
      1,   0,  15, 128,   1,   0, 
     36, 144,   4,   0,  42, 160, 
      4,   0, 128, 160,   5,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0, 228, 128,   1,   0, 
    228, 128,   5,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   1,   0, 255, 144, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 228, 144, 
      0,   0, 255, 128,   0,   0, 
    228, 128, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 fsize;
//   float4 offset;
//   float4 scolor;
//   sampler2D tex;
//   float4 texscale;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   fsize        c0       1
//   offset       c1       1
//   scolor       c2       1
//   texscale     c3       1
//   tex          s0       1
//

    ps_3_0
    def c4, 0, 0, 1, -1
    defi i0, 255, 0, 0, 0
    dcl_texcoord v0
    dcl_texcoord1 v1
    dcl_texcoord2 v2.xy
    dcl_2d s0
    mov r0.zw, c4.x
    mov r1.x, c4.x
    mov r1.y, -c0.x
    rep i0
      break_lt c0.x, r1.y
      add r2.x, r1.y, c1.x
      mov r3.x, r1.x
      mov r3.y, -c0.y
      rep i0
        break_lt c0.y, r3.y
        add r2.y, r3.y, c1.y
        mad r0.xy, r2, c3, v2
        texldl r4, r0, s0
        add r3.x, r3.x, r4.w
        add r3.y, r3.y, c4.z
      endrep
      mov r1.x, r3.x
      add r1.y, r1.y, c4.z
    endrep
    mul r0.x, r1.x, c0.w
    mul r0.x, r0.x, c0.z
    mul r0, r0.x, c2
    mad r1, v1.xyzx, c4.zzzx, c4.xxxz
    mul r0, r0, r1
    mul r0, r0, v1.w
    mad r0, v0, r0.w, r0
    add r1, r0, c4.w
    mad oC0, r0.w, r1, c4.z

// approximately 39 instruction slots used (2 texture, 37 arithmetic)
#endif

extern const BYTE pBinary_FBox2ShadowonlyMul[] =
{
      0,   3, 255, 255, 254, 255, 
     64,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 204,   0, 
      0,   0,   0,   3, 255, 255, 
      5,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    197,   0,   0,   0, 128,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 136,   0, 
      0,   0,   0,   0,   0,   0, 
    152,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    136,   0,   0,   0,   0,   0, 
      0,   0, 159,   0,   0,   0, 
      2,   0,   2,   0,   1,   0, 
     10,   0, 136,   0,   0,   0, 
      0,   0,   0,   0, 166,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0, 172,   0, 
      0,   0,   0,   0,   0,   0, 
    188,   0,   0,   0,   2,   0, 
      3,   0,   1,   0,  14,   0, 
    136,   0,   0,   0,   0,   0, 
      0,   0, 102, 115, 105, 122, 
    101,   0, 171, 171,   1,   0, 
      3,   0,   1,   0,   4,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 111, 102, 102, 115, 
    101, 116,   0, 115,  99, 111, 
    108, 111, 114,   0, 116, 101, 
    120,   0, 171, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 116, 101, 120, 115, 
     99,  97, 108, 101,   0, 112, 
    115,  95,  51,  95,  48,   0, 
     77, 105,  99, 114, 111, 115, 
    111, 102, 116,  32,  40,  82, 
     41,  32,  72,  76,  83,  76, 
     32,  83, 104,  97, 100, 101, 
    114,  32,  67, 111, 109, 112, 
    105, 108, 101, 114,  32,  57, 
     46,  51,  48,  46,  56,  52, 
     48,  48,  46,  48,   0, 171, 
     81,   0,   0,   5,   4,   0, 
     15, 160,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
    128,  63,   0,   0, 128, 191, 
     48,   0,   0,   5,   0,   0, 
     15, 240, 255,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      2, 128,   2,   0,   3, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   0,   8,  15, 160, 
      1,   0,   0,   2,   0,   0, 
     12, 128,   4,   0,   0, 160, 
      1,   0,   0,   2,   1,   0, 
      1, 128,   4,   0,   0, 160, 
      1,   0,   0,   2,   1,   0, 
      2, 128,   0,   0,   0, 161, 
     38,   0,   0,   1,   0,   0, 
    228, 240,  45,   0,   4,   2, 
      0,   0,   0, 160,   1,   0, 
     85, 128,   2,   0,   0,   3, 
      2,   0,   1, 128,   1,   0, 
     85, 128,   1,   0,   0, 160, 
      1,   0,   0,   2,   3,   0, 
      1, 128,   1,   0,   0, 128, 
      1,   0,   0,   2,   3,   0, 
      2, 128,   0,   0,  85, 161, 
     38,   0,   0,   1,   0,   0, 
    228, 240,  45,   0,   4,   2, 
      0,   0,  85, 160,   3,   0, 
     85, 128,   2,   0,   0,   3, 
      2,   0,   2, 128,   3,   0, 
     85, 128,   1,   0,  85, 160, 
      4,   0,   0,   4,   0,   0, 
      3, 128,   2,   0, 228, 128, 
      3,   0, 228, 160,   2,   0, 
    228, 144,  95,   0,   0,   3, 
      4,   0,  15, 128,   0,   0, 
    228, 128,   0,   8, 228, 160, 
      2,   0,   0,   3,   3,   0, 
      1, 128,   3,   0,   0, 128, 
      4,   0, 255, 128,   2,   0, 
      0,   3,   3,   0,   2, 128, 
      3,   0,  85, 128,   4,   0, 
    170, 160,  39,   0,   0,   0, 
      1,   0,   0,   2,   1,   0, 
      1, 128,   3,   0,   0, 128, 
      2,   0,   0,   3,   1,   0, 
      2, 128,   1,   0,  85, 128, 
      4,   0, 170, 160,  39,   0, 
      0,   0,   5,   0,   0,   3, 
      0,   0,   1, 128,   1,   0, 
      0, 128,   0,   0, 255, 160, 
      5,   0,   0,   3,   0,   0, 
      1, 128,   0,   0,   0, 128, 
      0,   0, 170, 160,   5,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0,   0, 128,   2,   0, 
    228, 160,   4,   0,   0,   4, 
      1,   0,  15, 128,   1,   0, 
     36, 144,   4,   0,  42, 160, 
      4,   0, 128, 160,   5,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0, 228, 128,   1,   0, 
    228, 128,   5,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   1,   0, 255, 144, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   0,   0, 228, 144, 
      0,   0, 255, 128,   0,   0, 
    228, 128,   2,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    228, 128,   4,   0, 255, 160, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 255, 128, 
      1,   0, 228, 128,   4,   0, 
    170, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 fsize;
//   float4 offset;
//   float4 scolor;
//   float4 scolor2;
//   sampler2D srctex;
//   float4 srctexscale;
//   sampler2D tex;
//   float4 texscale;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   fsize        c0       1
//   offset       c1       1
//   scolor       c2       1
//   scolor2      c3       1
//   srctexscale  c4       1
//   texscale     c5       1
//   srctex       s0       1
//   tex          s1       1
//

    ps_3_0
    def c6, 0, 0, 1, 0
    defi i0, 255, 0, 0, 0
    dcl_texcoord v0
    dcl_texcoord1 v1
    dcl_texcoord2 v2.xy
    dcl_2d s0
    dcl_2d s1
    mov r0.zw, c6.x
    mov r1.zw, c6.x
    mov r2.xy, c6.x
    mov r2.z, -c0.x
    rep i0
      break_lt c0.x, r2.z
      add r3.x, r2.z, c1.x
      mov r4.xy, r2
      mov r4.z, -c0.y
      rep i0
        break_lt c0.y, r4.z
        add r3.y, r4.z, c1.y
        mad r1.xy, r3, -c5, v2
        texldl r5, r1, s1
        mad r0.xy, r3, c5, v2
        texldl r6, r0, s1
        add r4.y, r4.y, r6.w
        add r4.x, r4.x, r5.w
        add r4.z, r4.z, c6.z
      endrep
      mov r2.xy, r4
      add r2.z, r2.z, c6.z
    endrep
    mul r0.xy, r2, c0.w
    mul r0.y, r0.y, c0.z
    mul r1, r0.x, c3
    mad r0, c2, r0.y, r1
    mul r1.xy, c4, v2
    texld r1, r1, s0
    add r2.x, -r1.w, c6.z
    mad r0, r0, r2.x, r1
    mad r1, v1.xyzx, c6.zzzx, c6.xxxz
    mul r0, r0, r1
    mul r0, r0, v1.w
    mad oC0, v0, r0.w, r0

// approximately 47 instruction slots used (5 texture, 42 arithmetic)
#endif

extern const BYTE pBinary_FBox2ShadowHighlight[] =
{
      0,   3, 255, 255, 254, 255, 
     90,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  52,   1, 
      0,   0,   0,   3, 255, 255, 
      8,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     45,   1,   0,   0, 188,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 196,   0, 
      0,   0,   0,   0,   0,   0, 
    212,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    196,   0,   0,   0,   0,   0, 
      0,   0, 219,   0,   0,   0, 
      2,   0,   2,   0,   1,   0, 
     10,   0, 196,   0,   0,   0, 
      0,   0,   0,   0, 226,   0, 
      0,   0,   2,   0,   3,   0, 
      1,   0,  14,   0, 196,   0, 
      0,   0,   0,   0,   0,   0, 
    234,   0,   0,   0,   3,   0, 
      0,   0,   1,   0,   2,   0, 
    244,   0,   0,   0,   0,   0, 
      0,   0,   4,   1,   0,   0, 
      2,   0,   4,   0,   1,   0, 
     18,   0, 196,   0,   0,   0, 
      0,   0,   0,   0,  16,   1, 
      0,   0,   3,   0,   1,   0, 
      1,   0,   6,   0,  20,   1, 
      0,   0,   0,   0,   0,   0, 
     36,   1,   0,   0,   2,   0, 
      5,   0,   1,   0,  22,   0, 
    196,   0,   0,   0,   0,   0, 
      0,   0, 102, 115, 105, 122, 
    101,   0, 171, 171,   1,   0, 
      3,   0,   1,   0,   4,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 111, 102, 102, 115, 
    101, 116,   0, 115,  99, 111, 
    108, 111, 114,   0, 115,  99, 
    111, 108, 111, 114,  50,   0, 
    115, 114,  99, 116, 101, 120, 
      0, 171, 171, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 115, 114,  99, 116, 
    101, 120, 115,  99,  97, 108, 
    101,   0, 116, 101, 120,   0, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 115,  99,  97, 108, 101, 
      0, 112, 115,  95,  51,  95, 
     48,   0,  77, 105,  99, 114, 
    111, 115, 111, 102, 116,  32, 
     40,  82,  41,  32,  72,  76, 
     83,  76,  32,  83, 104,  97, 
    100, 101, 114,  32,  67, 111, 
    109, 112, 105, 108, 101, 114, 
     32,  57,  46,  51,  48,  46, 
     56,  52,  48,  48,  46,  48, 
      0, 171,  81,   0,   0,   5, 
      6,   0,  15, 160,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0, 128,  63,   0,   0, 
      0,   0,  48,   0,   0,   5, 
      0,   0,  15, 240, 255,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  31,   0,   0,   2, 
      5,   0,   0, 128,   0,   0, 
     15, 144,  31,   0,   0,   2, 
      5,   0,   1, 128,   1,   0, 
     15, 144,  31,   0,   0,   2, 
      5,   0,   2, 128,   2,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   1,   8, 
     15, 160,   1,   0,   0,   2, 
      0,   0,  12, 128,   6,   0, 
      0, 160,   1,   0,   0,   2, 
      1,   0,  12, 128,   6,   0, 
      0, 160,   1,   0,   0,   2, 
      2,   0,   3, 128,   6,   0, 
      0, 160,   1,   0,   0,   2, 
      2,   0,   4, 128,   0,   0, 
      0, 161,  38,   0,   0,   1, 
      0,   0, 228, 240,  45,   0, 
      4,   2,   0,   0,   0, 160, 
      2,   0, 170, 128,   2,   0, 
      0,   3,   3,   0,   1, 128, 
      2,   0, 170, 128,   1,   0, 
      0, 160,   1,   0,   0,   2, 
      4,   0,   3, 128,   2,   0, 
    228, 128,   1,   0,   0,   2, 
      4,   0,   4, 128,   0,   0, 
     85, 161,  38,   0,   0,   1, 
      0,   0, 228, 240,  45,   0, 
      4,   2,   0,   0,  85, 160, 
      4,   0, 170, 128,   2,   0, 
      0,   3,   3,   0,   2, 128, 
      4,   0, 170, 128,   1,   0, 
     85, 160,   4,   0,   0,   4, 
      1,   0,   3, 128,   3,   0, 
    228, 128,   5,   0, 228, 161, 
      2,   0, 228, 144,  95,   0, 
      0,   3,   5,   0,  15, 128, 
      1,   0, 228, 128,   1,   8, 
    228, 160,   4,   0,   0,   4, 
      0,   0,   3, 128,   3,   0, 
    228, 128,   5,   0, 228, 160, 
      2,   0, 228, 144,  95,   0, 
      0,   3,   6,   0,  15, 128, 
      0,   0, 228, 128,   1,   8, 
    228, 160,   2,   0,   0,   3, 
      4,   0,   2, 128,   4,   0, 
     85, 128,   6,   0, 255, 128, 
      2,   0,   0,   3,   4,   0, 
      1, 128,   4,   0,   0, 128, 
      5,   0, 255, 128,   2,   0, 
      0,   3,   4,   0,   4, 128, 
      4,   0, 170, 128,   6,   0, 
    170, 160,  39,   0,   0,   0, 
      1,   0,   0,   2,   2,   0, 
      3, 128,   4,   0, 228, 128, 
      2,   0,   0,   3,   2,   0, 
      4, 128,   2,   0, 170, 128, 
      6,   0, 170, 160,  39,   0, 
      0,   0,   5,   0,   0,   3, 
      0,   0,   3, 128,   2,   0, 
    228, 128,   0,   0, 255, 160, 
      5,   0,   0,   3,   0,   0, 
      2, 128,   0,   0,  85, 128, 
      0,   0, 170, 160,   5,   0, 
      0,   3,   1,   0,  15, 128, 
      0,   0,   0, 128,   3,   0, 
    228, 160,   4,   0,   0,   4, 
      0,   0,  15, 128,   2,   0, 
    228, 160,   0,   0,  85, 128, 
      1,   0, 228, 128,   5,   0, 
      0,   3,   1,   0,   3, 128, 
      4,   0, 228, 160,   2,   0, 
    228, 144,  66,   0,   0,   3, 
      1,   0,  15, 128,   1,   0, 
    228, 128,   0,   8, 228, 160, 
      2,   0,   0,   3,   2,   0, 
      1, 128,   1,   0, 255, 129, 
      6,   0, 170, 160,   4,   0, 
      0,   4,   0,   0,  15, 128, 
      0,   0, 228, 128,   2,   0, 
      0, 128,   1,   0, 228, 128, 
      4,   0,   0,   4,   1,   0, 
     15, 128,   1,   0,  36, 144, 
      6,   0,  42, 160,   6,   0, 
    128, 160,   5,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   1,   0, 228, 128, 
      5,   0,   0,   3,   0,   0, 
     15, 128,   0,   0, 228, 128, 
      1,   0, 255, 144,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      0,   0, 228, 144,   0,   0, 
    255, 128,   0,   0, 228, 128, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 fsize;
//   float4 offset;
//   float4 scolor;
//   float4 scolor2;
//   sampler2D srctex;
//   float4 srctexscale;
//   sampler2D tex;
//   float4 texscale;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   fsize        c0       1
//   offset       c1       1
//   scolor       c2       1
//   scolor2      c3       1
//   srctexscale  c4       1
//   texscale     c5       1
//   srctex       s0       1
//   tex          s1       1
//

    ps_3_0
    def c6, 0, 0, 1, -1
    defi i0, 255, 0, 0, 0
    dcl_texcoord v0
    dcl_texcoord1 v1
    dcl_texcoord2 v2.xy
    dcl_2d s0
    dcl_2d s1
    mov r0.zw, c6.x
    mov r1.zw, c6.x
    mov r2.xy, c6.x
    mov r2.z, -c0.x
    rep i0
      break_lt c0.x, r2.z
      add r3.x, r2.z, c1.x
      mov r4.xy, r2
      mov r4.z, -c0.y
      rep i0
        break_lt c0.y, r4.z
        add r3.y, r4.z, c1.y
        mad r1.xy, r3, -c5, v2
        texldl r5, r1, s1
        mad r0.xy, r3, c5, v2
        texldl r6, r0, s1
        add r4.y, r4.y, r6.w
        add r4.x, r4.x, r5.w
        add r4.z, r4.z, c6.z
      endrep
      mov r2.xy, r4
      add r2.z, r2.z, c6.z
    endrep
    mul r0.xy, r2, c0.w
    mul r0.y, r0.y, c0.z
    mul r1, r0.x, c3
    mad r0, c2, r0.y, r1
    mul r1.xy, c4, v2
    texld r1, r1, s0
    add r2.x, -r1.w, c6.z
    mad r0, r0, r2.x, r1
    mad r1, v1.xyzx, c6.zzzx, c6.xxxz
    mul r0, r0, r1
    mul r0, r0, v1.w
    mad r0, v0, r0.w, r0
    add r1, r0, c6.w
    mad oC0, r0.w, r1, c6.z

// approximately 49 instruction slots used (5 texture, 44 arithmetic)
#endif

extern const BYTE pBinary_FBox2ShadowHighlightMul[] =
{
      0,   3, 255, 255, 254, 255, 
     90,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  52,   1, 
      0,   0,   0,   3, 255, 255, 
      8,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     45,   1,   0,   0, 188,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 196,   0, 
      0,   0,   0,   0,   0,   0, 
    212,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    196,   0,   0,   0,   0,   0, 
      0,   0, 219,   0,   0,   0, 
      2,   0,   2,   0,   1,   0, 
     10,   0, 196,   0,   0,   0, 
      0,   0,   0,   0, 226,   0, 
      0,   0,   2,   0,   3,   0, 
      1,   0,  14,   0, 196,   0, 
      0,   0,   0,   0,   0,   0, 
    234,   0,   0,   0,   3,   0, 
      0,   0,   1,   0,   2,   0, 
    244,   0,   0,   0,   0,   0, 
      0,   0,   4,   1,   0,   0, 
      2,   0,   4,   0,   1,   0, 
     18,   0, 196,   0,   0,   0, 
      0,   0,   0,   0,  16,   1, 
      0,   0,   3,   0,   1,   0, 
      1,   0,   6,   0,  20,   1, 
      0,   0,   0,   0,   0,   0, 
     36,   1,   0,   0,   2,   0, 
      5,   0,   1,   0,  22,   0, 
    196,   0,   0,   0,   0,   0, 
      0,   0, 102, 115, 105, 122, 
    101,   0, 171, 171,   1,   0, 
      3,   0,   1,   0,   4,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 111, 102, 102, 115, 
    101, 116,   0, 115,  99, 111, 
    108, 111, 114,   0, 115,  99, 
    111, 108, 111, 114,  50,   0, 
    115, 114,  99, 116, 101, 120, 
      0, 171, 171, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 115, 114,  99, 116, 
    101, 120, 115,  99,  97, 108, 
    101,   0, 116, 101, 120,   0, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 115,  99,  97, 108, 101, 
      0, 112, 115,  95,  51,  95, 
     48,   0,  77, 105,  99, 114, 
    111, 115, 111, 102, 116,  32, 
     40,  82,  41,  32,  72,  76, 
     83,  76,  32,  83, 104,  97, 
    100, 101, 114,  32,  67, 111, 
    109, 112, 105, 108, 101, 114, 
     32,  57,  46,  51,  48,  46, 
     56,  52,  48,  48,  46,  48, 
      0, 171,  81,   0,   0,   5, 
      6,   0,  15, 160,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0, 128,  63,   0,   0, 
    128, 191,  48,   0,   0,   5, 
      0,   0,  15, 240, 255,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  31,   0,   0,   2, 
      5,   0,   0, 128,   0,   0, 
     15, 144,  31,   0,   0,   2, 
      5,   0,   1, 128,   1,   0, 
     15, 144,  31,   0,   0,   2, 
      5,   0,   2, 128,   2,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   1,   8, 
     15, 160,   1,   0,   0,   2, 
      0,   0,  12, 128,   6,   0, 
      0, 160,   1,   0,   0,   2, 
      1,   0,  12, 128,   6,   0, 
      0, 160,   1,   0,   0,   2, 
      2,   0,   3, 128,   6,   0, 
      0, 160,   1,   0,   0,   2, 
      2,   0,   4, 128,   0,   0, 
      0, 161,  38,   0,   0,   1, 
      0,   0, 228, 240,  45,   0, 
      4,   2,   0,   0,   0, 160, 
      2,   0, 170, 128,   2,   0, 
      0,   3,   3,   0,   1, 128, 
      2,   0, 170, 128,   1,   0, 
      0, 160,   1,   0,   0,   2, 
      4,   0,   3, 128,   2,   0, 
    228, 128,   1,   0,   0,   2, 
      4,   0,   4, 128,   0,   0, 
     85, 161,  38,   0,   0,   1, 
      0,   0, 228, 240,  45,   0, 
      4,   2,   0,   0,  85, 160, 
      4,   0, 170, 128,   2,   0, 
      0,   3,   3,   0,   2, 128, 
      4,   0, 170, 128,   1,   0, 
     85, 160,   4,   0,   0,   4, 
      1,   0,   3, 128,   3,   0, 
    228, 128,   5,   0, 228, 161, 
      2,   0, 228, 144,  95,   0, 
      0,   3,   5,   0,  15, 128, 
      1,   0, 228, 128,   1,   8, 
    228, 160,   4,   0,   0,   4, 
      0,   0,   3, 128,   3,   0, 
    228, 128,   5,   0, 228, 160, 
      2,   0, 228, 144,  95,   0, 
      0,   3,   6,   0,  15, 128, 
      0,   0, 228, 128,   1,   8, 
    228, 160,   2,   0,   0,   3, 
      4,   0,   2, 128,   4,   0, 
     85, 128,   6,   0, 255, 128, 
      2,   0,   0,   3,   4,   0, 
      1, 128,   4,   0,   0, 128, 
      5,   0, 255, 128,   2,   0, 
      0,   3,   4,   0,   4, 128, 
      4,   0, 170, 128,   6,   0, 
    170, 160,  39,   0,   0,   0, 
      1,   0,   0,   2,   2,   0, 
      3, 128,   4,   0, 228, 128, 
      2,   0,   0,   3,   2,   0, 
      4, 128,   2,   0, 170, 128, 
      6,   0, 170, 160,  39,   0, 
      0,   0,   5,   0,   0,   3, 
      0,   0,   3, 128,   2,   0, 
    228, 128,   0,   0, 255, 160, 
      5,   0,   0,   3,   0,   0, 
      2, 128,   0,   0,  85, 128, 
      0,   0, 170, 160,   5,   0, 
      0,   3,   1,   0,  15, 128, 
      0,   0,   0, 128,   3,   0, 
    228, 160,   4,   0,   0,   4, 
      0,   0,  15, 128,   2,   0, 
    228, 160,   0,   0,  85, 128, 
      1,   0, 228, 128,   5,   0, 
      0,   3,   1,   0,   3, 128, 
      4,   0, 228, 160,   2,   0, 
    228, 144,  66,   0,   0,   3, 
      1,   0,  15, 128,   1,   0, 
    228, 128,   0,   8, 228, 160, 
      2,   0,   0,   3,   2,   0, 
      1, 128,   1,   0, 255, 129, 
      6,   0, 170, 160,   4,   0, 
      0,   4,   0,   0,  15, 128, 
      0,   0, 228, 128,   2,   0, 
      0, 128,   1,   0, 228, 128, 
      4,   0,   0,   4,   1,   0, 
     15, 128,   1,   0,  36, 144, 
      6,   0,  42, 160,   6,   0, 
    128, 160,   5,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   1,   0, 228, 128, 
      5,   0,   0,   3,   0,   0, 
     15, 128,   0,   0, 228, 128, 
      1,   0, 255, 144,   4,   0, 
      0,   4,   0,   0,  15, 128, 
      0,   0, 228, 144,   0,   0, 
    255, 128,   0,   0, 228, 128, 
      2,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 228, 128, 
      6,   0, 255, 160,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      0,   0, 255, 128,   1,   0, 
    228, 128,   6,   0, 170, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 fsize;
//   float4 offset;
//   float4 scolor;
//   float4 scolor2;
//   sampler2D srctex;
//   float4 srctexscale;
//   sampler2D tex;
//   float4 texscale;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   fsize        c0       1
//   offset       c1       1
//   scolor       c2       1
//   scolor2      c3       1
//   srctexscale  c4       1
//   texscale     c5       1
//   srctex       s0       1
//   tex          s1       1
//

    ps_3_0
    def c6, 0, 0, 1, 0
    defi i0, 255, 0, 0, 0
    dcl_texcoord v0
    dcl_texcoord1 v1
    dcl_texcoord2 v2.xy
    dcl_2d s0
    dcl_2d s1
    mov r0.zw, c6.x
    mov r1.zw, c6.x
    mov r2.xy, c6.x
    mov r2.z, -c0.x
    rep i0
      break_lt c0.x, r2.z
      add r3.x, r2.z, c1.x
      mov r4.xy, r2
      mov r4.z, -c0.y
      rep i0
        break_lt c0.y, r4.z
        add r3.y, r4.z, c1.y
        mad r1.xy, r3, -c5, v2
        texldl r5, r1, s1
        mad r0.xy, r3, c5, v2
        texldl r6, r0, s1
        add r4.y, r4.y, r6.w
        add r4.x, r4.x, r5.w
        add r4.z, r4.z, c6.z
      endrep
      mov r2.xy, r4
      add r2.z, r2.z, c6.z
    endrep
    mul r0.xy, r2, c0.w
    mul r0.y, r0.y, c0.z
    mul r0.zw, c4.xyxy, v2.xyxy
    texld r1, r0.zwzw, s0
    add r0.z, -r1.w, c6.z
    mul r1, r0.x, c3
    mad r1, c2, r0.y, r1
    mul r0, r0.z, r1
    mad r1, v1.xyzx, c6.zzzx, c6.xxxz
    mul r0, r0, r1
    mul r0, r0, v1.w
    mad oC0, v0, r0.w, r0

// approximately 47 instruction slots used (5 texture, 42 arithmetic)
#endif

extern const BYTE pBinary_FBox2ShadowHighlightKnockout[] =
{
      0,   3, 255, 255, 254, 255, 
     90,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  52,   1, 
      0,   0,   0,   3, 255, 255, 
      8,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     45,   1,   0,   0, 188,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 196,   0, 
      0,   0,   0,   0,   0,   0, 
    212,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    196,   0,   0,   0,   0,   0, 
      0,   0, 219,   0,   0,   0, 
      2,   0,   2,   0,   1,   0, 
     10,   0, 196,   0,   0,   0, 
      0,   0,   0,   0, 226,   0, 
      0,   0,   2,   0,   3,   0, 
      1,   0,  14,   0, 196,   0, 
      0,   0,   0,   0,   0,   0, 
    234,   0,   0,   0,   3,   0, 
      0,   0,   1,   0,   2,   0, 
    244,   0,   0,   0,   0,   0, 
      0,   0,   4,   1,   0,   0, 
      2,   0,   4,   0,   1,   0, 
     18,   0, 196,   0,   0,   0, 
      0,   0,   0,   0,  16,   1, 
      0,   0,   3,   0,   1,   0, 
      1,   0,   6,   0,  20,   1, 
      0,   0,   0,   0,   0,   0, 
     36,   1,   0,   0,   2,   0, 
      5,   0,   1,   0,  22,   0, 
    196,   0,   0,   0,   0,   0, 
      0,   0, 102, 115, 105, 122, 
    101,   0, 171, 171,   1,   0, 
      3,   0,   1,   0,   4,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 111, 102, 102, 115, 
    101, 116,   0, 115,  99, 111, 
    108, 111, 114,   0, 115,  99, 
    111, 108, 111, 114,  50,   0, 
    115, 114,  99, 116, 101, 120, 
      0, 171, 171, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 115, 114,  99, 116, 
    101, 120, 115,  99,  97, 108, 
    101,   0, 116, 101, 120,   0, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 115,  99,  97, 108, 101, 
      0, 112, 115,  95,  51,  95, 
     48,   0,  77, 105,  99, 114, 
    111, 115, 111, 102, 116,  32, 
     40,  82,  41,  32,  72,  76, 
     83,  76,  32,  83, 104,  97, 
    100, 101, 114,  32,  67, 111, 
    109, 112, 105, 108, 101, 114, 
     32,  57,  46,  51,  48,  46, 
     56,  52,  48,  48,  46,  48, 
      0, 171,  81,   0,   0,   5, 
      6,   0,  15, 160,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0, 128,  63,   0,   0, 
      0,   0,  48,   0,   0,   5, 
      0,   0,  15, 240, 255,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  31,   0,   0,   2, 
      5,   0,   0, 128,   0,   0, 
     15, 144,  31,   0,   0,   2, 
      5,   0,   1, 128,   1,   0, 
     15, 144,  31,   0,   0,   2, 
      5,   0,   2, 128,   2,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   1,   8, 
     15, 160,   1,   0,   0,   2, 
      0,   0,  12, 128,   6,   0, 
      0, 160,   1,   0,   0,   2, 
      1,   0,  12, 128,   6,   0, 
      0, 160,   1,   0,   0,   2, 
      2,   0,   3, 128,   6,   0, 
      0, 160,   1,   0,   0,   2, 
      2,   0,   4, 128,   0,   0, 
      0, 161,  38,   0,   0,   1, 
      0,   0, 228, 240,  45,   0, 
      4,   2,   0,   0,   0, 160, 
      2,   0, 170, 128,   2,   0, 
      0,   3,   3,   0,   1, 128, 
      2,   0, 170, 128,   1,   0, 
      0, 160,   1,   0,   0,   2, 
      4,   0,   3, 128,   2,   0, 
    228, 128,   1,   0,   0,   2, 
      4,   0,   4, 128,   0,   0, 
     85, 161,  38,   0,   0,   1, 
      0,   0, 228, 240,  45,   0, 
      4,   2,   0,   0,  85, 160, 
      4,   0, 170, 128,   2,   0, 
      0,   3,   3,   0,   2, 128, 
      4,   0, 170, 128,   1,   0, 
     85, 160,   4,   0,   0,   4, 
      1,   0,   3, 128,   3,   0, 
    228, 128,   5,   0, 228, 161, 
      2,   0, 228, 144,  95,   0, 
      0,   3,   5,   0,  15, 128, 
      1,   0, 228, 128,   1,   8, 
    228, 160,   4,   0,   0,   4, 
      0,   0,   3, 128,   3,   0, 
    228, 128,   5,   0, 228, 160, 
      2,   0, 228, 144,  95,   0, 
      0,   3,   6,   0,  15, 128, 
      0,   0, 228, 128,   1,   8, 
    228, 160,   2,   0,   0,   3, 
      4,   0,   2, 128,   4,   0, 
     85, 128,   6,   0, 255, 128, 
      2,   0,   0,   3,   4,   0, 
      1, 128,   4,   0,   0, 128, 
      5,   0, 255, 128,   2,   0, 
      0,   3,   4,   0,   4, 128, 
      4,   0, 170, 128,   6,   0, 
    170, 160,  39,   0,   0,   0, 
      1,   0,   0,   2,   2,   0, 
      3, 128,   4,   0, 228, 128, 
      2,   0,   0,   3,   2,   0, 
      4, 128,   2,   0, 170, 128, 
      6,   0, 170, 160,  39,   0, 
      0,   0,   5,   0,   0,   3, 
      0,   0,   3, 128,   2,   0, 
    228, 128,   0,   0, 255, 160, 
      5,   0,   0,   3,   0,   0, 
      2, 128,   0,   0,  85, 128, 
      0,   0, 170, 160,   5,   0, 
      0,   3,   0,   0,  12, 128, 
      4,   0,  68, 160,   2,   0, 
     68, 144,  66,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    238, 128,   0,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
      4, 128,   1,   0, 255, 129, 
      6,   0, 170, 160,   5,   0, 
      0,   3,   1,   0,  15, 128, 
      0,   0,   0, 128,   3,   0, 
    228, 160,   4,   0,   0,   4, 
      1,   0,  15, 128,   2,   0, 
    228, 160,   0,   0,  85, 128, 
      1,   0, 228, 128,   5,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0, 170, 128,   1,   0, 
    228, 128,   4,   0,   0,   4, 
      1,   0,  15, 128,   1,   0, 
     36, 144,   6,   0,  42, 160, 
      6,   0, 128, 160,   5,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0, 228, 128,   1,   0, 
    228, 128,   5,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   1,   0, 255, 144, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 228, 144, 
      0,   0, 255, 128,   0,   0, 
    228, 128, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 fsize;
//   float4 offset;
//   float4 scolor;
//   float4 scolor2;
//   sampler2D srctex;
//   float4 srctexscale;
//   sampler2D tex;
//   float4 texscale;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   fsize        c0       1
//   offset       c1       1
//   scolor       c2       1
//   scolor2      c3       1
//   srctexscale  c4       1
//   texscale     c5       1
//   srctex       s0       1
//   tex          s1       1
//

    ps_3_0
    def c6, 0, 0, 1, -1
    defi i0, 255, 0, 0, 0
    dcl_texcoord v0
    dcl_texcoord1 v1
    dcl_texcoord2 v2.xy
    dcl_2d s0
    dcl_2d s1
    mov r0.zw, c6.x
    mov r1.zw, c6.x
    mov r2.xy, c6.x
    mov r2.z, -c0.x
    rep i0
      break_lt c0.x, r2.z
      add r3.x, r2.z, c1.x
      mov r4.xy, r2
      mov r4.z, -c0.y
      rep i0
        break_lt c0.y, r4.z
        add r3.y, r4.z, c1.y
        mad r1.xy, r3, -c5, v2
        texldl r5, r1, s1
        mad r0.xy, r3, c5, v2
        texldl r6, r0, s1
        add r4.y, r4.y, r6.w
        add r4.x, r4.x, r5.w
        add r4.z, r4.z, c6.z
      endrep
      mov r2.xy, r4
      add r2.z, r2.z, c6.z
    endrep
    mul r0.xy, r2, c0.w
    mul r0.y, r0.y, c0.z
    mul r0.zw, c4.xyxy, v2.xyxy
    texld r1, r0.zwzw, s0
    add r0.z, -r1.w, c6.z
    mul r1, r0.x, c3
    mad r1, c2, r0.y, r1
    mul r0, r0.z, r1
    mad r1, v1.xyzx, c6.zzzx, c6.xxxz
    mul r0, r0, r1
    mul r0, r0, v1.w
    mad r0, v0, r0.w, r0
    add r1, r0, c6.w
    mad oC0, r0.w, r1, c6.z

// approximately 49 instruction slots used (5 texture, 44 arithmetic)
#endif

extern const BYTE pBinary_FBox2ShadowHighlightKnockoutMul[] =
{
      0,   3, 255, 255, 254, 255, 
     90,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  52,   1, 
      0,   0,   0,   3, 255, 255, 
      8,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     45,   1,   0,   0, 188,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 196,   0, 
      0,   0,   0,   0,   0,   0, 
    212,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    196,   0,   0,   0,   0,   0, 
      0,   0, 219,   0,   0,   0, 
      2,   0,   2,   0,   1,   0, 
     10,   0, 196,   0,   0,   0, 
      0,   0,   0,   0, 226,   0, 
      0,   0,   2,   0,   3,   0, 
      1,   0,  14,   0, 196,   0, 
      0,   0,   0,   0,   0,   0, 
    234,   0,   0,   0,   3,   0, 
      0,   0,   1,   0,   2,   0, 
    244,   0,   0,   0,   0,   0, 
      0,   0,   4,   1,   0,   0, 
      2,   0,   4,   0,   1,   0, 
     18,   0, 196,   0,   0,   0, 
      0,   0,   0,   0,  16,   1, 
      0,   0,   3,   0,   1,   0, 
      1,   0,   6,   0,  20,   1, 
      0,   0,   0,   0,   0,   0, 
     36,   1,   0,   0,   2,   0, 
      5,   0,   1,   0,  22,   0, 
    196,   0,   0,   0,   0,   0, 
      0,   0, 102, 115, 105, 122, 
    101,   0, 171, 171,   1,   0, 
      3,   0,   1,   0,   4,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 111, 102, 102, 115, 
    101, 116,   0, 115,  99, 111, 
    108, 111, 114,   0, 115,  99, 
    111, 108, 111, 114,  50,   0, 
    115, 114,  99, 116, 101, 120, 
      0, 171, 171, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 115, 114,  99, 116, 
    101, 120, 115,  99,  97, 108, 
    101,   0, 116, 101, 120,   0, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 115,  99,  97, 108, 101, 
      0, 112, 115,  95,  51,  95, 
     48,   0,  77, 105,  99, 114, 
    111, 115, 111, 102, 116,  32, 
     40,  82,  41,  32,  72,  76, 
     83,  76,  32,  83, 104,  97, 
    100, 101, 114,  32,  67, 111, 
    109, 112, 105, 108, 101, 114, 
     32,  57,  46,  51,  48,  46, 
     56,  52,  48,  48,  46,  48, 
      0, 171,  81,   0,   0,   5, 
      6,   0,  15, 160,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0, 128,  63,   0,   0, 
    128, 191,  48,   0,   0,   5, 
      0,   0,  15, 240, 255,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  31,   0,   0,   2, 
      5,   0,   0, 128,   0,   0, 
     15, 144,  31,   0,   0,   2, 
      5,   0,   1, 128,   1,   0, 
     15, 144,  31,   0,   0,   2, 
      5,   0,   2, 128,   2,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   1,   8, 
     15, 160,   1,   0,   0,   2, 
      0,   0,  12, 128,   6,   0, 
      0, 160,   1,   0,   0,   2, 
      1,   0,  12, 128,   6,   0, 
      0, 160,   1,   0,   0,   2, 
      2,   0,   3, 128,   6,   0, 
      0, 160,   1,   0,   0,   2, 
      2,   0,   4, 128,   0,   0, 
      0, 161,  38,   0,   0,   1, 
      0,   0, 228, 240,  45,   0, 
      4,   2,   0,   0,   0, 160, 
      2,   0, 170, 128,   2,   0, 
      0,   3,   3,   0,   1, 128, 
      2,   0, 170, 128,   1,   0, 
      0, 160,   1,   0,   0,   2, 
      4,   0,   3, 128,   2,   0, 
    228, 128,   1,   0,   0,   2, 
      4,   0,   4, 128,   0,   0, 
     85, 161,  38,   0,   0,   1, 
      0,   0, 228, 240,  45,   0, 
      4,   2,   0,   0,  85, 160, 
      4,   0, 170, 128,   2,   0, 
      0,   3,   3,   0,   2, 128, 
      4,   0, 170, 128,   1,   0, 
     85, 160,   4,   0,   0,   4, 
      1,   0,   3, 128,   3,   0, 
    228, 128,   5,   0, 228, 161, 
      2,   0, 228, 144,  95,   0, 
      0,   3,   5,   0,  15, 128, 
      1,   0, 228, 128,   1,   8, 
    228, 160,   4,   0,   0,   4, 
      0,   0,   3, 128,   3,   0, 
    228, 128,   5,   0, 228, 160, 
      2,   0, 228, 144,  95,   0, 
      0,   3,   6,   0,  15, 128, 
      0,   0, 228, 128,   1,   8, 
    228, 160,   2,   0,   0,   3, 
      4,   0,   2, 128,   4,   0, 
     85, 128,   6,   0, 255, 128, 
      2,   0,   0,   3,   4,   0, 
      1, 128,   4,   0,   0, 128, 
      5,   0, 255, 128,   2,   0, 
      0,   3,   4,   0,   4, 128, 
      4,   0, 170, 128,   6,   0, 
    170, 160,  39,   0,   0,   0, 
      1,   0,   0,   2,   2,   0, 
      3, 128,   4,   0, 228, 128, 
      2,   0,   0,   3,   2,   0, 
      4, 128,   2,   0, 170, 128, 
      6,   0, 170, 160,  39,   0, 
      0,   0,   5,   0,   0,   3, 
      0,   0,   3, 128,   2,   0, 
    228, 128,   0,   0, 255, 160, 
      5,   0,   0,   3,   0,   0, 
      2, 128,   0,   0,  85, 128, 
      0,   0, 170, 160,   5,   0, 
      0,   3,   0,   0,  12, 128, 
      4,   0,  68, 160,   2,   0, 
     68, 144,  66,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    238, 128,   0,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
      4, 128,   1,   0, 255, 129, 
      6,   0, 170, 160,   5,   0, 
      0,   3,   1,   0,  15, 128, 
      0,   0,   0, 128,   3,   0, 
    228, 160,   4,   0,   0,   4, 
      1,   0,  15, 128,   2,   0, 
    228, 160,   0,   0,  85, 128, 
      1,   0, 228, 128,   5,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0, 170, 128,   1,   0, 
    228, 128,   4,   0,   0,   4, 
      1,   0,  15, 128,   1,   0, 
     36, 144,   6,   0,  42, 160, 
      6,   0, 128, 160,   5,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0, 228, 128,   1,   0, 
    228, 128,   5,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   1,   0, 255, 144, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   0,   0, 228, 144, 
      0,   0, 255, 128,   0,   0, 
    228, 128,   2,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    228, 128,   6,   0, 255, 160, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 255, 128, 
      1,   0, 228, 128,   6,   0, 
    170, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 fsize;
//   float4 offset;
//   float4 scolor;
//   float4 scolor2;
//   sampler2D srctex;
//   float4 srctexscale;
//   sampler2D tex;
//   float4 texscale;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   fsize        c0       1
//   offset       c1       1
//   scolor       c2       1
//   scolor2      c3       1
//   srctexscale  c4       1
//   texscale     c5       1
//   srctex       s0       1
//   tex          s1       1
//

    ps_3_0
    def c6, 0, 0, 1, 0.5
    defi i0, 255, 0, 0, 0
    dcl_texcoord v0
    dcl_texcoord1 v1
    dcl_texcoord2 v2.xy
    dcl_2d s0
    dcl_2d s1
    mov r0.zw, c6.x
    mov r1.zw, c6.x
    mov r2.yz, c6.x
    mov r2.x, -c0.x
    rep i0
      break_lt c0.x, r2.x
      add r3.x, r2.x, c1.x
      mov r4.xy, r2.yzzw
      mov r4.z, -c0.y
      rep i0
        break_lt c0.y, r4.z
        add r3.y, r4.z, c1.y
        mad r1.xy, r3, -c5, v2
        texldl r5, r1, s1
        mad r0.xy, r3, c5, v2
        texldl r6, r0, s1
        add r4.y, r4.y, r6.w
        add r4.x, r4.x, r5.w
        add r4.z, r4.z, c6.z
      endrep
      mov r2.yz, r4.xxyw
      add r2.x, r2.x, c6.z
    endrep
    mul r0.yz, r2, c0.w
    mul r0.x, r0.z, c0.z
    add r0.xy, -r0, c6.z
    mad_sat r0.xy, r0.yxzw, -c6.w, r0
    add r0.z, -r0.x, c6.z
    add r0.z, -r0.y, r0.z
    mul r1.xy, c4, v2
    mov r1.zw, c6.x
    texldl r1, r1, s0
    mul r2, r0.y, c3
    mad r2, c2, r0.x, r2
    mad r0, r1, r0.z, r2
    mul r0, r1.w, r0
    mad r1, v1.xyzx, c6.zzzx, c6.xxxz
    mul r0, r0, r1
    mul r0, r0, v1.w
    mad oC0, v0, r0.w, r0

// approximately 53 instruction slots used (6 texture, 47 arithmetic)
#endif

extern const BYTE pBinary_FBox2InnerShadowHighlight[] =
{
      0,   3, 255, 255, 254, 255, 
     90,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  52,   1, 
      0,   0,   0,   3, 255, 255, 
      8,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     45,   1,   0,   0, 188,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 196,   0, 
      0,   0,   0,   0,   0,   0, 
    212,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    196,   0,   0,   0,   0,   0, 
      0,   0, 219,   0,   0,   0, 
      2,   0,   2,   0,   1,   0, 
     10,   0, 196,   0,   0,   0, 
      0,   0,   0,   0, 226,   0, 
      0,   0,   2,   0,   3,   0, 
      1,   0,  14,   0, 196,   0, 
      0,   0,   0,   0,   0,   0, 
    234,   0,   0,   0,   3,   0, 
      0,   0,   1,   0,   2,   0, 
    244,   0,   0,   0,   0,   0, 
      0,   0,   4,   1,   0,   0, 
      2,   0,   4,   0,   1,   0, 
     18,   0, 196,   0,   0,   0, 
      0,   0,   0,   0,  16,   1, 
      0,   0,   3,   0,   1,   0, 
      1,   0,   6,   0,  20,   1, 
      0,   0,   0,   0,   0,   0, 
     36,   1,   0,   0,   2,   0, 
      5,   0,   1,   0,  22,   0, 
    196,   0,   0,   0,   0,   0, 
      0,   0, 102, 115, 105, 122, 
    101,   0, 171, 171,   1,   0, 
      3,   0,   1,   0,   4,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 111, 102, 102, 115, 
    101, 116,   0, 115,  99, 111, 
    108, 111, 114,   0, 115,  99, 
    111, 108, 111, 114,  50,   0, 
    115, 114,  99, 116, 101, 120, 
      0, 171, 171, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 115, 114,  99, 116, 
    101, 120, 115,  99,  97, 108, 
    101,   0, 116, 101, 120,   0, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 115,  99,  97, 108, 101, 
      0, 112, 115,  95,  51,  95, 
     48,   0,  77, 105,  99, 114, 
    111, 115, 111, 102, 116,  32, 
     40,  82,  41,  32,  72,  76, 
     83,  76,  32,  83, 104,  97, 
    100, 101, 114,  32,  67, 111, 
    109, 112, 105, 108, 101, 114, 
     32,  57,  46,  51,  48,  46, 
     56,  52,  48,  48,  46,  48, 
      0, 171,  81,   0,   0,   5, 
      6,   0,  15, 160,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0, 128,  63,   0,   0, 
      0,  63,  48,   0,   0,   5, 
      0,   0,  15, 240, 255,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  31,   0,   0,   2, 
      5,   0,   0, 128,   0,   0, 
     15, 144,  31,   0,   0,   2, 
      5,   0,   1, 128,   1,   0, 
     15, 144,  31,   0,   0,   2, 
      5,   0,   2, 128,   2,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   1,   8, 
     15, 160,   1,   0,   0,   2, 
      0,   0,  12, 128,   6,   0, 
      0, 160,   1,   0,   0,   2, 
      1,   0,  12, 128,   6,   0, 
      0, 160,   1,   0,   0,   2, 
      2,   0,   6, 128,   6,   0, 
      0, 160,   1,   0,   0,   2, 
      2,   0,   1, 128,   0,   0, 
      0, 161,  38,   0,   0,   1, 
      0,   0, 228, 240,  45,   0, 
      4,   2,   0,   0,   0, 160, 
      2,   0,   0, 128,   2,   0, 
      0,   3,   3,   0,   1, 128, 
      2,   0,   0, 128,   1,   0, 
      0, 160,   1,   0,   0,   2, 
      4,   0,   3, 128,   2,   0, 
    233, 128,   1,   0,   0,   2, 
      4,   0,   4, 128,   0,   0, 
     85, 161,  38,   0,   0,   1, 
      0,   0, 228, 240,  45,   0, 
      4,   2,   0,   0,  85, 160, 
      4,   0, 170, 128,   2,   0, 
      0,   3,   3,   0,   2, 128, 
      4,   0, 170, 128,   1,   0, 
     85, 160,   4,   0,   0,   4, 
      1,   0,   3, 128,   3,   0, 
    228, 128,   5,   0, 228, 161, 
      2,   0, 228, 144,  95,   0, 
      0,   3,   5,   0,  15, 128, 
      1,   0, 228, 128,   1,   8, 
    228, 160,   4,   0,   0,   4, 
      0,   0,   3, 128,   3,   0, 
    228, 128,   5,   0, 228, 160, 
      2,   0, 228, 144,  95,   0, 
      0,   3,   6,   0,  15, 128, 
      0,   0, 228, 128,   1,   8, 
    228, 160,   2,   0,   0,   3, 
      4,   0,   2, 128,   4,   0, 
     85, 128,   6,   0, 255, 128, 
      2,   0,   0,   3,   4,   0, 
      1, 128,   4,   0,   0, 128, 
      5,   0, 255, 128,   2,   0, 
      0,   3,   4,   0,   4, 128, 
      4,   0, 170, 128,   6,   0, 
    170, 160,  39,   0,   0,   0, 
      1,   0,   0,   2,   2,   0, 
      6, 128,   4,   0, 208, 128, 
      2,   0,   0,   3,   2,   0, 
      1, 128,   2,   0,   0, 128, 
      6,   0, 170, 160,  39,   0, 
      0,   0,   5,   0,   0,   3, 
      0,   0,   6, 128,   2,   0, 
    228, 128,   0,   0, 255, 160, 
      5,   0,   0,   3,   0,   0, 
      1, 128,   0,   0, 170, 128, 
      0,   0, 170, 160,   2,   0, 
      0,   3,   0,   0,   3, 128, 
      0,   0, 228, 129,   6,   0, 
    170, 160,   4,   0,   0,   4, 
      0,   0,  19, 128,   0,   0, 
    225, 128,   6,   0, 255, 161, 
      0,   0, 228, 128,   2,   0, 
      0,   3,   0,   0,   4, 128, 
      0,   0,   0, 129,   6,   0, 
    170, 160,   2,   0,   0,   3, 
      0,   0,   4, 128,   0,   0, 
     85, 129,   0,   0, 170, 128, 
      5,   0,   0,   3,   1,   0, 
      3, 128,   4,   0, 228, 160, 
      2,   0, 228, 144,   1,   0, 
      0,   2,   1,   0,  12, 128, 
      6,   0,   0, 160,  95,   0, 
      0,   3,   1,   0,  15, 128, 
      1,   0, 228, 128,   0,   8, 
    228, 160,   5,   0,   0,   3, 
      2,   0,  15, 128,   0,   0, 
     85, 128,   3,   0, 228, 160, 
      4,   0,   0,   4,   2,   0, 
     15, 128,   2,   0, 228, 160, 
      0,   0,   0, 128,   2,   0, 
    228, 128,   4,   0,   0,   4, 
      0,   0,  15, 128,   1,   0, 
    228, 128,   0,   0, 170, 128, 
      2,   0, 228, 128,   5,   0, 
      0,   3,   0,   0,  15, 128, 
      1,   0, 255, 128,   0,   0, 
    228, 128,   4,   0,   0,   4, 
      1,   0,  15, 128,   1,   0, 
     36, 144,   6,   0,  42, 160, 
      6,   0, 128, 160,   5,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0, 228, 128,   1,   0, 
    228, 128,   5,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   1,   0, 255, 144, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 228, 144, 
      0,   0, 255, 128,   0,   0, 
    228, 128, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 fsize;
//   float4 offset;
//   float4 scolor;
//   float4 scolor2;
//   sampler2D srctex;
//   float4 srctexscale;
//   sampler2D tex;
//   float4 texscale;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   fsize        c0       1
//   offset       c1       1
//   scolor       c2       1
//   scolor2      c3       1
//   srctexscale  c4       1
//   texscale     c5       1
//   srctex       s0       1
//   tex          s1       1
//

    ps_3_0
    def c6, 0, 0, 1, 0.5
    defi i0, 255, 0, 0, 0
    dcl_texcoord v0
    dcl_texcoord1 v1
    dcl_texcoord2 v2.xy
    dcl_2d s0
    dcl_2d s1
    mov r0.zw, c6.x
    mov r1.zw, c6.x
    mov r2.yz, c6.x
    mov r2.x, -c0.x
    rep i0
      break_lt c0.x, r2.x
      add r3.x, r2.x, c1.x
      mov r4.xy, r2.yzzw
      mov r4.z, -c0.y
      rep i0
        break_lt c0.y, r4.z
        add r3.y, r4.z, c1.y
        mad r1.xy, r3, -c5, v2
        texldl r5, r1, s1
        mad r0.xy, r3, c5, v2
        texldl r6, r0, s1
        add r4.y, r4.y, r6.w
        add r4.x, r4.x, r5.w
        add r4.z, r4.z, c6.z
      endrep
      mov r2.yz, r4.xxyw
      add r2.x, r2.x, c6.z
    endrep
    mul r0.yz, r2, c0.w
    mul r0.x, r0.z, c0.z
    add r0.xy, -r0, c6.z
    mad_sat r0.xy, r0.yxzw, -c6.w, r0
    add r0.z, -r0.x, c6.z
    add r0.z, -r0.y, r0.z
    mul r1.xy, c4, v2
    mov r1.zw, c6.x
    texldl r1, r1, s0
    mul r2, r0.y, c3
    mad r2, c2, r0.x, r2
    mad r0, r1, r0.z, r2
    mul r0, r1.w, r0
    mad r1, v1.xyzx, c6.zzzx, c6.xxxz
    mul r0, r0, r1
    mul r0, r0, v1.w
    mad r0, v0, r0.w, r0
    add r1, r0, -c6.z
    mad oC0, r0.w, r1, c6.z

// approximately 55 instruction slots used (6 texture, 49 arithmetic)
#endif

extern const BYTE pBinary_FBox2InnerShadowHighlightMul[] =
{
      0,   3, 255, 255, 254, 255, 
     90,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  52,   1, 
      0,   0,   0,   3, 255, 255, 
      8,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     45,   1,   0,   0, 188,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 196,   0, 
      0,   0,   0,   0,   0,   0, 
    212,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    196,   0,   0,   0,   0,   0, 
      0,   0, 219,   0,   0,   0, 
      2,   0,   2,   0,   1,   0, 
     10,   0, 196,   0,   0,   0, 
      0,   0,   0,   0, 226,   0, 
      0,   0,   2,   0,   3,   0, 
      1,   0,  14,   0, 196,   0, 
      0,   0,   0,   0,   0,   0, 
    234,   0,   0,   0,   3,   0, 
      0,   0,   1,   0,   2,   0, 
    244,   0,   0,   0,   0,   0, 
      0,   0,   4,   1,   0,   0, 
      2,   0,   4,   0,   1,   0, 
     18,   0, 196,   0,   0,   0, 
      0,   0,   0,   0,  16,   1, 
      0,   0,   3,   0,   1,   0, 
      1,   0,   6,   0,  20,   1, 
      0,   0,   0,   0,   0,   0, 
     36,   1,   0,   0,   2,   0, 
      5,   0,   1,   0,  22,   0, 
    196,   0,   0,   0,   0,   0, 
      0,   0, 102, 115, 105, 122, 
    101,   0, 171, 171,   1,   0, 
      3,   0,   1,   0,   4,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 111, 102, 102, 115, 
    101, 116,   0, 115,  99, 111, 
    108, 111, 114,   0, 115,  99, 
    111, 108, 111, 114,  50,   0, 
    115, 114,  99, 116, 101, 120, 
      0, 171, 171, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 115, 114,  99, 116, 
    101, 120, 115,  99,  97, 108, 
    101,   0, 116, 101, 120,   0, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 115,  99,  97, 108, 101, 
      0, 112, 115,  95,  51,  95, 
     48,   0,  77, 105,  99, 114, 
    111, 115, 111, 102, 116,  32, 
     40,  82,  41,  32,  72,  76, 
     83,  76,  32,  83, 104,  97, 
    100, 101, 114,  32,  67, 111, 
    109, 112, 105, 108, 101, 114, 
     32,  57,  46,  51,  48,  46, 
     56,  52,  48,  48,  46,  48, 
      0, 171,  81,   0,   0,   5, 
      6,   0,  15, 160,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0, 128,  63,   0,   0, 
      0,  63,  48,   0,   0,   5, 
      0,   0,  15, 240, 255,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  31,   0,   0,   2, 
      5,   0,   0, 128,   0,   0, 
     15, 144,  31,   0,   0,   2, 
      5,   0,   1, 128,   1,   0, 
     15, 144,  31,   0,   0,   2, 
      5,   0,   2, 128,   2,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   1,   8, 
     15, 160,   1,   0,   0,   2, 
      0,   0,  12, 128,   6,   0, 
      0, 160,   1,   0,   0,   2, 
      1,   0,  12, 128,   6,   0, 
      0, 160,   1,   0,   0,   2, 
      2,   0,   6, 128,   6,   0, 
      0, 160,   1,   0,   0,   2, 
      2,   0,   1, 128,   0,   0, 
      0, 161,  38,   0,   0,   1, 
      0,   0, 228, 240,  45,   0, 
      4,   2,   0,   0,   0, 160, 
      2,   0,   0, 128,   2,   0, 
      0,   3,   3,   0,   1, 128, 
      2,   0,   0, 128,   1,   0, 
      0, 160,   1,   0,   0,   2, 
      4,   0,   3, 128,   2,   0, 
    233, 128,   1,   0,   0,   2, 
      4,   0,   4, 128,   0,   0, 
     85, 161,  38,   0,   0,   1, 
      0,   0, 228, 240,  45,   0, 
      4,   2,   0,   0,  85, 160, 
      4,   0, 170, 128,   2,   0, 
      0,   3,   3,   0,   2, 128, 
      4,   0, 170, 128,   1,   0, 
     85, 160,   4,   0,   0,   4, 
      1,   0,   3, 128,   3,   0, 
    228, 128,   5,   0, 228, 161, 
      2,   0, 228, 144,  95,   0, 
      0,   3,   5,   0,  15, 128, 
      1,   0, 228, 128,   1,   8, 
    228, 160,   4,   0,   0,   4, 
      0,   0,   3, 128,   3,   0, 
    228, 128,   5,   0, 228, 160, 
      2,   0, 228, 144,  95,   0, 
      0,   3,   6,   0,  15, 128, 
      0,   0, 228, 128,   1,   8, 
    228, 160,   2,   0,   0,   3, 
      4,   0,   2, 128,   4,   0, 
     85, 128,   6,   0, 255, 128, 
      2,   0,   0,   3,   4,   0, 
      1, 128,   4,   0,   0, 128, 
      5,   0, 255, 128,   2,   0, 
      0,   3,   4,   0,   4, 128, 
      4,   0, 170, 128,   6,   0, 
    170, 160,  39,   0,   0,   0, 
      1,   0,   0,   2,   2,   0, 
      6, 128,   4,   0, 208, 128, 
      2,   0,   0,   3,   2,   0, 
      1, 128,   2,   0,   0, 128, 
      6,   0, 170, 160,  39,   0, 
      0,   0,   5,   0,   0,   3, 
      0,   0,   6, 128,   2,   0, 
    228, 128,   0,   0, 255, 160, 
      5,   0,   0,   3,   0,   0, 
      1, 128,   0,   0, 170, 128, 
      0,   0, 170, 160,   2,   0, 
      0,   3,   0,   0,   3, 128, 
      0,   0, 228, 129,   6,   0, 
    170, 160,   4,   0,   0,   4, 
      0,   0,  19, 128,   0,   0, 
    225, 128,   6,   0, 255, 161, 
      0,   0, 228, 128,   2,   0, 
      0,   3,   0,   0,   4, 128, 
      0,   0,   0, 129,   6,   0, 
    170, 160,   2,   0,   0,   3, 
      0,   0,   4, 128,   0,   0, 
     85, 129,   0,   0, 170, 128, 
      5,   0,   0,   3,   1,   0, 
      3, 128,   4,   0, 228, 160, 
      2,   0, 228, 144,   1,   0, 
      0,   2,   1,   0,  12, 128, 
      6,   0,   0, 160,  95,   0, 
      0,   3,   1,   0,  15, 128, 
      1,   0, 228, 128,   0,   8, 
    228, 160,   5,   0,   0,   3, 
      2,   0,  15, 128,   0,   0, 
     85, 128,   3,   0, 228, 160, 
      4,   0,   0,   4,   2,   0, 
     15, 128,   2,   0, 228, 160, 
      0,   0,   0, 128,   2,   0, 
    228, 128,   4,   0,   0,   4, 
      0,   0,  15, 128,   1,   0, 
    228, 128,   0,   0, 170, 128, 
      2,   0, 228, 128,   5,   0, 
      0,   3,   0,   0,  15, 128, 
      1,   0, 255, 128,   0,   0, 
    228, 128,   4,   0,   0,   4, 
      1,   0,  15, 128,   1,   0, 
     36, 144,   6,   0,  42, 160, 
      6,   0, 128, 160,   5,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0, 228, 128,   1,   0, 
    228, 128,   5,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   1,   0, 255, 144, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   0,   0, 228, 144, 
      0,   0, 255, 128,   0,   0, 
    228, 128,   2,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    228, 128,   6,   0, 170, 161, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 255, 128, 
      1,   0, 228, 128,   6,   0, 
    170, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 fsize;
//   float4 offset;
//   float4 scolor;
//   float4 scolor2;
//   sampler2D srctex;
//   float4 srctexscale;
//   sampler2D tex;
//   float4 texscale;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   fsize        c0       1
//   offset       c1       1
//   scolor       c2       1
//   scolor2      c3       1
//   srctexscale  c4       1
//   texscale     c5       1
//   srctex       s0       1
//   tex          s1       1
//

    ps_3_0
    def c6, 0, 0, 1, 0.5
    defi i0, 255, 0, 0, 0
    dcl_texcoord v0
    dcl_texcoord1 v1
    dcl_texcoord2 v2.xy
    dcl_2d s0
    dcl_2d s1
    mov r0.zw, c6.x
    mov r1.zw, c6.x
    mov r2.yz, c6.x
    mov r2.x, -c0.x
    rep i0
      break_lt c0.x, r2.x
      add r3.x, r2.x, c1.x
      mov r4.xy, r2.yzzw
      mov r4.z, -c0.y
      rep i0
        break_lt c0.y, r4.z
        add r3.y, r4.z, c1.y
        mad r1.xy, r3, -c5, v2
        texldl r5, r1, s1
        mad r0.xy, r3, c5, v2
        texldl r6, r0, s1
        add r4.y, r4.y, r6.w
        add r4.x, r4.x, r5.w
        add r4.z, r4.z, c6.z
      endrep
      mov r2.yz, r4.xxyw
      add r2.x, r2.x, c6.z
    endrep
    mul r0.yz, r2, c0.w
    mul r0.x, r0.z, c0.z
    add r0.xy, -r0, c6.z
    mad_sat r0.xy, r0.yxzw, -c6.w, r0
    add r0.z, -r0.x, c6.z
    add r0.z, -r0.y, r0.z
    mul r1.xy, c4, v2
    mov r1.zw, c6.x
    texldl r1, r1, s0
    mul r2, r0.y, c3
    mad r2, c2, r0.x, r2
    mad r0, r1, r0.z, r2
    mad r0, r0, r1.w, -r1
    mad r1, v1.xyzx, c6.zzzx, c6.xxxz
    mul r0, r0, r1
    mul r0, r0, v1.w
    mad oC0, v0, r0.w, r0

// approximately 53 instruction slots used (6 texture, 47 arithmetic)
#endif

extern const BYTE pBinary_FBox2InnerShadowHighlightKnockout[] =
{
      0,   3, 255, 255, 254, 255, 
     90,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  52,   1, 
      0,   0,   0,   3, 255, 255, 
      8,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     45,   1,   0,   0, 188,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 196,   0, 
      0,   0,   0,   0,   0,   0, 
    212,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    196,   0,   0,   0,   0,   0, 
      0,   0, 219,   0,   0,   0, 
      2,   0,   2,   0,   1,   0, 
     10,   0, 196,   0,   0,   0, 
      0,   0,   0,   0, 226,   0, 
      0,   0,   2,   0,   3,   0, 
      1,   0,  14,   0, 196,   0, 
      0,   0,   0,   0,   0,   0, 
    234,   0,   0,   0,   3,   0, 
      0,   0,   1,   0,   2,   0, 
    244,   0,   0,   0,   0,   0, 
      0,   0,   4,   1,   0,   0, 
      2,   0,   4,   0,   1,   0, 
     18,   0, 196,   0,   0,   0, 
      0,   0,   0,   0,  16,   1, 
      0,   0,   3,   0,   1,   0, 
      1,   0,   6,   0,  20,   1, 
      0,   0,   0,   0,   0,   0, 
     36,   1,   0,   0,   2,   0, 
      5,   0,   1,   0,  22,   0, 
    196,   0,   0,   0,   0,   0, 
      0,   0, 102, 115, 105, 122, 
    101,   0, 171, 171,   1,   0, 
      3,   0,   1,   0,   4,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 111, 102, 102, 115, 
    101, 116,   0, 115,  99, 111, 
    108, 111, 114,   0, 115,  99, 
    111, 108, 111, 114,  50,   0, 
    115, 114,  99, 116, 101, 120, 
      0, 171, 171, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 115, 114,  99, 116, 
    101, 120, 115,  99,  97, 108, 
    101,   0, 116, 101, 120,   0, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 115,  99,  97, 108, 101, 
      0, 112, 115,  95,  51,  95, 
     48,   0,  77, 105,  99, 114, 
    111, 115, 111, 102, 116,  32, 
     40,  82,  41,  32,  72,  76, 
     83,  76,  32,  83, 104,  97, 
    100, 101, 114,  32,  67, 111, 
    109, 112, 105, 108, 101, 114, 
     32,  57,  46,  51,  48,  46, 
     56,  52,  48,  48,  46,  48, 
      0, 171,  81,   0,   0,   5, 
      6,   0,  15, 160,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0, 128,  63,   0,   0, 
      0,  63,  48,   0,   0,   5, 
      0,   0,  15, 240, 255,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  31,   0,   0,   2, 
      5,   0,   0, 128,   0,   0, 
     15, 144,  31,   0,   0,   2, 
      5,   0,   1, 128,   1,   0, 
     15, 144,  31,   0,   0,   2, 
      5,   0,   2, 128,   2,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   1,   8, 
     15, 160,   1,   0,   0,   2, 
      0,   0,  12, 128,   6,   0, 
      0, 160,   1,   0,   0,   2, 
      1,   0,  12, 128,   6,   0, 
      0, 160,   1,   0,   0,   2, 
      2,   0,   6, 128,   6,   0, 
      0, 160,   1,   0,   0,   2, 
      2,   0,   1, 128,   0,   0, 
      0, 161,  38,   0,   0,   1, 
      0,   0, 228, 240,  45,   0, 
      4,   2,   0,   0,   0, 160, 
      2,   0,   0, 128,   2,   0, 
      0,   3,   3,   0,   1, 128, 
      2,   0,   0, 128,   1,   0, 
      0, 160,   1,   0,   0,   2, 
      4,   0,   3, 128,   2,   0, 
    233, 128,   1,   0,   0,   2, 
      4,   0,   4, 128,   0,   0, 
     85, 161,  38,   0,   0,   1, 
      0,   0, 228, 240,  45,   0, 
      4,   2,   0,   0,  85, 160, 
      4,   0, 170, 128,   2,   0, 
      0,   3,   3,   0,   2, 128, 
      4,   0, 170, 128,   1,   0, 
     85, 160,   4,   0,   0,   4, 
      1,   0,   3, 128,   3,   0, 
    228, 128,   5,   0, 228, 161, 
      2,   0, 228, 144,  95,   0, 
      0,   3,   5,   0,  15, 128, 
      1,   0, 228, 128,   1,   8, 
    228, 160,   4,   0,   0,   4, 
      0,   0,   3, 128,   3,   0, 
    228, 128,   5,   0, 228, 160, 
      2,   0, 228, 144,  95,   0, 
      0,   3,   6,   0,  15, 128, 
      0,   0, 228, 128,   1,   8, 
    228, 160,   2,   0,   0,   3, 
      4,   0,   2, 128,   4,   0, 
     85, 128,   6,   0, 255, 128, 
      2,   0,   0,   3,   4,   0, 
      1, 128,   4,   0,   0, 128, 
      5,   0, 255, 128,   2,   0, 
      0,   3,   4,   0,   4, 128, 
      4,   0, 170, 128,   6,   0, 
    170, 160,  39,   0,   0,   0, 
      1,   0,   0,   2,   2,   0, 
      6, 128,   4,   0, 208, 128, 
      2,   0,   0,   3,   2,   0, 
      1, 128,   2,   0,   0, 128, 
      6,   0, 170, 160,  39,   0, 
      0,   0,   5,   0,   0,   3, 
      0,   0,   6, 128,   2,   0, 
    228, 128,   0,   0, 255, 160, 
      5,   0,   0,   3,   0,   0, 
      1, 128,   0,   0, 170, 128, 
      0,   0, 170, 160,   2,   0, 
      0,   3,   0,   0,   3, 128, 
      0,   0, 228, 129,   6,   0, 
    170, 160,   4,   0,   0,   4, 
      0,   0,  19, 128,   0,   0, 
    225, 128,   6,   0, 255, 161, 
      0,   0, 228, 128,   2,   0, 
      0,   3,   0,   0,   4, 128, 
      0,   0,   0, 129,   6,   0, 
    170, 160,   2,   0,   0,   3, 
      0,   0,   4, 128,   0,   0, 
     85, 129,   0,   0, 170, 128, 
      5,   0,   0,   3,   1,   0, 
      3, 128,   4,   0, 228, 160, 
      2,   0, 228, 144,   1,   0, 
      0,   2,   1,   0,  12, 128, 
      6,   0,   0, 160,  95,   0, 
      0,   3,   1,   0,  15, 128, 
      1,   0, 228, 128,   0,   8, 
    228, 160,   5,   0,   0,   3, 
      2,   0,  15, 128,   0,   0, 
     85, 128,   3,   0, 228, 160, 
      4,   0,   0,   4,   2,   0, 
     15, 128,   2,   0, 228, 160, 
      0,   0,   0, 128,   2,   0, 
    228, 128,   4,   0,   0,   4, 
      0,   0,  15, 128,   1,   0, 
    228, 128,   0,   0, 170, 128, 
      2,   0, 228, 128,   4,   0, 
      0,   4,   0,   0,  15, 128, 
      0,   0, 228, 128,   1,   0, 
    255, 128,   1,   0, 228, 129, 
      4,   0,   0,   4,   1,   0, 
     15, 128,   1,   0,  36, 144, 
      6,   0,  42, 160,   6,   0, 
    128, 160,   5,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   1,   0, 228, 128, 
      5,   0,   0,   3,   0,   0, 
     15, 128,   0,   0, 228, 128, 
      1,   0, 255, 144,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      0,   0, 228, 144,   0,   0, 
    255, 128,   0,   0, 228, 128, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 fsize;
//   float4 offset;
//   float4 scolor;
//   float4 scolor2;
//   sampler2D srctex;
//   float4 srctexscale;
//   sampler2D tex;
//   float4 texscale;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   fsize        c0       1
//   offset       c1       1
//   scolor       c2       1
//   scolor2      c3       1
//   srctexscale  c4       1
//   texscale     c5       1
//   srctex       s0       1
//   tex          s1       1
//

    ps_3_0
    def c6, 0, 0, 1, 0.5
    defi i0, 255, 0, 0, 0
    dcl_texcoord v0
    dcl_texcoord1 v1
    dcl_texcoord2 v2.xy
    dcl_2d s0
    dcl_2d s1
    mov r0.zw, c6.x
    mov r1.zw, c6.x
    mov r2.yz, c6.x
    mov r2.x, -c0.x
    rep i0
      break_lt c0.x, r2.x
      add r3.x, r2.x, c1.x
      mov r4.xy, r2.yzzw
      mov r4.z, -c0.y
      rep i0
        break_lt c0.y, r4.z
        add r3.y, r4.z, c1.y
        mad r1.xy, r3, -c5, v2
        texldl r5, r1, s1
        mad r0.xy, r3, c5, v2
        texldl r6, r0, s1
        add r4.y, r4.y, r6.w
        add r4.x, r4.x, r5.w
        add r4.z, r4.z, c6.z
      endrep
      mov r2.yz, r4.xxyw
      add r2.x, r2.x, c6.z
    endrep
    mul r0.yz, r2, c0.w
    mul r0.x, r0.z, c0.z
    add r0.xy, -r0, c6.z
    mad_sat r0.xy, r0.yxzw, -c6.w, r0
    add r0.z, -r0.x, c6.z
    add r0.z, -r0.y, r0.z
    mul r1.xy, c4, v2
    mov r1.zw, c6.x
    texldl r1, r1, s0
    mul r2, r0.y, c3
    mad r2, c2, r0.x, r2
    mad r0, r1, r0.z, r2
    mad r0, r0, r1.w, -r1
    mad r1, v1.xyzx, c6.zzzx, c6.xxxz
    mul r0, r0, r1
    mul r0, r0, v1.w
    mad r0, v0, r0.w, r0
    add r1, r0, -c6.z
    mad oC0, r0.w, r1, c6.z

// approximately 55 instruction slots used (6 texture, 49 arithmetic)
#endif

extern const BYTE pBinary_FBox2InnerShadowHighlightKnockoutMul[] =
{
      0,   3, 255, 255, 254, 255, 
     90,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  52,   1, 
      0,   0,   0,   3, 255, 255, 
      8,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     45,   1,   0,   0, 188,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 196,   0, 
      0,   0,   0,   0,   0,   0, 
    212,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    196,   0,   0,   0,   0,   0, 
      0,   0, 219,   0,   0,   0, 
      2,   0,   2,   0,   1,   0, 
     10,   0, 196,   0,   0,   0, 
      0,   0,   0,   0, 226,   0, 
      0,   0,   2,   0,   3,   0, 
      1,   0,  14,   0, 196,   0, 
      0,   0,   0,   0,   0,   0, 
    234,   0,   0,   0,   3,   0, 
      0,   0,   1,   0,   2,   0, 
    244,   0,   0,   0,   0,   0, 
      0,   0,   4,   1,   0,   0, 
      2,   0,   4,   0,   1,   0, 
     18,   0, 196,   0,   0,   0, 
      0,   0,   0,   0,  16,   1, 
      0,   0,   3,   0,   1,   0, 
      1,   0,   6,   0,  20,   1, 
      0,   0,   0,   0,   0,   0, 
     36,   1,   0,   0,   2,   0, 
      5,   0,   1,   0,  22,   0, 
    196,   0,   0,   0,   0,   0, 
      0,   0, 102, 115, 105, 122, 
    101,   0, 171, 171,   1,   0, 
      3,   0,   1,   0,   4,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 111, 102, 102, 115, 
    101, 116,   0, 115,  99, 111, 
    108, 111, 114,   0, 115,  99, 
    111, 108, 111, 114,  50,   0, 
    115, 114,  99, 116, 101, 120, 
      0, 171, 171, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 115, 114,  99, 116, 
    101, 120, 115,  99,  97, 108, 
    101,   0, 116, 101, 120,   0, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 115,  99,  97, 108, 101, 
      0, 112, 115,  95,  51,  95, 
     48,   0,  77, 105,  99, 114, 
    111, 115, 111, 102, 116,  32, 
     40,  82,  41,  32,  72,  76, 
     83,  76,  32,  83, 104,  97, 
    100, 101, 114,  32,  67, 111, 
    109, 112, 105, 108, 101, 114, 
     32,  57,  46,  51,  48,  46, 
     56,  52,  48,  48,  46,  48, 
      0, 171,  81,   0,   0,   5, 
      6,   0,  15, 160,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0, 128,  63,   0,   0, 
      0,  63,  48,   0,   0,   5, 
      0,   0,  15, 240, 255,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  31,   0,   0,   2, 
      5,   0,   0, 128,   0,   0, 
     15, 144,  31,   0,   0,   2, 
      5,   0,   1, 128,   1,   0, 
     15, 144,  31,   0,   0,   2, 
      5,   0,   2, 128,   2,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   1,   8, 
     15, 160,   1,   0,   0,   2, 
      0,   0,  12, 128,   6,   0, 
      0, 160,   1,   0,   0,   2, 
      1,   0,  12, 128,   6,   0, 
      0, 160,   1,   0,   0,   2, 
      2,   0,   6, 128,   6,   0, 
      0, 160,   1,   0,   0,   2, 
      2,   0,   1, 128,   0,   0, 
      0, 161,  38,   0,   0,   1, 
      0,   0, 228, 240,  45,   0, 
      4,   2,   0,   0,   0, 160, 
      2,   0,   0, 128,   2,   0, 
      0,   3,   3,   0,   1, 128, 
      2,   0,   0, 128,   1,   0, 
      0, 160,   1,   0,   0,   2, 
      4,   0,   3, 128,   2,   0, 
    233, 128,   1,   0,   0,   2, 
      4,   0,   4, 128,   0,   0, 
     85, 161,  38,   0,   0,   1, 
      0,   0, 228, 240,  45,   0, 
      4,   2,   0,   0,  85, 160, 
      4,   0, 170, 128,   2,   0, 
      0,   3,   3,   0,   2, 128, 
      4,   0, 170, 128,   1,   0, 
     85, 160,   4,   0,   0,   4, 
      1,   0,   3, 128,   3,   0, 
    228, 128,   5,   0, 228, 161, 
      2,   0, 228, 144,  95,   0, 
      0,   3,   5,   0,  15, 128, 
      1,   0, 228, 128,   1,   8, 
    228, 160,   4,   0,   0,   4, 
      0,   0,   3, 128,   3,   0, 
    228, 128,   5,   0, 228, 160, 
      2,   0, 228, 144,  95,   0, 
      0,   3,   6,   0,  15, 128, 
      0,   0, 228, 128,   1,   8, 
    228, 160,   2,   0,   0,   3, 
      4,   0,   2, 128,   4,   0, 
     85, 128,   6,   0, 255, 128, 
      2,   0,   0,   3,   4,   0, 
      1, 128,   4,   0,   0, 128, 
      5,   0, 255, 128,   2,   0, 
      0,   3,   4,   0,   4, 128, 
      4,   0, 170, 128,   6,   0, 
    170, 160,  39,   0,   0,   0, 
      1,   0,   0,   2,   2,   0, 
      6, 128,   4,   0, 208, 128, 
      2,   0,   0,   3,   2,   0, 
      1, 128,   2,   0,   0, 128, 
      6,   0, 170, 160,  39,   0, 
      0,   0,   5,   0,   0,   3, 
      0,   0,   6, 128,   2,   0, 
    228, 128,   0,   0, 255, 160, 
      5,   0,   0,   3,   0,   0, 
      1, 128,   0,   0, 170, 128, 
      0,   0, 170, 160,   2,   0, 
      0,   3,   0,   0,   3, 128, 
      0,   0, 228, 129,   6,   0, 
    170, 160,   4,   0,   0,   4, 
      0,   0,  19, 128,   0,   0, 
    225, 128,   6,   0, 255, 161, 
      0,   0, 228, 128,   2,   0, 
      0,   3,   0,   0,   4, 128, 
      0,   0,   0, 129,   6,   0, 
    170, 160,   2,   0,   0,   3, 
      0,   0,   4, 128,   0,   0, 
     85, 129,   0,   0, 170, 128, 
      5,   0,   0,   3,   1,   0, 
      3, 128,   4,   0, 228, 160, 
      2,   0, 228, 144,   1,   0, 
      0,   2,   1,   0,  12, 128, 
      6,   0,   0, 160,  95,   0, 
      0,   3,   1,   0,  15, 128, 
      1,   0, 228, 128,   0,   8, 
    228, 160,   5,   0,   0,   3, 
      2,   0,  15, 128,   0,   0, 
     85, 128,   3,   0, 228, 160, 
      4,   0,   0,   4,   2,   0, 
     15, 128,   2,   0, 228, 160, 
      0,   0,   0, 128,   2,   0, 
    228, 128,   4,   0,   0,   4, 
      0,   0,  15, 128,   1,   0, 
    228, 128,   0,   0, 170, 128, 
      2,   0, 228, 128,   4,   0, 
      0,   4,   0,   0,  15, 128, 
      0,   0, 228, 128,   1,   0, 
    255, 128,   1,   0, 228, 129, 
      4,   0,   0,   4,   1,   0, 
     15, 128,   1,   0,  36, 144, 
      6,   0,  42, 160,   6,   0, 
    128, 160,   5,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   1,   0, 228, 128, 
      5,   0,   0,   3,   0,   0, 
     15, 128,   0,   0, 228, 128, 
      1,   0, 255, 144,   4,   0, 
      0,   4,   0,   0,  15, 128, 
      0,   0, 228, 144,   0,   0, 
    255, 128,   0,   0, 228, 128, 
      2,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 228, 128, 
      6,   0, 170, 161,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      0,   0, 255, 128,   1,   0, 
    228, 128,   6,   0, 170, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 fsize;
//   float4 offset;
//   float4 scolor;
//   sampler2D tex;
//   float4 texscale;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   fsize        c0       1
//   offset       c1       1
//   scolor       c2       1
//   texscale     c3       1
//   tex          s0       1
//

    ps_3_0
    def c4, 0, 0, 1, 0
    defi i0, 255, 0, 0, 0
    dcl_texcoord v0
    dcl_texcoord1 v1
    dcl_texcoord2 v2.xy
    dcl_2d s0
    mov r0.zw, c4.x
    mov r1.x, c4.x
    mov r1.y, -c0.x
    rep i0
      break_lt c0.x, r1.y
      add r2.x, r1.y, c1.x
      mov r3.x, r1.x
      mov r3.y, -c0.y
      rep i0
        break_lt c0.y, r3.y
        add r2.y, r3.y, c1.y
        mad r0.xy, r2, c3, v2
        texldl r4, r0, s0
        add r3.x, r3.x, r4.w
        add r3.y, r3.y, c4.z
      endrep
      mov r1.x, r3.x
      add r1.y, r1.y, c4.z
    endrep
    mul r0.x, r1.x, c0.w
    mul r0.x, r0.x, c0.z
    mul r0, r0.x, c2
    mad r1, v1.xyzx, c4.zzzx, c4.xxxz
    mul r0, r0, r1
    mul r0, r0, v1.w
    mad oC0, v0, r0.w, r0

// approximately 37 instruction slots used (2 texture, 35 arithmetic)
#endif

extern const BYTE pBinary_FBox2ShadowonlyHighlight[] =
{
      0,   3, 255, 255, 254, 255, 
     64,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 204,   0, 
      0,   0,   0,   3, 255, 255, 
      5,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    197,   0,   0,   0, 128,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 136,   0, 
      0,   0,   0,   0,   0,   0, 
    152,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    136,   0,   0,   0,   0,   0, 
      0,   0, 159,   0,   0,   0, 
      2,   0,   2,   0,   1,   0, 
     10,   0, 136,   0,   0,   0, 
      0,   0,   0,   0, 166,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0, 172,   0, 
      0,   0,   0,   0,   0,   0, 
    188,   0,   0,   0,   2,   0, 
      3,   0,   1,   0,  14,   0, 
    136,   0,   0,   0,   0,   0, 
      0,   0, 102, 115, 105, 122, 
    101,   0, 171, 171,   1,   0, 
      3,   0,   1,   0,   4,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 111, 102, 102, 115, 
    101, 116,   0, 115,  99, 111, 
    108, 111, 114,   0, 116, 101, 
    120,   0, 171, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 116, 101, 120, 115, 
     99,  97, 108, 101,   0, 112, 
    115,  95,  51,  95,  48,   0, 
     77, 105,  99, 114, 111, 115, 
    111, 102, 116,  32,  40,  82, 
     41,  32,  72,  76,  83,  76, 
     32,  83, 104,  97, 100, 101, 
    114,  32,  67, 111, 109, 112, 
    105, 108, 101, 114,  32,  57, 
     46,  51,  48,  46,  56,  52, 
     48,  48,  46,  48,   0, 171, 
     81,   0,   0,   5,   4,   0, 
     15, 160,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
    128,  63,   0,   0,   0,   0, 
     48,   0,   0,   5,   0,   0, 
     15, 240, 255,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      2, 128,   2,   0,   3, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   0,   8,  15, 160, 
      1,   0,   0,   2,   0,   0, 
     12, 128,   4,   0,   0, 160, 
      1,   0,   0,   2,   1,   0, 
      1, 128,   4,   0,   0, 160, 
      1,   0,   0,   2,   1,   0, 
      2, 128,   0,   0,   0, 161, 
     38,   0,   0,   1,   0,   0, 
    228, 240,  45,   0,   4,   2, 
      0,   0,   0, 160,   1,   0, 
     85, 128,   2,   0,   0,   3, 
      2,   0,   1, 128,   1,   0, 
     85, 128,   1,   0,   0, 160, 
      1,   0,   0,   2,   3,   0, 
      1, 128,   1,   0,   0, 128, 
      1,   0,   0,   2,   3,   0, 
      2, 128,   0,   0,  85, 161, 
     38,   0,   0,   1,   0,   0, 
    228, 240,  45,   0,   4,   2, 
      0,   0,  85, 160,   3,   0, 
     85, 128,   2,   0,   0,   3, 
      2,   0,   2, 128,   3,   0, 
     85, 128,   1,   0,  85, 160, 
      4,   0,   0,   4,   0,   0, 
      3, 128,   2,   0, 228, 128, 
      3,   0, 228, 160,   2,   0, 
    228, 144,  95,   0,   0,   3, 
      4,   0,  15, 128,   0,   0, 
    228, 128,   0,   8, 228, 160, 
      2,   0,   0,   3,   3,   0, 
      1, 128,   3,   0,   0, 128, 
      4,   0, 255, 128,   2,   0, 
      0,   3,   3,   0,   2, 128, 
      3,   0,  85, 128,   4,   0, 
    170, 160,  39,   0,   0,   0, 
      1,   0,   0,   2,   1,   0, 
      1, 128,   3,   0,   0, 128, 
      2,   0,   0,   3,   1,   0, 
      2, 128,   1,   0,  85, 128, 
      4,   0, 170, 160,  39,   0, 
      0,   0,   5,   0,   0,   3, 
      0,   0,   1, 128,   1,   0, 
      0, 128,   0,   0, 255, 160, 
      5,   0,   0,   3,   0,   0, 
      1, 128,   0,   0,   0, 128, 
      0,   0, 170, 160,   5,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0,   0, 128,   2,   0, 
    228, 160,   4,   0,   0,   4, 
      1,   0,  15, 128,   1,   0, 
     36, 144,   4,   0,  42, 160, 
      4,   0, 128, 160,   5,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0, 228, 128,   1,   0, 
    228, 128,   5,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   1,   0, 255, 144, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 228, 144, 
      0,   0, 255, 128,   0,   0, 
    228, 128, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 fsize;
//   float4 offset;
//   float4 scolor;
//   sampler2D tex;
//   float4 texscale;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   fsize        c0       1
//   offset       c1       1
//   scolor       c2       1
//   texscale     c3       1
//   tex          s0       1
//

    ps_3_0
    def c4, 0, 0, 1, -1
    defi i0, 255, 0, 0, 0
    dcl_texcoord v0
    dcl_texcoord1 v1
    dcl_texcoord2 v2.xy
    dcl_2d s0
    mov r0.zw, c4.x
    mov r1.x, c4.x
    mov r1.y, -c0.x
    rep i0
      break_lt c0.x, r1.y
      add r2.x, r1.y, c1.x
      mov r3.x, r1.x
      mov r3.y, -c0.y
      rep i0
        break_lt c0.y, r3.y
        add r2.y, r3.y, c1.y
        mad r0.xy, r2, c3, v2
        texldl r4, r0, s0
        add r3.x, r3.x, r4.w
        add r3.y, r3.y, c4.z
      endrep
      mov r1.x, r3.x
      add r1.y, r1.y, c4.z
    endrep
    mul r0.x, r1.x, c0.w
    mul r0.x, r0.x, c0.z
    mul r0, r0.x, c2
    mad r1, v1.xyzx, c4.zzzx, c4.xxxz
    mul r0, r0, r1
    mul r0, r0, v1.w
    mad r0, v0, r0.w, r0
    add r1, r0, c4.w
    mad oC0, r0.w, r1, c4.z

// approximately 39 instruction slots used (2 texture, 37 arithmetic)
#endif

extern const BYTE pBinary_FBox2ShadowonlyHighlightMul[] =
{
      0,   3, 255, 255, 254, 255, 
     64,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 204,   0, 
      0,   0,   0,   3, 255, 255, 
      5,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    197,   0,   0,   0, 128,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 136,   0, 
      0,   0,   0,   0,   0,   0, 
    152,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    136,   0,   0,   0,   0,   0, 
      0,   0, 159,   0,   0,   0, 
      2,   0,   2,   0,   1,   0, 
     10,   0, 136,   0,   0,   0, 
      0,   0,   0,   0, 166,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0, 172,   0, 
      0,   0,   0,   0,   0,   0, 
    188,   0,   0,   0,   2,   0, 
      3,   0,   1,   0,  14,   0, 
    136,   0,   0,   0,   0,   0, 
      0,   0, 102, 115, 105, 122, 
    101,   0, 171, 171,   1,   0, 
      3,   0,   1,   0,   4,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 111, 102, 102, 115, 
    101, 116,   0, 115,  99, 111, 
    108, 111, 114,   0, 116, 101, 
    120,   0, 171, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 116, 101, 120, 115, 
     99,  97, 108, 101,   0, 112, 
    115,  95,  51,  95,  48,   0, 
     77, 105,  99, 114, 111, 115, 
    111, 102, 116,  32,  40,  82, 
     41,  32,  72,  76,  83,  76, 
     32,  83, 104,  97, 100, 101, 
    114,  32,  67, 111, 109, 112, 
    105, 108, 101, 114,  32,  57, 
     46,  51,  48,  46,  56,  52, 
     48,  48,  46,  48,   0, 171, 
     81,   0,   0,   5,   4,   0, 
     15, 160,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
    128,  63,   0,   0, 128, 191, 
     48,   0,   0,   5,   0,   0, 
     15, 240, 255,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      2, 128,   2,   0,   3, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   0,   8,  15, 160, 
      1,   0,   0,   2,   0,   0, 
     12, 128,   4,   0,   0, 160, 
      1,   0,   0,   2,   1,   0, 
      1, 128,   4,   0,   0, 160, 
      1,   0,   0,   2,   1,   0, 
      2, 128,   0,   0,   0, 161, 
     38,   0,   0,   1,   0,   0, 
    228, 240,  45,   0,   4,   2, 
      0,   0,   0, 160,   1,   0, 
     85, 128,   2,   0,   0,   3, 
      2,   0,   1, 128,   1,   0, 
     85, 128,   1,   0,   0, 160, 
      1,   0,   0,   2,   3,   0, 
      1, 128,   1,   0,   0, 128, 
      1,   0,   0,   2,   3,   0, 
      2, 128,   0,   0,  85, 161, 
     38,   0,   0,   1,   0,   0, 
    228, 240,  45,   0,   4,   2, 
      0,   0,  85, 160,   3,   0, 
     85, 128,   2,   0,   0,   3, 
      2,   0,   2, 128,   3,   0, 
     85, 128,   1,   0,  85, 160, 
      4,   0,   0,   4,   0,   0, 
      3, 128,   2,   0, 228, 128, 
      3,   0, 228, 160,   2,   0, 
    228, 144,  95,   0,   0,   3, 
      4,   0,  15, 128,   0,   0, 
    228, 128,   0,   8, 228, 160, 
      2,   0,   0,   3,   3,   0, 
      1, 128,   3,   0,   0, 128, 
      4,   0, 255, 128,   2,   0, 
      0,   3,   3,   0,   2, 128, 
      3,   0,  85, 128,   4,   0, 
    170, 160,  39,   0,   0,   0, 
      1,   0,   0,   2,   1,   0, 
      1, 128,   3,   0,   0, 128, 
      2,   0,   0,   3,   1,   0, 
      2, 128,   1,   0,  85, 128, 
      4,   0, 170, 160,  39,   0, 
      0,   0,   5,   0,   0,   3, 
      0,   0,   1, 128,   1,   0, 
      0, 128,   0,   0, 255, 160, 
      5,   0,   0,   3,   0,   0, 
      1, 128,   0,   0,   0, 128, 
      0,   0, 170, 160,   5,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0,   0, 128,   2,   0, 
    228, 160,   4,   0,   0,   4, 
      1,   0,  15, 128,   1,   0, 
     36, 144,   4,   0,  42, 160, 
      4,   0, 128, 160,   5,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0, 228, 128,   1,   0, 
    228, 128,   5,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   1,   0, 255, 144, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   0,   0, 228, 144, 
      0,   0, 255, 128,   0,   0, 
    228, 128,   2,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    228, 128,   4,   0, 255, 160, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 255, 128, 
      1,   0, 228, 128,   4,   0, 
    170, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 mvp[2];
//   float4 texgen[4];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       2
//   texgen       c2       4
//

    vs_3_0
    def c6, 0, 1, 0, 0
    dcl_position v0
    dcl_texcoord o0.xy
    dcl_texcoord1 o1.xy
    dcl_position o2
    dp4 o2.x, v0, c0
    dp4 o2.y, v0, c1
    dp4 o0.x, v0, c2
    dp4 o0.y, v0, c3
    dp4 o1.x, v0, c4
    dp4 o1.y, v0, c5
    mov o2.zw, c6.xyxy

// approximately 7 instruction slots used
#endif

extern const BYTE pBinary_VDrawableCopyPixels[] =
{
      0,   3, 254, 255, 254, 255, 
     43,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 119,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    112,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
      2,   0,   2,   0,  72,   0, 
      0,   0,   0,   0,   0,   0, 
     88,   0,   0,   0,   2,   0, 
      2,   0,   4,   0,  10,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 109, 118, 112,   0, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 103, 101, 110,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   4,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5,   6,   0, 
     15, 160,   0,   0,   0,   0, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,   3, 224, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   1,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 224, 
      9,   0,   0,   3,   2,   0, 
      1, 224,   0,   0, 228, 144, 
      0,   0, 228, 160,   9,   0, 
      0,   3,   2,   0,   2, 224, 
      0,   0, 228, 144,   1,   0, 
    228, 160,   9,   0,   0,   3, 
      0,   0,   1, 224,   0,   0, 
    228, 144,   2,   0, 228, 160, 
      9,   0,   0,   3,   0,   0, 
      2, 224,   0,   0, 228, 144, 
      3,   0, 228, 160,   9,   0, 
      0,   3,   1,   0,   1, 224, 
      0,   0, 228, 144,   4,   0, 
    228, 160,   9,   0,   0,   3, 
      1,   0,   2, 224,   0,   0, 
    228, 144,   5,   0, 228, 160, 
      1,   0,   0,   2,   2,   0, 
     12, 224,   6,   0,  68, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       2
//

    ps_3_0
    dcl_texcoord1 v0.xy
    dcl_2d s1
    texld oC0, v0, s1

// approximately 1 instruction slot used (1 texture, 0 arithmetic)
#endif

extern const BYTE pBinary_FDrawableCopyPixels[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      2,   0,   6,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      2,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      0,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  66,   0, 
      0,   3,   0,   8,  15, 128, 
      0,   0, 228, 144,   1,   8, 
    228, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       2
//

    ps_3_0
    dcl_texcoord1 v0.xy
    dcl_2d s1
    texld oC0, v0, s1

// approximately 1 instruction slot used (1 texture, 0 arithmetic)
#endif

extern const BYTE pBinary_FDrawableCopyPixelsCopyLerp[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      2,   0,   6,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      2,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      0,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  66,   0, 
      0,   3,   0,   8,  15, 128, 
      0,   0, 228, 144,   1,   8, 
    228, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       2
//

    ps_3_0
    def c0, 1, 0, 0, 0
    dcl_texcoord1 v0.xy
    dcl_2d s1
    texld r0, v0, s1
    mov oC0.xyz, r0
    mov oC0.w, c0.x

// approximately 3 instruction slots used (1 texture, 2 arithmetic)
#endif

extern const BYTE pBinary_FDrawableCopyPixelsNoDestAlpha[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      2,   0,   6,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      2,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  81,   0, 
      0,   5,   0,   0,  15, 160, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      0,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0, 228, 144,   1,   8, 
    228, 160,   1,   0,   0,   2, 
      0,   8,   7, 128,   0,   0, 
    228, 128,   1,   0,   0,   2, 
      0,   8,   8, 128,   0,   0, 
      0, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       2
//

    ps_3_0
    def c0, 1, 0, 0, 0
    dcl_texcoord v0.xy
    dcl_texcoord1 v1.xy
    dcl_2d s0
    dcl_2d s1
    texld r0, v0, s0
    texld r1, v1, s1
    add r1.xyz, -r0, r1
    mad oC0.xyz, r1.w, r1, r0
    mov oC0.w, c0.x

// approximately 5 instruction slots used (2 texture, 3 arithmetic)
#endif

extern const BYTE pBinary_FDrawableCopyPixelsNoDestAlphaCopyLerp[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      2,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      2,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  81,   0, 
      0,   5,   0,   0,  15, 160, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,   3, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      1,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0, 228, 144,   0,   8, 
    228, 160,  66,   0,   0,   3, 
      1,   0,  15, 128,   1,   0, 
    228, 144,   1,   8, 228, 160, 
      2,   0,   0,   3,   1,   0, 
      7, 128,   0,   0, 228, 129, 
      1,   0, 228, 128,   4,   0, 
      0,   4,   0,   8,   7, 128, 
      1,   0, 255, 128,   1,   0, 
    228, 128,   0,   0, 228, 128, 
      1,   0,   0,   2,   0,   8, 
      8, 128,   0,   0,   0, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       2
//

    ps_3_0
    def c0, 1, 0, 0, 0
    dcl_texcoord v0.xy
    dcl_texcoord1 v1.xy
    dcl_2d s0
    dcl_2d s1
    texld r0, v0, s0
    texld r1, v1, s1
    add r0.x, -r1.w, c0.x
    mad oC0.w, r0.w, r0.x, r1.w
    mov oC0.xyz, r1

// approximately 5 instruction slots used (2 texture, 3 arithmetic)
#endif

extern const BYTE pBinary_FDrawableCopyPixelsMergeAlpha[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      2,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      2,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  81,   0, 
      0,   5,   0,   0,  15, 160, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,   3, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      1,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0, 228, 144,   0,   8, 
    228, 160,  66,   0,   0,   3, 
      1,   0,  15, 128,   1,   0, 
    228, 144,   1,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
      1, 128,   1,   0, 255, 129, 
      0,   0,   0, 160,   4,   0, 
      0,   4,   0,   8,   8, 128, 
      0,   0, 255, 128,   0,   0, 
      0, 128,   1,   0, 255, 128, 
      1,   0,   0,   2,   0,   8, 
      7, 128,   1,   0, 228, 128, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       2
//

    ps_3_0
    def c0, 1, 0, 0, 0
    dcl_texcoord v0.xy
    dcl_texcoord1 v1.xy
    dcl_2d s0
    dcl_2d s1
    texld r0, v0, s0
    texld r1, v1, s1
    lrp r2.x, r0.w, c0.x, r1.w
    rcp r0.w, r2.x
    mov oC0.w, r2.x
    mul r0.w, r0.w, r1.w
    add r1.xyz, -r0, r1
    mad oC0.xyz, r0.w, r1, r0

// approximately 8 instruction slots used (2 texture, 6 arithmetic)
#endif

extern const BYTE pBinary_FDrawableCopyPixelsMergeAlphaCopyLerp[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      2,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      2,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  81,   0, 
      0,   5,   0,   0,  15, 160, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,   3, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      1,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0, 228, 144,   0,   8, 
    228, 160,  66,   0,   0,   3, 
      1,   0,  15, 128,   1,   0, 
    228, 144,   1,   8, 228, 160, 
     18,   0,   0,   4,   2,   0, 
      1, 128,   0,   0, 255, 128, 
      0,   0,   0, 160,   1,   0, 
    255, 128,   6,   0,   0,   2, 
      0,   0,   8, 128,   2,   0, 
      0, 128,   1,   0,   0,   2, 
      0,   8,   8, 128,   2,   0, 
      0, 128,   5,   0,   0,   3, 
      0,   0,   8, 128,   0,   0, 
    255, 128,   1,   0, 255, 128, 
      2,   0,   0,   3,   1,   0, 
      7, 128,   0,   0, 228, 129, 
      1,   0, 228, 128,   4,   0, 
      0,   4,   0,   8,   7, 128, 
      0,   0, 255, 128,   1,   0, 
    228, 128,   0,   0, 228, 128, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       2
//

    ps_3_0
    def c0, 1, 0, 0, 0
    dcl_texcoord1 v0.xy
    dcl_2d s1
    texld r0, v0, s1
    mov oC0.xyz, r0
    mov oC0.w, c0.x

// approximately 3 instruction slots used (1 texture, 2 arithmetic)
#endif

extern const BYTE pBinary_FDrawableCopyPixelsMergeAlphaNoDestAlpha[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      2,   0,   6,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      2,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  81,   0, 
      0,   5,   0,   0,  15, 160, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      0,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0, 228, 144,   1,   8, 
    228, 160,   1,   0,   0,   2, 
      0,   8,   7, 128,   0,   0, 
    228, 128,   1,   0,   0,   2, 
      0,   8,   8, 128,   0,   0, 
      0, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       2
//

    ps_3_0
    def c0, 1, 0, 0, 0
    dcl_texcoord v0.xy
    dcl_texcoord1 v1.xy
    dcl_2d s0
    dcl_2d s1
    texld r0, v0, s0
    texld r1, v1, s1
    add r1.xyz, -r0, r1
    mad oC0.xyz, r1.w, r1, r0
    mov oC0.w, c0.x

// approximately 5 instruction slots used (2 texture, 3 arithmetic)
#endif

extern const BYTE pBinary_FDrawableCopyPixelsMergeAlphaNoDestAlphaCopyLerp[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      2,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      2,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  81,   0, 
      0,   5,   0,   0,  15, 160, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,   3, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      1,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0, 228, 144,   0,   8, 
    228, 160,  66,   0,   0,   3, 
      1,   0,  15, 128,   1,   0, 
    228, 144,   1,   8, 228, 160, 
      2,   0,   0,   3,   1,   0, 
      7, 128,   0,   0, 228, 129, 
      1,   0, 228, 128,   4,   0, 
      0,   4,   0,   8,   7, 128, 
      1,   0, 255, 128,   1,   0, 
    228, 128,   0,   0, 228, 128, 
      1,   0,   0,   2,   0,   8, 
      8, 128,   0,   0,   0, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4 mvp[2];
//   float4 texgen[6];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       2
//   texgen       c2       6
//

    vs_3_0
    def c8, 0, 1, 0, 0
    dcl_position v0
    dcl_texcoord o0.xy
    dcl_texcoord1 o1.xy
    dcl_texcoord2 o2.xy
    dcl_position o3
    dp4 o3.x, v0, c0
    dp4 o3.y, v0, c1
    dp4 o0.x, v0, c2
    dp4 o0.y, v0, c3
    dp4 o1.x, v0, c4
    dp4 o1.y, v0, c5
    dp4 o2.x, v0, c6
    dp4 o2.y, v0, c7
    mov o3.zw, c8.xyxy

// approximately 9 instruction slots used
#endif

extern const BYTE pBinary_VDrawableCopyPixelsAlpha[] =
{
      0,   3, 254, 255, 254, 255, 
     43,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 119,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    112,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
      2,   0,   2,   0,  72,   0, 
      0,   0,   0,   0,   0,   0, 
     88,   0,   0,   0,   2,   0, 
      2,   0,   6,   0,  10,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 109, 118, 112,   0, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 103, 101, 110,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   6,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5,   8,   0, 
     15, 160,   0,   0,   0,   0, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,   3, 224, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   1,   0,   3, 224, 
     31,   0,   0,   2,   5,   0, 
      2, 128,   2,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   3,   0,  15, 224, 
      9,   0,   0,   3,   3,   0, 
      1, 224,   0,   0, 228, 144, 
      0,   0, 228, 160,   9,   0, 
      0,   3,   3,   0,   2, 224, 
      0,   0, 228, 144,   1,   0, 
    228, 160,   9,   0,   0,   3, 
      0,   0,   1, 224,   0,   0, 
    228, 144,   2,   0, 228, 160, 
      9,   0,   0,   3,   0,   0, 
      2, 224,   0,   0, 228, 144, 
      3,   0, 228, 160,   9,   0, 
      0,   3,   1,   0,   1, 224, 
      0,   0, 228, 144,   4,   0, 
    228, 160,   9,   0,   0,   3, 
      1,   0,   2, 224,   0,   0, 
    228, 144,   5,   0, 228, 160, 
      9,   0,   0,   3,   2,   0, 
      1, 224,   0,   0, 228, 144, 
      6,   0, 228, 160,   9,   0, 
      0,   3,   2,   0,   2, 224, 
      0,   0, 228, 144,   7,   0, 
    228, 160,   1,   0,   0,   2, 
      3,   0,  12, 224,   8,   0, 
     68, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex[3];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       3
//

    ps_3_0
    dcl_texcoord1 v0.xy
    dcl_texcoord2 v1.xy
    dcl_2d s1
    dcl_2d s2
    texld r0, v1, s2
    texld r1, v0, s1
    mul oC0.w, r0.w, r1.w
    mov oC0.xyz, r1

// approximately 4 instruction slots used (2 texture, 2 arithmetic)
#endif

extern const BYTE pBinary_FDrawableCopyPixelsAlpha[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      3,   0,   6,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      3,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      0,   0,   3, 144,  31,   0, 
      0,   2,   5,   0,   2, 128, 
      1,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      2,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      1,   0, 228, 144,   2,   8, 
    228, 160,  66,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    228, 144,   1,   8, 228, 160, 
      5,   0,   0,   3,   0,   8, 
      8, 128,   0,   0, 255, 128, 
      1,   0, 255, 128,   1,   0, 
      0,   2,   0,   8,   7, 128, 
      1,   0, 228, 128, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex[3];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       3
//

    ps_3_0
    dcl_texcoord1 v0.xy
    dcl_texcoord2 v1.xy
    dcl_2d s1
    dcl_2d s2
    texld r0, v1, s2
    texld r1, v0, s1
    mul oC0.w, r0.w, r1.w
    mov oC0.xyz, r1

// approximately 4 instruction slots used (2 texture, 2 arithmetic)
#endif

extern const BYTE pBinary_FDrawableCopyPixelsAlphaCopyLerp[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      3,   0,   6,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      3,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      0,   0,   3, 144,  31,   0, 
      0,   2,   5,   0,   2, 128, 
      1,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      2,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      1,   0, 228, 144,   2,   8, 
    228, 160,  66,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    228, 144,   1,   8, 228, 160, 
      5,   0,   0,   3,   0,   8, 
      8, 128,   0,   0, 255, 128, 
      1,   0, 255, 128,   1,   0, 
      0,   2,   0,   8,   7, 128, 
      1,   0, 228, 128, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex[3];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       2
//

    ps_3_0
    def c0, 1, 0, 0, 0
    dcl_texcoord1 v0.xy
    dcl_2d s1
    texld r0, v0, s1
    mov oC0.xyz, r0
    mov oC0.w, c0.x

// approximately 3 instruction slots used (1 texture, 2 arithmetic)
#endif

extern const BYTE pBinary_FDrawableCopyPixelsAlphaNoDestAlpha[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      2,   0,   6,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      3,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  81,   0, 
      0,   5,   0,   0,  15, 160, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      0,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0, 228, 144,   1,   8, 
    228, 160,   1,   0,   0,   2, 
      0,   8,   7, 128,   0,   0, 
    228, 128,   1,   0,   0,   2, 
      0,   8,   8, 128,   0,   0, 
      0, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex[3];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       3
//

    ps_3_0
    def c0, 1, 0, 0, 0
    dcl_texcoord v0.xy
    dcl_texcoord1 v1.xy
    dcl_texcoord2 v2.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    texld r0, v2, s2
    texld r1, v1, s1
    mul r0.x, r0.w, r1.w
    texld r2, v0, s0
    add r0.yzw, r1.xxyz, -r2.xxyz
    mad oC0.xyz, r0.x, r0.yzww, r2
    mov oC0.w, c0.x

// approximately 7 instruction slots used (3 texture, 4 arithmetic)
#endif

extern const BYTE pBinary_FDrawableCopyPixelsAlphaNoDestAlphaCopyLerp[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      3,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      3,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  81,   0, 
      0,   5,   0,   0,  15, 160, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,   3, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      1,   0,   3, 144,  31,   0, 
      0,   2,   5,   0,   2, 128, 
      2,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      2,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      2,   0, 228, 144,   2,   8, 
    228, 160,  66,   0,   0,   3, 
      1,   0,  15, 128,   1,   0, 
    228, 144,   1,   8, 228, 160, 
      5,   0,   0,   3,   0,   0, 
      1, 128,   0,   0, 255, 128, 
      1,   0, 255, 128,  66,   0, 
      0,   3,   2,   0,  15, 128, 
      0,   0, 228, 144,   0,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,  14, 128,   1,   0, 
    144, 128,   2,   0, 144, 129, 
      4,   0,   0,   4,   0,   8, 
      7, 128,   0,   0,   0, 128, 
      0,   0, 249, 128,   2,   0, 
    228, 128,   1,   0,   0,   2, 
      0,   8,   8, 128,   0,   0, 
      0, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex[3];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       3
//

    ps_3_0
    def c0, 1, 0, 0, 0
    dcl_texcoord v0.xy
    dcl_texcoord1 v1.xy
    dcl_texcoord2 v2.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    texld r0, v0, s0
    texld r1, v2, s2
    texld r2, v1, s1
    mul r0.x, r1.w, r2.w
    mad r0.y, r2.w, -r1.w, c0.x
    mov oC0.xyz, r2
    mad oC0.w, r0.w, r0.y, r0.x

// approximately 7 instruction slots used (3 texture, 4 arithmetic)
#endif

extern const BYTE pBinary_FDrawableCopyPixelsAlphaMergeAlpha[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      3,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      3,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  81,   0, 
      0,   5,   0,   0,  15, 160, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,   3, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      1,   0,   3, 144,  31,   0, 
      0,   2,   5,   0,   2, 128, 
      2,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      2,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0, 228, 144,   0,   8, 
    228, 160,  66,   0,   0,   3, 
      1,   0,  15, 128,   2,   0, 
    228, 144,   2,   8, 228, 160, 
     66,   0,   0,   3,   2,   0, 
     15, 128,   1,   0, 228, 144, 
      1,   8, 228, 160,   5,   0, 
      0,   3,   0,   0,   1, 128, 
      1,   0, 255, 128,   2,   0, 
    255, 128,   4,   0,   0,   4, 
      0,   0,   2, 128,   2,   0, 
    255, 128,   1,   0, 255, 129, 
      0,   0,   0, 160,   1,   0, 
      0,   2,   0,   8,   7, 128, 
      2,   0, 228, 128,   4,   0, 
      0,   4,   0,   8,   8, 128, 
      0,   0, 255, 128,   0,   0, 
     85, 128,   0,   0,   0, 128, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex[3];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       3
//

    ps_3_0
    def c0, 1, 0, 0, 0
    dcl_texcoord v0.xy
    dcl_texcoord1 v1.xy
    dcl_texcoord2 v2.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    texld r0, v2, s2
    texld r1, v1, s1
    mad r0.x, r1.w, -r0.w, c0.x
    mul r0.y, r0.w, r1.w
    texld r2, v0, s0
    mad r0.x, r2.w, r0.x, r0.y
    rcp r0.z, r0.x
    mov oC0.w, r0.x
    mul r0.x, r0.z, r0.y
    add r0.yzw, r1.xxyz, -r2.xxyz
    mad oC0.xyz, r0.x, r0.yzww, r2

// approximately 11 instruction slots used (3 texture, 8 arithmetic)
#endif

extern const BYTE pBinary_FDrawableCopyPixelsAlphaMergeAlphaCopyLerp[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      3,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      3,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  81,   0, 
      0,   5,   0,   0,  15, 160, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,   3, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      1,   0,   3, 144,  31,   0, 
      0,   2,   5,   0,   2, 128, 
      2,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      2,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      2,   0, 228, 144,   2,   8, 
    228, 160,  66,   0,   0,   3, 
      1,   0,  15, 128,   1,   0, 
    228, 144,   1,   8, 228, 160, 
      4,   0,   0,   4,   0,   0, 
      1, 128,   1,   0, 255, 128, 
      0,   0, 255, 129,   0,   0, 
      0, 160,   5,   0,   0,   3, 
      0,   0,   2, 128,   0,   0, 
    255, 128,   1,   0, 255, 128, 
     66,   0,   0,   3,   2,   0, 
     15, 128,   0,   0, 228, 144, 
      0,   8, 228, 160,   4,   0, 
      0,   4,   0,   0,   1, 128, 
      2,   0, 255, 128,   0,   0, 
      0, 128,   0,   0,  85, 128, 
      6,   0,   0,   2,   0,   0, 
      4, 128,   0,   0,   0, 128, 
      1,   0,   0,   2,   0,   8, 
      8, 128,   0,   0,   0, 128, 
      5,   0,   0,   3,   0,   0, 
      1, 128,   0,   0, 170, 128, 
      0,   0,  85, 128,   2,   0, 
      0,   3,   0,   0,  14, 128, 
      1,   0, 144, 128,   2,   0, 
    144, 129,   4,   0,   0,   4, 
      0,   8,   7, 128,   0,   0, 
      0, 128,   0,   0, 249, 128, 
      2,   0, 228, 128, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex[3];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       2
//

    ps_3_0
    def c0, 1, 0, 0, 0
    dcl_texcoord1 v0.xy
    dcl_2d s1
    texld r0, v0, s1
    mov oC0.xyz, r0
    mov oC0.w, c0.x

// approximately 3 instruction slots used (1 texture, 2 arithmetic)
#endif

extern const BYTE pBinary_FDrawableCopyPixelsAlphaMergeAlphaNoDestAlpha[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      2,   0,   6,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      3,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  81,   0, 
      0,   5,   0,   0,  15, 160, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      0,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0, 228, 144,   1,   8, 
    228, 160,   1,   0,   0,   2, 
      0,   8,   7, 128,   0,   0, 
    228, 128,   1,   0,   0,   2, 
      0,   8,   8, 128,   0,   0, 
      0, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex[3];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       3
//

    ps_3_0
    def c0, 1, 0, 0, 0
    dcl_texcoord v0.xy
    dcl_texcoord1 v1.xy
    dcl_texcoord2 v2.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    texld r0, v2, s2
    texld r1, v1, s1
    mul r0.x, r0.w, r1.w
    texld r2, v0, s0
    add r0.yzw, r1.xxyz, -r2.xxyz
    mad oC0.xyz, r0.x, r0.yzww, r2
    mov oC0.w, c0.x

// approximately 7 instruction slots used (3 texture, 4 arithmetic)
#endif

extern const BYTE pBinary_FDrawableCopyPixelsAlphaMergeAlphaNoDestAlphaCopyLerp[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      3,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      3,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  81,   0, 
      0,   5,   0,   0,  15, 160, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,   3, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      1,   0,   3, 144,  31,   0, 
      0,   2,   5,   0,   2, 128, 
      2,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      2,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      2,   0, 228, 144,   2,   8, 
    228, 160,  66,   0,   0,   3, 
      1,   0,  15, 128,   1,   0, 
    228, 144,   1,   8, 228, 160, 
      5,   0,   0,   3,   0,   0, 
      1, 128,   0,   0, 255, 128, 
      1,   0, 255, 128,  66,   0, 
      0,   3,   2,   0,  15, 128, 
      0,   0, 228, 144,   0,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,  14, 128,   1,   0, 
    144, 128,   2,   0, 144, 129, 
      4,   0,   0,   4,   0,   8, 
      7, 128,   0,   0,   0, 128, 
      0,   0, 249, 128,   2,   0, 
    228, 128,   1,   0,   0,   2, 
      0,   8,   8, 128,   0,   0, 
      0, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   float4x4 cxmul;
//   float4x4 cxmul1;
//   sampler2D tex[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxmul        c0       4
//   cxmul1       c4       4
//   tex          s0       2
//

    ps_3_0
    dcl_texcoord v0.xy
    dcl_texcoord1 v1.xy
    dcl_2d s0
    dcl_2d s1
    texld r0, v0, s0
    dp4 r1.x, r0, c0
    dp4 r1.y, r0, c1
    dp4 r1.z, r0, c2
    dp4 r1.w, r0, c3
    texld r0, v1, s1
    dp4 r2.x, r0, c4
    dp4 r2.y, r0, c5
    dp4 r2.z, r0, c6
    dp4 r2.w, r0, c7
    add oC0, r1, r2

// approximately 11 instruction slots used (2 texture, 9 arithmetic)
#endif

extern const BYTE pBinary_FDrawableMerge[] =
{
      0,   3, 255, 255, 254, 255, 
     50,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 147,   0, 
      0,   0,   0,   3, 255, 255, 
      3,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    140,   0,   0,   0,  88,   0, 
      0,   0,   2,   0,   0,   0, 
      4,   0,   2,   0,  96,   0, 
      0,   0,   0,   0,   0,   0, 
    112,   0,   0,   0,   2,   0, 
      4,   0,   4,   0,  18,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 119,   0,   0,   0, 
      3,   0,   0,   0,   2,   0, 
      2,   0, 124,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
    109, 117, 108,   0, 171, 171, 
      3,   0,   3,   0,   4,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
    109, 117, 108,  49,   0, 116, 
    101, 120,   0, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      2,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,   3, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      1,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0, 228, 144,   0,   8, 
    228, 160,   9,   0,   0,   3, 
      1,   0,   1, 128,   0,   0, 
    228, 128,   0,   0, 228, 160, 
      9,   0,   0,   3,   1,   0, 
      2, 128,   0,   0, 228, 128, 
      1,   0, 228, 160,   9,   0, 
      0,   3,   1,   0,   4, 128, 
      0,   0, 228, 128,   2,   0, 
    228, 160,   9,   0,   0,   3, 
      1,   0,   8, 128,   0,   0, 
    228, 128,   3,   0, 228, 160, 
     66,   0,   0,   3,   0,   0, 
     15, 128,   1,   0, 228, 144, 
      1,   8, 228, 160,   9,   0, 
      0,   3,   2,   0,   1, 128, 
      0,   0, 228, 128,   4,   0, 
    228, 160,   9,   0,   0,   3, 
      2,   0,   2, 128,   0,   0, 
    228, 128,   5,   0, 228, 160, 
      9,   0,   0,   3,   2,   0, 
      4, 128,   0,   0, 228, 128, 
      6,   0, 228, 160,   9,   0, 
      0,   3,   2,   0,   8, 128, 
      0,   0, 228, 128,   7,   0, 
    228, 160,   2,   0,   0,   3, 
      0,   8,  15, 128,   1,   0, 
    228, 128,   2,   0, 228, 128, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D tex[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex          s0       2
//

    ps_3_0
    def c0, 0, 1, -0, -1
    def c1, 0.00392156886, 0, 0, 0
    dcl_texcoord v0.xy
    dcl_texcoord1 v1.xy
    dcl_2d s0
    dcl_2d s1
    texld r0, v0, s0
    texld r1, v1, s1
    add r0, r0, -r1
    cmp r1, -r0, c0.x, c0.y
    cmp r2, r0, c0.z, c0.w
    frc r0, r0
    add r1, r1, r2
    add r1, r1, c0.y
    cmp r1, -r1, c1.x, c1.y
    add r0, r0, r1
    dp3 r1.x, r0, c0.y
    mad r2, r0.w, c0.xxxy, c0.yyyx
    mad r0, r0, c0.yyyx, c0.xxxy
    cmp oC0, -r1.x, r2, r0

// approximately 14 instruction slots used (2 texture, 12 arithmetic)
#endif

extern const BYTE pBinary_FDrawableCompare[] =
{
      0,   3, 255, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      2,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      2,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  51,  48, 
     46,  56,  52,  48,  48,  46, 
     48,   0, 171, 171,  81,   0, 
      0,   5,   0,   0,  15, 160, 
      0,   0,   0,   0,   0,   0, 
    128,  63,   0,   0,   0, 128, 
      0,   0, 128, 191,  81,   0, 
      0,   5,   1,   0,  15, 160, 
    129, 128, 128,  59,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,   3, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      1,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0, 228, 144,   0,   8, 
    228, 160,  66,   0,   0,   3, 
      1,   0,  15, 128,   1,   0, 
    228, 144,   1,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
     15, 128,   0,   0, 228, 128, 
      1,   0, 228, 129,  88,   0, 
      0,   4,   1,   0,  15, 128, 
      0,   0, 228, 129,   0,   0, 
      0, 160,   0,   0,  85, 160, 
     88,   0,   0,   4,   2,   0, 
     15, 128,   0,   0, 228, 128, 
      0,   0, 170, 160,   0,   0, 
    255, 160,  19,   0,   0,   2, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   2,   0,   0,   3, 
      1,   0,  15, 128,   1,   0, 
    228, 128,   2,   0, 228, 128, 
      2,   0,   0,   3,   1,   0, 
     15, 128,   1,   0, 228, 128, 
      0,   0,  85, 160,  88,   0, 
      0,   4,   1,   0,  15, 128, 
      1,   0, 228, 129,   1,   0, 
      0, 160,   1,   0,  85, 160, 
      2,   0,   0,   3,   0,   0, 
     15, 128,   0,   0, 228, 128, 
      1,   0, 228, 128,   8,   0, 
      0,   3,   1,   0,   1, 128, 
      0,   0, 228, 128,   0,   0, 
     85, 160,   4,   0,   0,   4, 
      2,   0,  15, 128,   0,   0, 
    255, 128,   0,   0,  64, 160, 
      0,   0,  21, 160,   4,   0, 
      0,   4,   0,   0,  15, 128, 
      0,   0, 228, 128,   0,   0, 
     21, 160,   0,   0,  64, 160, 
     88,   0,   0,   4,   0,   8, 
     15, 128,   1,   0,   0, 129, 
      2,   0, 228, 128,   0,   0, 
    228, 128, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.8400.0
//
///
// Parameters:
//
//   sampler2D srctex;
//   sampler2D tex;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   srctex       s0       1
//   tex          s1       1
//

    ps_3_0
    def c0, 1, 0, 0.125, 0.375
    def c1, 1, 0, 0.625, 0.875
    dcl_texcoord v0.xy
    dcl_2d s0
    dcl_2d s1
    texld r0, v0, s1
    mad r1.xy, r0.x, c0, c0.yzzw
    texld r1, r1, s0
    mad r0.xy, r0.y, c0, c0.ywzw
    texld r2, r0, s0
    add r1, r1, r2
    mad r0.xy, r0.z, c1, c1.yzzw
    mad r0.zw, r0.w, c1.xyxy, c1.xyyw
    texld r2, r0.zwzw, s0
    texld r0, r0, s0
    add r0, r0, r1
    add oC0, r2, r0

// approximately 12 instruction slots used (5 texture, 7 arithmetic)
#endif

extern const BYTE pBinary_FDrawablePaletteMap[] =
{
      0,   3, 255, 255, 254, 255, 
     43,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 119,   0, 
      0,   0,   0,   3, 255, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0, 129,   0,   0, 
    112,   0,   0,   0,  68,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  76,   0, 
      0,   0,   0,   0,   0,   0, 
     92,   0,   0,   0,   3,   0, 
      1,   0,   1,   0,   6,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 115, 114,  99, 116, 
    101, 120,   0, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 116, 101, 120,   0, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 112, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     51,  48,  46,  56,  52,  48, 
     48,  46,  48,   0, 171, 171, 
     81,   0,   0,   5,   0,   0, 
     15, 160,   0,   0, 128,  63, 
      0,   0,   0,   0,   0,   0, 
      0,  62,   0,   0, 192,  62, 
     81,   0,   0,   5,   1,   0, 
     15, 160,   0,   0, 128,  63, 
      0,   0,   0,   0,   0,   0, 
     32,  63,   0,   0,  96,  63, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,   3, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   0,   8,  15, 160, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   1,   8,  15, 160, 
     66,   0,   0,   3,   0,   0, 
     15, 128,   0,   0, 228, 144, 
      1,   8, 228, 160,   4,   0, 
      0,   4,   1,   0,   3, 128, 
      0,   0,   0, 128,   0,   0, 
    228, 160,   0,   0, 233, 160, 
     66,   0,   0,   3,   1,   0, 
     15, 128,   1,   0, 228, 128, 
      0,   8, 228, 160,   4,   0, 
      0,   4,   0,   0,   3, 128, 
      0,   0,  85, 128,   0,   0, 
    228, 160,   0,   0, 237, 160, 
     66,   0,   0,   3,   2,   0, 
     15, 128,   0,   0, 228, 128, 
      0,   8, 228, 160,   2,   0, 
      0,   3,   1,   0,  15, 128, 
      1,   0, 228, 128,   2,   0, 
    228, 128,   4,   0,   0,   4, 
      0,   0,   3, 128,   0,   0, 
    170, 128,   1,   0, 228, 160, 
      1,   0, 233, 160,   4,   0, 
      0,   4,   0,   0,  12, 128, 
      0,   0, 255, 128,   1,   0, 
     68, 160,   1,   0, 212, 160, 
     66,   0,   0,   3,   2,   0, 
     15, 128,   0,   0, 238, 128, 
      0,   8, 228, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0, 228, 128,   0,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   1,   0, 228, 128, 
      2,   0,   0,   3,   0,   8, 
     15, 128,   2,   0, 228, 128, 
      0,   0, 228, 128, 255, 255, 
      0,   0
};
}}}; // Scaleform::Render::D3D9


